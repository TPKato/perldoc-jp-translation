=encoding utf8

=for stopwords MINILLA

=encoding utf8

=head1 NAME

=begin original

Minilla - CPAN module authoring tool

=end original

Minilla - CPAN モジュールオーサリングツール

=head1 SYNOPSIS

=begin original

    minil new     - Create a new dist
    minil test    - Run test cases
    minil dist    - Make your dist tarball
    minil install - Install your dist
    minil release - Release your dist to CPAN
    minil run     - Run arbitrary commands against build dir

=end original

    minil new     - 新しいディストリビューションを作る
    minil test    - テストケースを実行する
    minil dist    - 配布用のtar玉を作る
    minil install - ディストリビューションをインストールする
    minil release - ディストリビューションをCPANにリリースする
    minil run     - ビルドディレクトリに対して任意のコマンドを実行する

=head1 DESCRIPTION

=begin original

Minilla is a CPAN module authoring tool. Minilla provides L<minil> command for authorizing a CPAN distribution.

=end original

Minilla は CPANモジュールのオーサリングツールです。Minillaは CPANディストリビューションのオーサリングのために、L<minil>コマンドを用意します。

    (M::I - inc) + shipit + (dzil - plugins)

=begin original

B<THIS IS A DEVELOPMENT RELEASE. API MAY CHANGE WITHOUT NOTICE>.

=end original

B<これは、開発版リリースです。APIは予告なしに変更されるかもしれません>

=head1 MOTIVATION

(動機)

=head1 CONVENTION

(慣習)

=begin original

As stated above, Minilla is opinionated. Minilla has a bold assumption and convention like the followings, which are almost compatible to the sister project L<Dist::Milla>.

=end original

以上のように、Minilla は独断的です。Minillaには以下のような大胆な仮説と慣習があります。これらは姉妹プロジェクトのL<Dist::Milla>とほとんど互換性があります。

=begin original

=over 4

=item Your module written in Pure Perl are located in I<lib/>.

=item Your executable file is in I<script/> directory, if any

=item Your module is maintained with B<Git> and C<git ls-files> matches with what you will release

=item Your module has a static list of prerequisites that can be described in L<cpanfile>

=item Your module has a Changes file

=back

=end original

=over 4

=item I<lib/>以下にPure Perl でモジュールが書かれている

=item 実行ファイルはなんであれ、I<script/>ディレクトリ以下にある

=item モジュールは B<Git> でメンテナンスされており、C<git ls-files> は、リリースするものにマッチする

=item モジュールは、L<cpanfile>に予め必要なものの静的なリストがある

=item モジュールには、Changes がある

=back

=head1 GETTING STARTED

(始めましょう)

    # First time only
    % cpanm Minilla
    # Minilla has only a few deps. It should be very quick

    # Make a new distribution
    % minil new Dist-Name
    % cd Dist-Name/

    # Git commit
    % git commit -m "initial commit"

    # Hack your code!
    % $EDITOR lib/Dist/Name.pm t/dist-name.t cpanfile

    # Done? Test and release it!
    % minil release

=begin original

It's that easy.

=end original

このように、簡単です。

=begin original

You already have distributions with L<Module::Install>, L<Module::Build>, L<Dist::Zilla> or L<ShipIt>? Migrating is also trivial. See "MIGRATING" in L<Minilla::Tutorial> for more details.

=end original

L<Module::Install>、L<Module::Build>、L<Dist::Zilla>、または、L<ShipIt>を使ったディストリビューションがすでにありますか？ 移行もまた些細なことです。詳細は、L<Minilla::Tutorial>の"MIGRATING"を見てください。

=head1 WHY MINILLA?

(なぜ MINILLA?)

=head2 Repository managed by Minilla is git install ready.

(Minillaで作成され、管理されたリポジトリは git インストールできます。)

=begin original

The repository created and managed by Minilla is git install ready.
You can install the library by C<< cpanm git://... >>.

=end original

Minillaで作成され、管理されたリポジトリは git インストールできます。
C<< cpanm git://... >>で、インストールできます。

=begin original

Of course, you can install Minilla from C<< cpanm git://github.com/tokuhirom/Minilla.git >>.

=end original

もちろん、Minilla を、 C<< cpanm git://github.com/tokuhirom/Minilla.git >> からインストールできます。

=head2 Minilla is built on small libraries.

(Minilla は小さなライブラリでできています。)

=begin original

Minilla is built on only few small libraries. You can install Minilla without a huge list of dependencies to heavy modules.

=end original

Minilla は、ほんの少しの小さなライブラリで作られています。重たいモジュールに依存する巨大なリストなしに、インストールすることができます。

=head2 And, what is Minilla?

(Minillaって何?)

=begin original

    Minilla is a Kaiju (Japanese giant monster) from the Godzilla series of films and is the first of several young Godzillas.
    http://en.wikipedia.org/wiki/Minilla

=end original

    ミニラは怪獣(日本の巨大なモンスター)で、ゴジラの一連の映画から取られました。最初の若いゴジラです。
    http://en.wikipedia.org/wiki/Minilla

=head1 CONFIGURATION

(設定)

=begin original

Minilla uses B<Convention over Configuration>.

=end original

Minilla は B<設定より規約>を用いています。

=begin original

But, you can write configurations to I<minil.toml> file in L<TOML|https://github.com/mojombo/toml> format. Minilla reads the I<minil.toml> file in the root directory of your project.

=end original

ですが、設定をI<minil.toml>ファイルに L<TOML|https://github.com/mojombo/toml>フォーマットで書くことができます。Minilla は、プロジェクトのルートディレクトリにあるI<minil.toml>ファイルを読みます。

=over 4

=item name

=begin original

You can write 'name' instead of automatically detecting project name out of the directory name.

=end original

ディレクトリ名から自動的に調べられるプロジェクト名の代わりに、'name'を書くことができます。

=item readme_from

    readme_from="lib/My/Foo.pod"

=begin original

You can specify the file to generate the README.md. This is a main module path by default.

=end original

README.md を生成するファイルを指定することができます。デフォルトではメインのモジュールのパスです。

=item abstract_from

    abstract_from="lib/My/Foo.pod"

=begin original

Grab abstract information from the file contains pod.

=end original

アブストラクトの情報をpodが書かれているファイルから取り出します。

=item authors_from

    authors_from="lib/My/Foo.pod"

=begin original

Grab authors information from the file contains pod.

=end original

著者の情報をpodが書かれているファイルから取り出します。

=item authority

    authority = "cpan:TOKUHIROM"

=begin original

Set x_authority attribute to META.
See L<http://jawnsy.wordpress.com/2011/02/20/what-is-x_authority/> for more details.

=end original

METAに x_authority 属性を設定します。
詳細は、L<http://jawnsy.wordpress.com/2011/02/20/what-is-x_authority/>を見てください。

=item allow_pureperl

    allow_pureperl=1

=begin original

A bool indicating the module is still functional without its XS parts.  When an XS module is build
with C<--pureperl_only>, it will otherwise fail.

=end original

XSの部分がなくても、モジュールが機能的であることを示す真偽値です。XSモジュールが
C<--pureperl_only>でビルドされる時に、真でなければ失敗します。

=begin original

It affects to L<Module::Build> 0.4005+ only.

=end original

L<Module::Build> 0.4005以上のバージョンでのみ有効です。

=item no_github_issues

    no_github_issues=true

=begin original

Minilla sets bugtracker as github issues by default. But if you want to use RT, you can set this variable.

=end original

Minilla はデフォルトで github の issues をバグトラッカーとして設定します。RTを使いたければ、この値を設定することができます。

=item no_index

    [no_index]
    directory=['t', 'xt', 'tools']

=begin original

Minilla sets META.json's no_index as C<< directory => ['t', 'xt', 'inc', 'share', 'eg', 'examples', 'author'] >>
by default. But if you want to change them, you can set this section variable. If this section is set,
specified variables are only used, in fact default settings are not merged.

=end original

Minilla はデフォルトで META.jsonの no_index を C<< directory => ['t', 'xt', 'inc', 'share', 'eg', 'examples', 'author'] >>として
設定します。ですが、これらを変更したければ、このセクションの値をセットできます。このセクションが設定された場合、
指定された値のみが使われます。実際に、デフォルトの設定はマージされません。

=item c_source

    c_source = ['src']

=begin original

A directory which contains C source files that the rest of the build may depend
on.  Any ".c" files in the directory will be compiled to object files.
The directory will be added to the search path during the compilation and
linking phases of any C or XS files.

=end original

残りのビルドが依存している C のソースファイルのあるディレクトリ。
ディレクトリにある、すべての ".c" ファイルはオブジェクトファイルにコンパイルされます。
ディレクトリは C や XS ファイルのコンパイルとリンクの間、サーチパスに加えれられます。

=item script_files

    script_files = ['bin/foo', 'script/*']

=begin original

Minilla sets install script files as C<< ['script/*', 'bin/*'] >> by default.

=end original

Minilla はデフォルトで、インストールスクリプトファイルを C<< ['script/*', 'bin/*'] >> とします。

=item PL_files

=begin original

Specify the PL files.

=end original

PL ファイルを指定します。

    [PL_files]
    lib/Foo/Bar.pm.PL="lib/Foo/Bar.pm"

=item build.build_class

=begin original

Specify a custom Module::Build subclass.

=end original

カスタムの Module::Build サブクラスを指定します。

    [build]
    build_class = builder::MyBuilder

=item FileGatherer.exclude_match

    [FileGatherer]
    exclude_match=['^author_tools/.*']

=begin original

Nothing by default. To exclude certain files from being gathered into dist, use the
C<exclude_match> option. Files matching the patterns are not gathered.

=end original

デフォルトにはありません。特定のファイルをディストリビューションから除外したければ、
C<exclude_match> オプションを使ってください。パターンにマッチしたファイルは除外されます。

=item FileGatherer.include_dotfiles

    [FileGatherer]
    include_dotfiles=false

=begin original

By default, files will not be included in dist if they begin with a dot. This goes
both for files and for directories.

=end original

デフォルトでは、ドットから始まるファイルは、ディストリビューションに含まれません。
この設定はファイルとディレクトリの両方に及びます。

=begin original

In almost all cases, the default value (false) is correct.

=end original

ほとんどすべての場合、デフォルトの値(偽)が正しいです。

=item release.pause_config

    [release]
    pause_config="/path/to/some/.pause"

=begin original

By setting this value to another PAUSE configuration file (see 
L<cpan_upload/CONFIGURATION> for the details), it is possible to use another
PAUSE server (or anything good enough to mimick its upload process) for the
release step.

=end original

この値を別のPAUSE設定ファイル(詳細は次を参照 L<cpan_upload/CONFIGURATION>)に設定することで、
リリースステップで別のPAUSEサーバ(か、PAUSEのアップロードプロセスに十分に似せた何か)を使えます。

=begin original

To do so, simply add a C<upload_uri> entry in your file to the alternate PAUSE
server, i.e :

=end original

そうするためには、C<upload_uri>エントリを加えて、代替のPAUSEサーバにしてください。
例:

    upload_uri http://127.0.0.1:5000/pause/authenquery

=begin original

Note that this feature is not officially documented in L<CPAN::Uploader>.

=end original

この機能はL<CPAN::Uploader>には、公式に書かれていません。

=back

=head1 FAQ

=over 4

=item Why don't you provide plug-in support?

(なぜ、plug-inをサポートしないのですか？)

=begin original

If you want to pluggable thing, it's already exist dzil :P
And if you like a behavior like Minilla, you can use L<Dist::Milla>, the sister project of Minilla.
L<Dist::Milla>'s behavior is mostly like Minilla.

=end original

プラガブルなものがほしければ、既に dzil があります :P
Minillaのような振る舞いが好きならば、L<Dist::Milla>を使うことができます。Minillaの姉妹プロジェクトです。
L<Dist::Milla>の振る舞いはMinillaと大部分似ています。

=item Why minil only supports git?

(なぜ、minil は git しかサポートしないのですか?)

=begin original

I think git is a best VC for CPAN modules, for now.

=end original

今のところ、CPANモジュールにとってgitがベストなVCだと思うからです。

=begin original

If you want to use another version control system, you can probably use L<Dist::Milla>.

=end original

他のバージョンコントロールシステムを使いたければ、L<Dist::Milla>を使うことができるでしょう。

=item And why...

(では、なぜ...)

=begin original

Yes. You can use L<Dist::Milla>.

=end original

はい。L<Dist::Milla>を使えます。

=item Should I add (META.json|Build.PL) to repository?

((META.json|Build.PL)をリポジトリに加えるべきですか?)

=begin original

Yes. You need to add it to make your git repo installable via cpanm.

=end original

はい。cpanm で git リポジトリからのインストールを可能にするために必要です。

=item How do I manage ppport.h?

(ppport.h をどのように管理しますか？)

=begin original

Is there a reason to remove ppport.h from repo?

=end original

ppport.h をリポジトリから消す理由がありますか？

=item How can I install script files?

(スクリプトファイルをどうやってインストールできますか?)

=begin original

Your executables must be in F<script/>. It's L<Module::Build::Tiny>'s rule.

=end original

実行可能なものは F<script/> に入れてください。これは、L<Module::Build::Tiny>のルールです。

=item How to switch from Module::Install/Module::Build/Dist::Zilla?

(Module::Install/Module::Build/Dist::Zillaからどのようにスイッチしますか?)

=begin original

You can use experimental `minil migrate` sub-command.
See L<Minilla::CLI::Migrate> for more details.

=end original

実験的な `minil migrate` サブコマンドを使えます。
詳細は、L<Minilla::CLI::Migrate>を見てください。

=back

=head1 AUTHORS

Tokuhiro Matsuno E<lt> tokuhirom@gmail.com E<gt>

Tatsuhiko Miyagawa

=head1 THANKS TO

RJBS, the author of L<Dist::Zilla>. L<Dist::Zilla> points CPAN authorizing tool.

=head1 SEE ALSO

=head1 LICENSE

Copyright (C) Tokuhiro Matsuno

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.


=cut

