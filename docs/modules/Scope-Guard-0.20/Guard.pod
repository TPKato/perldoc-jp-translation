=encoding utf-8

=head1 NAME

=begin original

Scope::Guard - lexically-scoped resource management

=end original

Scope::Guard - レキシカルスコープにおけるリソース管理

=head1 SYNOPSIS

=begin original

    my $guard = guard { ... };

      # or

    my $guard = scope_guard \&handler;

      # or

    my $guard = Scope::Guard->new(sub { ... });

    $guard->dismiss(); # disable the handler

=end original

    my $guard = guard { ... };

      # or

    my $guard = scope_guard \&handler;

      # or

    my $guard = Scope::Guard->new(sub { ... });

    $guard->dismiss(); # ハンドラの無効化

=head1 DESCRIPTION

=begin original

This module provides a convenient way to perform cleanup or other forms of resource
management at the end of a scope. It is particularly useful when dealing with exceptions:
the C<Scope::Guard> constructor takes a reference to a subroutine that is guaranteed to
be called even if the thread of execution is aborted prematurely. This effectively allows
lexically-scoped "promises" to be made that are automatically honoured by perl's garbage
collector.

For more information, see: L<http://www.drdobbs.com/cpp/184403758>

=end original

このモジュールは, スコープ終了地点でのクリーンアップまたはリソース管理などを行う
使い勝手のよい手段を提供します.
これは例外を扱う場合に特に便利です:
C<Scope::Guard>のコンストラクタはサブルーチンリファレンスを受け取り,
スレッドの実行が早い段階でアボートしたときでもそれを呼び出すことを保証します.
この機能は, perlのガーベッジコレクタが,
レキシカルスコープの処理を自動的に引き受けることを保証するので, 実現できます.

より多くの情報については L<http://www.drdobbs.com/cpp/184403758>を参照してください.

=head1 METHODS

=begin original

=head2 new

    my $guard = Scope::Guard->new(sub { ... });

      # or

    my $guard = Scope::Guard->new(\&handler);

The C<new> method creates a new C<Scope::Guard> object which calls the supplied handler when its C<DESTROY> method is
called, typically at the end of the scope.

=head2 dismiss

    $guard->dismiss();

      # or

    $guard->dismiss(1);

C<dismiss> detaches the handler from the C<Scope::Guard> object. This revokes the "promise" to call the
handler when the object is destroyed.

The handler can be re-enabled by calling:

    $guard->dismiss(0);

=end original

=head2 new

    my $guard = Scope::Guard->new(sub { ... });

      # or

    my $guard = Scope::Guard->new(\&handler);

C<new>メソッドは, C<DESTROY>メソッドが呼び出されるときに与えられたハンドラを呼び出す
C<Scope::Guard>オブジェクトを生成します.
C<DESTROY>メソッドは通常スコープの終了地点で呼ばれます.

=head2 dismiss

    $guard->dismiss();

      # or

    $guard->dismiss(1);

C<dismiss>は C<Scope::Guard>オブジェクトからハンドラを切り離します.
オブジェクトが破棄されるときに, ハンドラを呼び出す"保証"を無効にします.


以下の呼び出しでハンドラを再び有効化できます:

    $guard->dismiss(0);

=head1 EXPORTS

=begin original

=head2 guard

C<guard> takes a block and returns a new C<Scope::Guard> object. It can be used
as a shorthand for:

    Scope::Guard->new(...)

e.g.

    my $guard = guard { ... };

Note: calling C<guard> anonymously, i.e. in void context, will raise an exception.
This is because anonymous guards are destroyed B<immediately>
(rather than at the end of the scope), which is unlikely to be the desired behaviour.

=head2 scope_guard

C<scope_guard> is the same as C<guard>, but it takes a code ref rather than a block.
e.g.

    my $guard = scope_guard \&handler;

or:

    my $guard = scope_guard sub { ... };

or:

    my $guard = scope_guard $handler;

As with C<guard>, calling C<scope_guard> in void context will raise an exception.

=end original

=head2 guard

C<guard>はブロックを受け取り, C<Scope::Guard>オブジェクトを返します.
次の省略表現として使えます.

    Scope::Guard->new(...)

このように.

    my $guard = guard { ... };

注記: C<guard>を voidコンテキストで呼び出すと例外が発生します.
これは(スコープの終了地点ではなく)B<即座>にカードが破棄されてしまい,
望む振る舞いにはならないためです.

=head2 scope_guard

C<scope_guard>は C<guard>と同様ですが, ブロックではなくコードリファレンスを受け取ります.

例を挙げると

    my $guard = scope_guard \&handler;

もしくは

    my $guard = scope_guard sub { ... };

もしくは

    my $guard = scope_guard $handler;

C<guard>と同様に, voidコンテキストでの C<scope_guard>の呼び出しは例外が発生します.

=head1 VERSION

0.20

=head1 SEE ALSO

=over

=item * L<B::Hooks::EndOfScope|B::Hooks::EndOfScope>

=item * L<End|End>

=item * L<Guard|Guard>

=item * L<Hook::Scope|Hook::Scope>

=item * L<Object::Destroyer|Object::Destroyer>

=item * L<Perl::AtEndOfScope|Perl::AtEndOfScope>

=item * L<ReleaseAction|ReleaseAction>

=item * L<Scope::local_OnExit|Scope::local_OnExit>

=item * L<Scope::OnExit|Scope::OnExit>

=item * L<Sub::ScopeFinalizer|Sub::ScopeFinalizer>

=item * L<Value::Canary|Value::Canary>

=back

=head1 AUTHOR

chocolateboy <chocolate@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2005-2010, chocolateboy.

This module is free software. It may be used, redistributed and/or modified under the same terms
as Perl itself.

=cut
