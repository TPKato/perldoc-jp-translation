=encoding utf8

=pod

=head1 題名

Moose::Manual::Construction - Mooseを使ったオブジェクトの生成（と破棄）

=head1 コンストラクタはどこにありますか

B<自分のクラスにはC<new()>メソッドを定義しないでください!>

C<use Moose>したクラスはL<Moose::Object>のサブクラスになるのですが、C<new>メソッドはこのL<Moose::Object>が用意してくれます。L<Moose::Manual::BestPractices>のおすすめ通りにクラスを不変化した場合は、そのクラス専用のC<new>メソッドがクラスの中に実際に「インライン展開」されます。

=head1 オブジェクトの生成とアトリビュート

Mooseが提供するコンストラクタはアトリビュートに対応する（実際にはアトリビュートのC<init_arg>に対応する）名前付きパラメータのハッシュないしハッシュリファレンスを受け付けます。これもまたMooseを使うとクラスが「どのように」実装されているか心配しなくてよくなる理由のひとつです。クラスを定義しさえすればオブジェクトを生成できるようになるのです!

=head1 オブジェクト生成時の割り込み

Mooseを使うとオブジェクト生成時に割り込みをかけることもできます（オブジェクトの状態を検証したり、ログを取ったり、おそらくハッシュ（リファレンス）以外のコンストラクタ引数を許すようにもできます）。そうする場合は、C<BUILD>メソッドやC<BUILDARGS>メソッドを作ってください。

これらのメソッドがクラスに存在している場合、Mooseはオブジェクト生成プロセスの途中でこれらのメソッドを呼ぶよう手配してくれます。

=head2 BUILDARGS

C<BUILDARGS>メソッドは、オブジェクトが生成される「前に」、クラスメソッドとして呼ばれます。C<BUILDARGS>メソッドは、C<new>に渡されたすべての引数を「そのままの形で」受け取り、ハッシュリファレンスを返すことが期待されています。このハッシュリファレンスはオブジェクトを生成するときに使うので、アトリビュート名（というかC<init_arg>）に対応したキーを入れておくようにしてください。

C<BUILDARGS>は、ハッシュ（リファレンス）以外の呼び出し方に対応させるときによく使われます。たとえば、PersonクラスはC<< Person->new($ssn) >>のように社会保障番号ひとつで呼べるようにしたい場合があるかもしれません。

この場合、C<BUILDARGS>メソッドがないと、Mooseは（ハッシュまたはハッシュリファレンスを期待しているので）エラーを発生させますが、C<BUILDARGS>メソッドを使うとこの呼び出し方に対応できます。

  sub BUILDARGS {
      my $class = shift;

      if ( @_ == 1 && ! ref $_[0] ) {
          return { ssn => $_[0] };
      }
      else {
          return $class->SUPER::BUILDARGS(@_);
      }
  }

C<SUPER::BUILDARGS>を呼んでいることに注意してください。これはL<Moose::Object>にデフォルトで用意されているC<BUILDARGS>を呼ぶものです。このメソッドを使うとハッシュリファレンスとただのハッシュを区別してくれます。

=head2 BUILD

C<BUILD>メソッドはオブジェクトが生成された「あとに」呼ばれます。C<BUILD>メソッドの使い方はいくつかありますが、もっともよくあるのは、オブジェクトの状態が有効かどうかチェックするものです（型を使えば個々のアトリビュートの検証はできますが、オブジェクト全体の状態についてはその方法では検証できません）。

  sub BUILD {
      my $self = shift;

      if ( $self->country_of_residence eq 'USA' ) {
          die 'All US residents must have an SSN'
              unless $self->has_ssn;
      }
  }

C<BUILD>メソッドのほかの使い方としては、オブジェクトを生成したときのログ取りやトラッキングがあげられます。

  sub BUILD {
      my $self = shift;

      debug( 'Made a new person - SSN = ', $self->ssn, );
  }

=head3 BUILDと親クラス

継承階層に複数のC<BUILD>メソッドがある場合、Perlのふつうのメソッドとは相互作用の仕方が異なるので、B<決してC<< $self->SUPER::BUILD >>は呼ばないようにしてください。>

Mooseは、オブジェクトを生成するとき、階層内にあるすべてのC<BUILD>メソッドを「親から子の順番で」呼ぶよう手配します（最初は驚くかもしれませんが、通常のメソッド継承の順番とは逆なのです）。

このようになっているのは、C<BUILD>メソッドはクラスの制約の特殊性を増すことにしか使えないため、もっとも抽象的なC<BUILD>から呼んでいく方が理にかなっているからです（なお、Perl 6もそのようになっています）。

=head1 オブジェクトの破棄

Mooseを使うと、オブジェクトを破棄するときもC<DEMOLISH>メソッドで割り込みをかけられます。C<BUILD>の場合と同じく、明示的にC<< $self->SUPER::DEMOLISH >>を呼ぶことは決してしないでください。Mooseは階層内のすべてのC<DEMOLISH>メソッドを、もっとも具体的なクラスからもっとも抽象的なクラスの順に呼ぶよう手配します。

ただし、たいていの場合はPerlに組み込まれているガベージコレクションで十分です。C<DEMOLISH>メソッドを用意する必要はありません。

=head1 作者

Dave Rolsky E<lt>autarch@urth.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

