=encoding utf8

=pod

=head1 題名

Moose::Manual::Contributing - Mooseの開発に加わるには

=head1 開発に加わる

Mooseはオープンなプロジェクトです。バグフィックスや追加のテスト、ドキュメントのパッチはいつでも大歓迎です。コミット権も惜しみなく与えられますし、L<基本ワークフロー>もシンプルです。作業の基本は簡単です： gitリポジトリからコピーをクローンし、トピックブランチでハックした後、内容をコミッタの人に確認してもらうだけです。

=head2 IRCとメール

IRC上ではB<多くの>議論がかわされています。irc.perl.orgには#mooseと#moose-devという2つのチャンネルがあります（#mooseの方がはるかに活発ですが、コア開発者は両方のチャンネルに目配りしています）。

また、メーリングリストもあります(moose@perl.org)。コア開発者は全員リストのメッセージを読んで返事をしています。

=head1 新しい機能について

Mooseはすでにかなり大量の機能がありますから、いまのところ新たに重要な機能を追加する予定はB<ありません>。Mooseに新しい機能を追加したい場合は、まずはそのかわりにMooseXモジュールを作ることをおすすめします。

いまの段階では、先にMooseXモジュールという形で十分に吟味されていない機能については、新機能としてコアに追加しようという話にすらなりません。コアに入れない限り絶対に100％実装不可能な機能であれば話は別ですが。

本当に100％不可能と考えるのであれば、それについてIRCかメールで議論してください。コアに小さなフックが必要だったり、コアモジュールの一部をリファクタリングする必要はもちろん検討します。

Mooseは最初から非常に拡張性を重視して作られてきました。新機能の要望が寄せられても、たいていはよくできた小さな拡張モジュールをいくつか使えば実装できてしまうものなのです。だから、まずはそちらを試してみてください。思っているよりはるかに簡単ですから。

=head1 関わっている人々

Mooseが成熟するにつれ、少しずつ体制も整ってきました。

=over

=item コントリビュータ - トピックやブランチを作成する人

これはあなたの事です。

もしすでにコミット権限を持っているなら、マスタのMoose.gitにトピックを作成してください。そうでない場合は、我々にあなたのSSH鍵を送ってもらうか、L<git://git.moose.perl.org/Moose.git>のクローンレポジトリを自前で作るかGithubのミラーをforkしてください。

=item コアコミッター - ブランチを確認・マージする人

これらの人たちはMooseコードベースにある程度慣れた人たちです。

They've been responsible for large features or branches and can help review
your changes and apply them to the master branch using the basic
L</APPROVAL WORKFLOW>.

They are also fairly well versed in Git, in order to merge the branches with
no mistakes (especially when the merge fails), and to provide advice to
contributors.

=item Cabal - people who can release moose

These people are the ones who have co-maint on Moose itself and can create a
release. They're listed under L<Moose/CABAL> in the Moose documentation. They
merge from Master to Stable.

=back

=head1 ブランチ レイアウト

The repository is divided into several branches to make maintenance easier for
everyone involved. The branches below are ordered by level of stability.

=over

=item Stable (refs/heads/stable)

The branch from which releases are cut. When making a new release, the
release manager merges from master to stable. The stable branch is only
updated by someone from the Cabal during a release.

=item Master (refs/heads/master)

The branch for new development. This branch is merged into and branched from.

=item Branches (refs/heads/*)

Large community branches for big development "projects".

=item Topics (refs/heads/topic/*)

Small personal branches that have been published for review, but can get
freely rebased. Targeted features that may span a handful of commits.

Any change or bugfix should be created in a topic branch.

=back

=head1 基本ワークフロー

    # update your copy of master
    git checkout master
    git pull --rebase

    # create a new topic branch
    git checkout -b topic/my-feature

    # hack, commit, feel free to break fast forward
    git commit --amend                       # allowed
    git rebase --interactive                 # allowed
    git push --force origin topic/my_feature # allowed

上記を行ったあと、変更点の確認および承認を行い（L</承認ワークフロー>参照）、その後マスターブランチにマージしてください。コンフリクト無くマージし、なおかつ誰も異議お唱えなければ、その後マスターブランチにプッシュすることができます。

もしマージがfast forwardとしてうまく行かない場合、ブランチ作者は以下のコマンドを走らせる必要があります：

    git remote update
    git rebase origin/master # or merge

このようにして手持ちのブランチを最新にアップデートした後、fast forwardマージとして処理する必要があります。

マスターブランチに対するマージを行う場合は人によるマージ（コンフリクトの解決）は行うべきではありません。マスターブランチから他のブランチにマージするときにのみ、行われるべきです。

=head2 トピックブランチの準備

マージの前にトピックブランチは作者によって「掃除」されます。

これはコミットを複合化する対話的なrebase等の手法や、C<git merge --squash>を用いてトピック全体を一つのコミットとすることによって行う事ができます。

このような変更点の複合化を行うことにより、後に問題が会ったときにgit revertなどを適用する際に便利になるほか、変更お途中途中で起こった細かい失敗等で履歴を汚すことなく作者の意図が履歴にきれいな形で残せるようになります（「ファイル入れ忘れ」のようなコミットは単に無駄な雑音というだけでなく、git bisectやgit revertを使用する際の妨げになります）

それ以上に一番の利点は、マスターブランチに入るコミットの中身をシンプルにし、コミット数そのものを減らせるということがあげられます。それにより、他のブランチの管理者が容易に最新コードを適用できるようになります。

また、大きな変更はL<Moose::Manual::Delta>にその内容が明記されるべきです。.

=head1 承認ワークフロー

Moose is an open project but it is also an increasingly important one. Many
modules depend on Moose being stable. Therefore, we have a basic set of
criteria for reviewing and merging branches. What follows is a set of rough
guidelines that ensures all new code is properly vetted before it is merged to
the master branch.

It should be noted that if you want your specific branch to be approved, it is
B<your> responsibility to follow this process and advocate for your branch.
The preferred way is to send a request to the mailing list for review/approval,
this allows us to better keep track of the branches awaiting approval and those
which have been approved.

=over 4

=item Small bug fixes, doc patches and additional passing tests.

These items don't really require approval beyond one of the core contributors
just doing a simple review.

=item Larger bug fixes, doc additions and TODO or failing tests.

Larger bug fixes should be reviewed by at least one cabal member and should be
tested using the F<cpan-stable-smolder> script in the moose-dev-utils
repository.

New documentation is always welcome, but should also be reviewed by a cabal
member for accuracy.

TODO tests are basically feature requests, see our L</NEW FEATURES> section
for more information on that. If your feature needs core support, create a
topic/ branch using the L</STANDARD WORKFLOW> and start hacking away.

Failing tests are basically bug reports. You should find a core contributor
and/or cabal member to see if it is a real bug, then submit the bug and your
test to the RT queue. Source control is not a bug reporting tool.

=item New user-facing features.

Anything that creates a new user-visible feature needs to be approved by
B<more than one> cabal member.

Make sure you have reviewed L</NEW FEATURES> to be sure that you are following
the guidelines. Do not be surprised if a new feature is rejected for the core.

=item New internals features.

New features for Moose internals are less restrictive than user facing
features, but still require approval by B<at least one> cabal member.

Ideally you will have run the smolder script to be sure you are not breaking
any MooseX module or causing any other unforeseen havoc. If you do this
(rather than make us do it), it will only help to hasten your branch's
approval.

=item Backwards incompatible changes.

Anything that breaks backwards compatibility must be discussed by the cabal
and agreed to by a majority of the members.

We have a policy for what we see as sane L</BACKWARDS COMPATIBILITY> for
Moose. If your changes break back-compat, you must be ready to discuss and
defend your change.

=back

=head1 RELEASE WORKFLOW

    git checkout master
    # edit for final version bumping, changelogging, etc
    # prepare release (test suite etc)
    git commit
    git checkout stable
    git merge master # must be a fast forward
    git push both
    # ship & tag

Development releases are made without merging into the stable branch.

=head1 EMERGENCY BUG WORKFLOW (for immediate release)

Anyone can create the necessary fix by branching off of the stable branch:

    git remote update
    git checkout -b topic/my-emergency-fix origin/stable
    # hack
    git commit

Then a cabal member merges into stable:

    git checkout stable
    git merge topic/my-emergency-fix
    git push
    # release
    git checkout master
    git merge stable

=head1 PROJECT WORKFLOW

For longer lasting branches, we use a subversion style branch layout, where
master is routinely merged into the branch. Rebasing is allowed as long as all
the branch contributors are using C<git pull --rebase> properly.

C<commit --amend>, C<rebase --interactive>, etc. are not allowed, and should
only be done in topic branches. Committing to master is still done with the
same review process as a topic branch, and the branch must merge as a fast
forward.

This is pretty much the way we're doing branches for large-ish things right
now.

Obviously there is no technical limitation on the number of branches. You can
freely create topic branches off of project branches, or sub projects inside
larger projects freely. Such branches should incorporate the name of the branch
they were made off so that people don't accidentally assume they should be
merged into master:

    git checkout -b my-project--topic/foo my-project

(unfortunately Git will not allow C<my-project/foo> as a branch name if
C<my-project> is a valid ref).

=head1 "PU" ブランチ

To make things easier for longer lived branches (whether topics or projects),
the 'pu' branch is basically what happens if you merge all of the branches and
topics together with master.

We can update this as necessary (e.g. on a weekly basis if there is merit),
notifying the authors of the respective branches if their branches did not merge
(and why).

'pu'ブランチをアップデートするために以下の手順がとられます:

    git checkout pu
    git remote update
    git reset --hard origin/master
    git merge @all_the_branches

もしマージがクリーンに適用できる場合はC<push --force>を使って'pu'ブランチがアップデートされます。

もしあるブランチのマージが適用できない場合、該当ブランチはコンフリクトがあった事を記録した上でC<@all_the_branches>から取り除かれます。

マージに失敗したブランチの作者は自分で'pu'ブランチへのマージを試みてどのような作用があるのか確認するべきです。

ほとんどの場合'pu'ブランチは壊れているでしょうが、それぞれ他のブランチがどのようにお互いと影響するかが確認できます。

=head1 ブランチのアーカイブ

マージされたブランチは削除されるべきです。

うまくいかなかったブランチは残しておいてもよいですが、git branch -l を最新の状態にしておくために refs/attic/ (e.g.  http://danns.co.uk/node/295) への移動を検討してください。

現実的にまだ近い将来にマージされる可能性のあるブランチはアーカイブするべきではありません。

=head1 テスト、テスト、テスト

MooseやClass::MOPにコードを追加する場合は「どんなコードであっても」そのコードに対するテストをB<書かなければなりません>。テストがない場合、本当にそれが正しい、求められている動作なのか確認する方法がありませんので、あとからその修正が削除されたり変更されたりしないと保証することはできません。

修正・追加したコードがMoose/Class::MOPの奥深くにあって、自明な形ではテストできない場合は、問題のコードの近くかテストの中にコメントを書いて、ほかの人にもわかるようにしておいてください。

また、コードの変更にあわせてドキュメントを書いたり、Changesファイルに変更点を載せたりしてもらえると非常に助かります。ご自分のお名前を書いておくのもお忘れなく！

=head1 後方互換性

変化が起こるのは避けられませんし、Mooseもその例外ではありません。後方互換性を保つように最大限の努力は払っていますが、コードベースが互換性を保つためのコードだらけになるのは本末転倒だと思っています。軽々しく変更を加えていこう、というわけではないのですが（正反対です）、私たちは変更をおそれず、エンドユーザにとってなるべく苦痛の少ない状態を保つようベストを尽くしていきます。

後方互換性が失われる変更を加える場合は、規則として「少なくとも」リリース1回分の周知期間をB<設けなければなりません>（大きな変更の場合は周知期間をのばす必要があります）。本当に大きな、あるいは過激な変更を行う場合は、デベロッパーリリースも必要になるかもしれません（これについてはその都度コア開発者が判断します）。

機能を廃止する場合は、よくわかるように何度も警告を出して、ユーザに手元のコードを修正する時間を与えるようにしてください。

後方互換性が失われる変更はすべてL<Moose::Manual::Delta>にB<記載しなければなりません>。このドキュメントにはかならずその修正に対する有用なヒントや対策を載せてください。

=head1 作者

Stevan Little E<lt>stevan@iinteractive.comE<gt>

Chris (perigrin) Prather

Yuval (nothingmuch) Kogman

=head1 COPYRIGHT AND LICENSE

Copyright 2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

