=encoding utf8

=pod

=head1 題名

Moose::Manual::Delta - Mooseの重要な変更点

=head1 本文

これは後方互換性の点で重要な、あるいは特筆に値するMooseの変更点をまとめたものです。F<Changes>ファイルのデータと重複しているのは本当ですが、ここではより詳しい情報や（あれば）対策を紹介するのがねらいです。

このドキュメントは、変化についていくのを助けるだけでなく、特定の機能をサポートする最低バージョンを調べるのにも使えます。問題に遭遇して解決策を見つけたけれどここには書かれていなかったとか、大事な機能を書き漏らしていると思ったら、パッチを送ってください。

=head1 0.90

=over 4

=item Added Native delegation for Code refs

See L<Moose::Meta::Attribute::Native::Trait::Code> for details.

=item Calling $object->new() is deprecated

Moose has long supported this, but it's never really been documented, and we
don't think this is a good practice. If you want to construct an object from
an existing object, you should provide some sort of alternate constructor like
C<< $object->clone >>.

Calling C<< $object->new >> now issues a warning, and will be an error in a
future release.

=item Moose no longer warns if you call C<make_immutable> for a class with mutable ancestors

While in theory this is a good thing to warn about, we found so many
exceptions to this that doing this properly became quite problematic.

=back

=head1 Version 0.89_02

=over 4

=item New Native delegation methods from L<List::Util> and L<List::MoreUtils>

In particular, we now have C<reduce>, C<shuffle>, C<uniq>, and C<natatime>.

=item The Moose::Exporter with_caller feature is now deprecated

Use C<with_meta> instead. The C<with_caller> option will start warning in a
future release.

=item Moose now warns if you call C<make_immutable> for a class with mutable ancestors

This is dangerous because modifying a class after a subclass has been
immutabilized will lead to incorrect results in the subclass, due to inlining,
caching, etc. This occasionally happens accidentally, when a class loads one
of its subclasses in the middle of its class definition, so pointing out that
this may cause issues should be helpful. Metaclasses (classes that inherit
from L<Class::MOP::Object>) are currently exempt from this check, since at the
moment we aren't very consistent about which metaclasses we immutabilize.

=back

=head1 Version 0.89_01

L<Moose::Meta::Attribute::Native> has been moved into the Moose core from
L<MooseX::AttributeHelpers>.  Major changes include:

=over 4

=item C<traits>, not C<metaclass>

Method providers are only available via traits.

=item C<handles>, not C<provides> or C<curries>

The C<provides> syntax was like core Moose C<< handles => HASHREF >>
syntax, but with the keys and values reversed.  This was confusing,
and AttributeHelpers now uses C<< handles => HASHREF >> in a way that
should be intuitive to anyone already familiar with how it is used for
other attributes.

The C<curries> functionality provided by AttributeHelpers has been
generalized to apply to all cases of C<< handles => HASHREF >>, though
not every piece of functionality has been ported (currying with a
CODEREF is not supported).

=item C<empty> is now C<is_empty>, and means empty, not non-empty

Previously, the C<empty> method provided by Arrays and Hashes returned true if
the attribute was B<not> empty (no elements).  Now it returns true if the
attribute B<is> empty. It was also renamed to C<is_empty>, to reflect this.

=item C<find> was renamed to C<first>, and C<first> and C<last> were removed

L<List::Util> refers to the functionality that we used to provide under C<find>
as L<first|List::Util/first>, so that will likely be more familiar (and will
fit in better if we decide to add more List::Util functions). C<first> and
C<last> were removed, since their functionality is easily duplicated with
curries of C<get>.

=item Helpers that take a coderef of one argument now use C<$_>

Subroutines passed as the first argument to C<first>, C<map>, and C<grep> now
receive their argument in C<$_> rather than as a parameter to the subroutine.
Helpers that take a coderef of two or more arguments remain using the argument
list (there are technical limitations to using C<$a> and C<$b> like C<sort>
does).

See L<Moose::Meta::Attribute::Native> for the new documentation.

=back

The C<alias> and C<excludes> role parameters have been renamed to C<-alias>
and C<-excludes>. The old names still work, but new code should use the new
names, and eventually the old ones will be deprecated and removed.

=head1 Version 0.89

C<< use Moose -metaclass => 'Foo' >> now does alias resolution, just like
C<-traits> (and the C<metaclass> and C<traits> options to C<has>).

Added two functions C<meta_class_alias> and C<meta_attribute_alias> to
L<Moose::Util>, to simplify aliasing metaclasses and metatraits. This is
a wrapper around the old

  package Moose::Meta::Class::Custom::Trait::FooTrait;
  sub register_implementation { 'My::Meta::Trait' }

way of doing this.

=head1 Version 0.84

When an attribute generates I<no> accessors, we now warn. This is to help
users who forget the C<is> option. If you really do not want any accessors,
you can use C<< is => 'bare' >>. You can maintain back compat with older
versions of Moose by using something like:

    ($Moose::VERSION >= 0.84 ? is => 'bare' : ())

When an accessor overwrites an existing method, we now warn. To work around
this warning (if you really must have this behavior), you can explicitly
remove the method before creating it as an accessor:

    sub foo {}

    __PACKAGE__->meta->remove_method('foo');

    has foo => (
        is => 'ro',
    );

When an unknown option is passed to C<has>, we now warn. You can silence
the warning by fixing your code. :)

The C<Role> type has been deprecated. On its own, it was useless,
since it just checked C<< $object->can('does') >>. If you were using
it as a parent type, just call C<role_type('Role::Name')> to create an
appropriate type instead.


=head1 バージョン0.78

C<use Moose::Exporter;>をしたパッケージにはC<strict>とC<warnings>がインポートされるようになりました。

=head1 バージョン0.77

C<DEMOLISHALL>とC<DEMOLISH>はグローバルなデストラクタを実行中かどうかをあらわす引数を受け取るようになりました。

=head1 バージョン0.76

すでに型制約を満たしている値については型変換が実行されないようになりました。これはC<via>節の副作用に依存している特殊な（バグがあると言ってもよさそうな）型変換に影響を与えるかもしれません。

=head1 バージョン0.75

L<Moose::Exporter>が（L<metaclass>を使わなくても）簡単にメタクラスをオーバーライドできるようにC<-metaclass>オプションを受け付けるようになりました。これはクラスとロールで使えます。

=head1 バージョン0.74

Moose以外のクラスをもっと簡単に統合できるように、L<Moose::Util::TypeConstraints>にC<duck_type>というシュガー関数を追加しました。これは単にC<< $obj->can() >>にメソッドのリストを渡して真を返すかチェックするだけのものです。

多くのメソッドをリネームしました（ほとんどはL<Class::MOP>から継承しているものです。先頭にアンダースコアをつけて、内部用であることを明示しました）。当面は古いメソッドも使えますが、メソッドがリネームされたという警告が出るようになります。いくつかのメソッドについては将来完全に削除する予定です（そのようなメソッドを利用していたMooseXの作者には影響があるかもしれません）。

=head1 バージョン0.73

引数に名前しか渡さずにC<subtype>を呼ぶと、例外を発生するようになりました。無名のサブタイプがほしい場合はこのようにしてください。

    my $subtype = subtype as 'Foo';

これはバージョン0.71_01の変更に関係するものです。

L<Moose::Meta::Method::Destructor>のC<is_needed>メソッドはクラスメソッドとしてしか使えないようになりました（以前はクラスメソッドとしてもオブジェクトメソッドとしても使えましたが、それぞれ内部的な実装は異なっていたのです）。

Class::MOP 0.78_02でクラスを不変化する処理が内部的に大きく変わったのを受けて、Mooseの内部も変更されました。外から見えるC<< $metaclass->make_immutable >>メソッドについては従来通りの動作をします。

=head1 バージョン0.72

可変クラスではC<< Foo->new(undef) >>を文句もいわずに受け入れていました。また、不変化したクラスでは不親切なエラーが出ていました。これからはどちらの場合でも親切なエラーが発生するようになっています。

この「機能」は、もともとはこのようなケースを認めるために追加されたものだったのですが、

  my $args;

  if ( something() ) {
      $args = {...};
  }

  return My::Class->new($args);

このやり方は本当のエラーを簡単に隠蔽できてしまうため、筋が悪いし、いささか魔法も効き過ぎていると判断しました。

=head1 バージョン0.71_01

C<type>やC<subtype>をシュガーヘルパー（C<as>、C<where>、C<message>）なしで呼ぶやり方は廃止されました。

その副作用として、C<as>にはPerlのプロトタイプを使うことになったので、このようなコードは動かなくなります。

  use Moose::Util::TypeConstraints;
  use Declare::Constraints::Simple -All;

  subtype 'ArrayOfInts'
      => as 'ArrayRef'
      => IsArrayRef(IsInt);

これは、このように変更しなければなりません。

  subtype(
      'ArrayOfInts' => {
          as    => 'ArrayRef',
          where => IsArrayRef(IsInt)
      }
  );

古いバージョンのMooseとの後方互換性を維持するには、MooseのC<VERSION>を明示的にテストしなければなりません。

  if ( Moose->VERSION < 0.71_01 ) {
      subtype 'ArrayOfInts'
          => as 'ArrayRef'
          => IsArrayRef(IsInt);
  }
  else {
      subtype(
          'ArrayOfInts' => {
              as    => 'ArrayRef',
              where => IsArrayRef(IsInt)
          }
      );
  }

=head1 バージョン0.70

トリガの最後の引数にメタアトリビュートオブジェクトを渡さないようにしました。実は、インライン展開されたコードの方ではしばらく前からそのように変更されていたのですが、インライン展開していないコードとドキュメントは古いままになっていました。

万一実際にこの機能を利用していた場合の対策は簡単です。このように、トリガの最初の引数として渡されるC<$self>からアトリビュートオブジェクトを取ってください。

  has 'foo' => (
      is      => 'ro',
      isa     => 'Any',
      trigger => sub {
          my ( $self, $value ) = @_;
          my $attr = $self->meta->find_attribute_by_name('foo');

          # ...
      }
  );

=head1 バージョン0.66

サブタイプを作成したとき、Mooseが知らない親クラスを渡すと、その親クラスは単純に無視されていました。いまは自動的にその親クラスのクラス型を作成します。これは期待通りのものではないかもしれませんが、前ほど壊れていません。

以前は「Foo!Bar」のような名前のサブタイプを宣言できました。これは認めるべきなのでしょうが、「ArrayRef[Foo!Bar]」のようなパラメータ付きの型で使うと正しく動作しませんでした。いまはシュガー関数を通じて生成される名前を吟味して、英数字と「:」「.」しか含められないようにしています。

=head1 バージョン0.65

アトリビュート経由で生成されたメソッドもロールのC<requires>を満足させられるようになりました。正直にいって、なぜスティーヴンが最初からそうしていなかったのかはわかりません。まったく、頭がどうかしていたのでしょう。

インライン展開したコードのスタックトレースが、Moose内部ではなく、そのクラスの行やファイルを報告するようになりました。

=head1 バージョン0.62_02

クラスがロールのすべての必須メソッドを用意できなかった場合、エラーメッセージには最初に見つからなかったメソッドだけでなく、見つからなかったすべてのメソッドを載せるようになりました。

Moose::Objectからコンストラクタを継承していないクラスについては、コンストラクタをインライン展開せず、その旨警告するようになりました。とにかくインライン展開を強制したい場合は、C<make_immutable>にC<< replace_constructor => 1 >>を渡してください。

警告を出したくない場合はC<< inline_constructor => 1 >>を渡します。

=head1 バージョン0.62

（廃止済みの）C<make_immutable>キーワードを削除しました。

クラスからアトリビュートを削除すると、そのアトリビュートのためにインストールされていた委譲(C<handles>)メソッドも削除されるようになりました。これは正しい振る舞いですが、間違った振る舞いに依存していた方は痛い目にあうかもしれません。

=head1 バージョン0.58

ロールがメソッドを追加するときはC<alias_method>ではなくC<add_method>を呼ぶようになりました。また、かならずメソッドオブジェクトを提供して内部でクローニングするようになりました。そのため、ロールが提供したメソッドのソースを追跡したり、間にはさまっているロールを含めて履歴を追うこともできるようになっています。また、クラスのメソッドリストやメソッドマップを見るとロールが追加したメソッドも表示されるようになった、ということでもあります。

型制約のパラメータや結合の引数はソートされるようになりました。そのため、Int|Strという制約はStr|Intと同じになります。また、渡される型制約の文字列は正規化されて空白の違いはすべて取り除かれるようになりました。これはもっぱら内部の問題なので、外のコードには影響を与えないはずです。

L<Moose::Exporter>は、エクスポート元のパッケージがエクスポートしなおしたサブルーチンは削除しないようになりました（MooseはCarp::confessなどをエクスポートしなおしています）。L<Moose::Exporter>はユーザが自分で使うために明示的にインポートした関数かどうかを判断できないので、間違ったときには安全が優先されるよう、エクスポートしなおしたサブルーチンは常に残しておくことにしたのです。

=head1 バージョン0.56

C<Moose::init_meta>はメソッドとして呼ぶようになりました。

拡張モジュールの作者向けにL<Moose::Exporter>とL<Moose::Util::MetaRole>という新しいモジュールが追加されました。

=head1 バージョン0.55_01

メタクラスのトレート（と、そのレシピ）が実装されました。

  use Moose -traits => 'Foo'

トレートを使うと、小さな拡張モジュールを書くのが少し楽になります。

=head1 バージョン0.55

C<coerce>を修正して、C<subtype>のように無名の型を受け付けるようにしました。そのため、このようなことができるようになっています。

  coerce $some_anon_type => from 'Str' => via { ... };

=head1 バージョン0.51

C<< Moose::Object->new() >>に新しいステップとしてC<BUILDARGS>を追加しました。

=head1 バージョン0.49

C<reader>やC<writer>、C<accessor>オプションを独自に定義したときのC<< is => (ro|rw) >>の動作を修正しました。詳しくは下の表をご覧ください。

  is => ro, writer => _foo    # turns into (reader => foo, writer => _foo)
  is => rw, writer => _foo    # turns into (reader => foo, writer => _foo)
  is => rw, accessor => _foo  # turns into (accessor => _foo)
  is => ro, accessor => _foo  # error, accesor is rw

=head1 バージョン0.45

C<before/around/after>メソッドモディファイアが正規表現によるメソッド名のマッチングをサポートするようになりました。注意：これはクラスにしか使えません（現時点ではロールはサポートしていませんが……パッチは歓迎です）。

ロールのC<has>キーワードも、クラスの場合と同じ形式の配列リファレンスを受け付けるようになりました。

コンストラクタからトリガを実行できると便利なので、読み取り専用のアトリビュートにトリガを用意してもエラーにはならないようになりました。

パラメータ付きの型のサブタイプはそれ自身がパラメータ指定可能な型になります。

=head1 バージョン0.44

C<DEMOLISHALL>がC<$@>の値を食ってしまうために正しく動作しない問題を修正しました。それでもまだある意味ではC<$@>の値を食っているのですが、これは素のperlの場合も同じです。

=head1 バージョン0.41

継承したアトリビュートは、型が(「isa」や「does」で)制限されていない限り拡張できないようになりました。

このリリースではMoose::Meta::TypeConstraint::*以下のクラスがすべて作り直されました。内部の実装に依存していた場合はコードをよくテストしておいてください。

=head1 バージョン0.40

合成済みのロールに由来するアトリビュートに対して「+name」を使う方法をドキュメント化しました。これは理にかなっていますし、よく使われているものですから、公式にサポートしましょう、ということです。

C<< Moose::Meta::Class->create >>メソッドがロールをサポートするようになりました。

C<< enum $name => @values >>のかわりにC<enum>に配列リファレンスを渡すことで無名のenum型を作ることができるようになりました。

=head1 バージョン0.37

メタオブジェクトのC<make_immutable>を呼ぶためのショートカットとして、C<make_immutable>キーワードを追加しました（これは最終的には削除されました！）。

MooseでC<< init_arg => undef >>できるようになりました。これは「このアトリビュートはコンストラクタのパラメータを受け付けない」という意味です。

型エラーが用意されたエラーメッセージを使うようになりました（このリリースまではそうではありませんでした）。

=head1 バージョン0.34

Mooseはポストモダンなオブジェクトシステムになりました :)

ロールシステムが完全に作り直されました。100%後方互換ですが、内部は完全に変わっていますので、内部の実装に依存していた場合はよくテストしておくことをおすすめします。

ロールのメソッドの排除と別名はこのリリースで追加されました。

L<Moose::Util::TypeConstraints::OptimizedConstraints>モジュールが追加されました。

アクセサに値のリストを渡すと（アクセサが期待している値の数は1つのみです）、以前は黙って無視されていましたが、エラーを発生するようになりました。

=head1 バージョン0.26

パラメータ付きの型が追加されました。また、型制約システムはかなり大幅に作り直されました。

「自前のMooseを作る」ためのフレームワークの拡張性やサポートが強化されました。

=head1 バージョン0.25以前

正直にいって、こんなに古いMooseは使うべきではありません。非常に多くのバグが直っていますし、スピードも速くなっているのですから、アップグレードしないなんて正気の沙汰ではありません。

それに、更新履歴をさかのぼるのにもうんざりしました。だから、ここでおしまいにします。続けたい方がいたらどうぞご自由に。

=head1 作者

Stevan Little E<lt>stevan@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

