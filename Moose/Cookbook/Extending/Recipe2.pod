=encoding utf8

=head1 題名

Moose::Cookbook::Extending::Recipe2 - オブジェクトのベースクラス用のロールを用意する

=head1 概要

  package MooseX::Debugging;

  use strict;
  use warnings;

  use Moose ();
  use Moose::Exporter;
  use Moose::Util::MetaRole;

  Moose::Exporter->setup_import_methods;

  sub init_meta {
      shift;
      my %options = @_;

      my $meta = Moose->init_meta(%options);

      Moose::Util::MetaRole::apply_base_class_roles(
          for_class => $options{for_class},
          roles     => ['MooseX::Debugging::Role::Object'],
      );

      return $meta;
  }

  package MooseX::Debugging::Role::Object;

  use Moose::Role;

  after 'BUILD' => sub {
      my $self = shift;

      warn "Made a new " . ref $self . " object\n";
  };

=head1 本文

この例では、オブジェクトのベースクラス用のロールを用意して、簡単なデバッグ用の出力を追加します。このロールは、オブジェクトを生成するたびにそのオブジェクトの種類を知らせる警告を吐きます。

もちろん本物のデバッグ用ロールではもっと興味深いことをするものですが、このレシピで大切なのはこのロールをどう組み込むかということだけです。

今回は、L<Moose::Exporter>とL<Moose::Util::MetaRole>を組み合わせて、モジュールがC<< S<use MooseX::Debugging> >>したときにはかならずベースオブジェクトのクラスにデバッグ用ロールが自動的に組み込まれるようにしています。

いくつかのコードについてはもっと細かく見ていきましょう。

  Moose::Exporter->setup_import_methods;

これはC<MooseX::Debugging>パッケージにC<import>メソッドを用意するものです。ここでは実際になにかをエクスポートするわけではないのでC<setup_import_methods>にはパラメータを渡していませんが、C<import>メソッドがないと私たちのC<init_meta>メソッドが確実に呼ばれることは保証できないのです。

それから、私たちのC<init_meta>メソッドにはこのような行があります。

      Moose->init_meta(%options);

これはほとんどどんな拡張モジュールでも使う決まり文句のようなものです。こうしておくと、呼び出し元のクラスにトレートを追加する「前」に通常のMooseのメタクラスを確実に用意できるようになります。

C<< Moose->init_meta >>メソッドを使えば確実に呼び出し元のクラスにまともなメタクラスを用意できますが、拡張モジュールの中ではそのロジックを繰り返したくはありません。C<< Moose->init_meta >>がすでに呼ばれていた（呼び出し元のクラスが私たちの拡張モジュールをuseする前にC<< S<use Moose> >>していた）場合、2度目のC<< Moose->init_meta >>は実質的には無効になります。

=head1 作者

Dave Rolsky E<lt>autarch@urth.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

