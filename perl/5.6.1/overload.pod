=head1 NAME

=begin original

overload - Package for overloading perl operations

=end original

overload - Perl の演算子の多重定義を行うパッケージ

=head1 SYNOPSIS

    package SomeThing;

    use overload
	'+' => \&myadd,
	'-' => \&mysub;
	# etc
    ...

    package main;
    $a = new SomeThing 57;
    $b=5+$a;
    ...
    if (overload::Overloaded $b) {...}
    ...
    $strval = overload::StrVal $b;

=head1 DESCRIPTION

=head2 Declaration of overloaded functions

(多重定義関数の宣言)

=begin original

The compilation directive

=end original

コンパイル指示子

    package Number;
    use overload
	"+" => \&add,
	"*=" => "muas";

=begin original

declares function Number::add() for addition, and method muas() in
the "class" C<Number> (or one of its base classes)
for the assignment form C<*=> of multiplication.

=end original

では、加法の関数 Number::add() と「クラス」C<Number> (あるいは、
基底クラスの 1 つ) の中の乗法の代入形式 C<*=> のメソッド muas()
を宣言しています。

=begin original

Arguments of this directive come in (key, value) pairs.  Legal values
are values legal inside a C<&{ ... }> call, so the name of a
subroutine, a reference to a subroutine, or an anonymous subroutine
will all work.  Note that values specified as strings are
interpreted as methods, not subroutines.  Legal keys are listed below.

=end original

この指示子の引数は (key, value) のペアです。
この value としては、C<&{ ... }> の中で使用できるものが
すべてを指定できますから、サブルーティン名、
サブルーティンへのリファレンス、無名のサブルーティンといったものが
すべて使えます。
文字列として指定された値はサブルーチンではなく、
メソッドとして解釈されることに注意してください。
key として有効な値は以下に述べます。

=begin original

The subroutine C<add> will be called to execute C<$a+$b> if $a
is a reference to an object blessed into the package C<Number>, or if $a is
not an object from a package with defined mathemagic addition, but $b is a
reference to a C<Number>.  It can also be called in other situations, like
C<$a+=7>, or C<$a++>.  See L<MAGIC AUTOGENERATION>.  (Mathemagical
methods refer to methods triggered by an overloaded mathematical
operator.)

=end original

C<$a+$b> を実行するときに、$a がパッケージ C<Number> 内に
bless されたオブジェクトへのリファレンスである場合か、
$a がそのようなマスマジカルな加法を用意しているパッケージの
オブジェクトでなくても、$b が Number へのリファレンスである場合に、
サブルーティン C<add> が呼び出されます。
これは、C<$a+=7> とか C<$a++> といった、シチュエーションでも呼ばれます。
L<MAGIC AUTOGENERATION> の節を参照してください。
(「マスマジカル」という言葉は、多重定義された
マスマティカル演算子によって起動されるメソッドを指しています。)

Since overloading respects inheritance via the @ISA hierarchy, the
above declaration would also trigger overloading of C<+> and C<*=> in
all the packages which inherit from C<Number>.

=head2 Calling Conventions for Binary Operations

(二項演算子の呼び出し方)

=begin original

The functions specified in the C<use overload ...> directive are called
with three (in one particular case with four, see L<Last Resort>)
arguments.  If the corresponding operation is binary, then the first
two arguments are the two arguments of the operation.  However, due to
general object calling conventions, the first argument should always be
an object in the package, so in the situation of C<7+$a>, the
order of the arguments is interchanged.  It probably does not matter
when implementing the addition method, but whether the arguments
are reversed is vital to the subtraction method.  The method can
query this information by examining the third argument, which can take
three different values:

=end original

C<use overload ...> 指示子の value の関数は、
3 つ (唯一特別な場合があって、
その時は 4 つ (L<Last Resort>の節を参照) ) の引数で呼び出されます。
対応する演算子が、二項演算子であれば、最初の 2 つの引数は、
その演算子の 2 つの引数です。
しかしながら、通常のオブジェクトメソッドの呼び出し法の規則によって、
最初の引数は、常にそのパッケージのオブジェクトでなければなりませんので、
C<7+$a> のような場合には、引数の順序の入れ替えが行なわれます。
これは、加法のメソッドを実装する時には、
おそらく問題にはならないものですが、減法のメソッドにとっては、
引数を入替えるか否かは、非常に重大な問題です。
メソッド側では、この引数の入れ替えについての情報を 3 つめの引数を
調べることで、確かめることができます。
この引数は、3 種類の値をとります:

=over 7

=item FALSE

(偽)

=begin original

the order of arguments is as in the current operation.

=end original

引数の順序は、現在の演算子でのものと同じである。

=item TRUE

=begin original

the arguments are reversed.

=end original

引数は、逆になっている。

=item C<undef>

=begin original

the current operation is an assignment variant (as in
C<$a+=7>), but the usual function is called instead.  This additional
information can be used to generate some optimizations.  Compare
L<Calling Conventions for Mutators>.

=end original

現在の演算子は、(C<$a+=7> のような) 代入形式のものであるが、
普通の関数が、代わりに呼ばれる。
この付加的な情報は、何らかの最適化を行なうときに、
使用することができる。
L<Calling Conventions for Mutators> と比較してください。

=back

=head2 Calling Conventions for Unary Operations

(単項演算子の呼び出し方)

=begin original

Unary operation are considered binary operations with the second
argument being C<undef>.  Thus the functions that overloads C<{"++"}>
is called with arguments C<($a,undef,'')> when $a++ is executed.

=end original

単項演算子は、2 番目の引数が C<undef> の二項演算子であると
考えられます。
つまり、C<{"++"}> を多重定義する関数は、
$a++ が実行されるときに、C<($a, undef, '')> という引数で呼び出されます。

=head2 Calling Conventions for Mutators

Two types of mutators have different calling conventions:

=over

=item C<++> and C<-->

The routines which implement these operators are expected to actually
I<mutate> their arguments.  So, assuming that $obj is a reference to a
number,

  sub incr { my $n = $ {$_[0]}; ++$n; $_[0] = bless \$n}

is an appropriate implementation of overloaded C<++>.  Note that

  sub incr { ++$ {$_[0]} ; shift }

is OK if used with preincrement and with postincrement. (In the case
of postincrement a copying will be performed, see L<Copy Constructor>.)

=item C<x=> and other assignment versions

There is nothing special about these methods.  They may change the
value of their arguments, and may leave it as is.  The result is going
to be assigned to the value in the left-hand-side if different from
this value.

This allows for the same method to be used as overloaded C<+=> and
C<+>.  Note that this is I<allowed>, but not recommended, since by the
semantic of L<"Fallback"> Perl will call the method for C<+> anyway,
if C<+=> is not overloaded.

=back

B<Warning.>  Due to the presense of assignment versions of operations,
routines which may be called in assignment context may create
self-referential structures.  Currently Perl will not free self-referential
structures until cycles are C<explicitly> broken.  You may get problems
when traversing your structures too.

Say,

  use overload '+' => sub { bless [ \$_[0], \$_[1] ] };

is asking for trouble, since for code C<$obj += $foo> the subroutine
is called as C<$obj = add($obj, $foo, undef)>, or C<$obj = [\$obj,
\$foo]>.  If using such a subroutine is an important optimization, one
can overload C<+=> explicitly by a non-"optimized" version, or switch
to non-optimized version if C<not defined $_[2]> (see
L<Calling Conventions for Binary Operations>).

Even if no I<explicit> assignment-variants of operators are present in
the script, they may be generated by the optimizer.  Say, C<",$obj,"> or
C<',' . $obj . ','> may be both optimized to

  my $tmp = ',' . $obj;    $tmp .= ',';

=head2 Overloadable Operations

=begin original

The following symbols can be specified in C<use overload> directive:

=end original

以下のシンボルが C<use overload> 指示子で指定できます:

=over 5

=item * I<Arithmetic operations>

(I<算術演算子>)

    "+", "+=", "-", "-=", "*", "*=", "/", "/=", "%", "%=",
    "**", "**=", "<<", "<<=", ">>", ">>=", "x", "x=", ".", ".=",

=begin original

For these operations a substituted non-assignment variant can be called if
the assignment variant is not available.  Methods for operations "C<+>",
"C<->", "C<+=>", and "C<-=>" can be called to automatically generate
increment and decrement methods.  The operation "C<->" can be used to
autogenerate missing methods for unary minus or C<abs>.

=end original

これらの演算子について、代入形式のものが存在しないとき
には、代わりに非代入形式のものが呼ばれます。
演算子
C<"+">, C<"-">, C<"+=">, C<"-="> に対するメソッドは、インクリメント
演算子やデクリメント演算子を自動生成するために呼ばれる
ことがあります。
演算子 C<"-"> は、単項のマイナスや C<abs> の
メソッドがないときに自動生成するために使われます。

See L<"MAGIC AUTOGENERATION">, L<"Calling Conventions for Mutators"> and
L<"Calling Conventions for Binary Operations">) for details of these
substitutions.

=item * I<Comparison operations>

(I<比較演算子>)

    "<",  "<=", ">",  ">=", "==", "!=", "<=>",
    "lt", "le", "gt", "ge", "eq", "ne", "cmp",

=begin original

If the corresponding "spaceship" variant is available, it can be
used to substitute for the missing operation.  During C<sort>ing
arrays, C<cmp> is used to compare values subject to C<use overload>.

=end original

ある演算子が無い場合にも、対応する「スペースシップ」形式が使えるならば、
代わりに使うことができます。
配列のソートのときには、C<use overload> のもとの C<cmp> を使って値を
比較します。

=item * I<Bit operations>

(I<ビット演算子>)

    "&", "^", "|", "neg", "!", "~",

=begin original

"C<neg>" stands for unary minus.  If the method for C<neg> is not
specified, it can be autogenerated using the method for
subtraction. If the method for "C<!>" is not specified, it can be
autogenerated using the methods for "C<bool>", or "C<\"\">", or "C<0+>".

=end original

"C<neg>" は、単項のマイナスを表わします。
C<neg> のメソッドが指定されていないときには、
引き算のメソッドを使って、自動生成されます。
"C<!>" のメソッドが指定されていないときには、
"C<bool>", "C<\"\">", "C<0+>" のいずれかのメソッドを使って
自動生成されます。

=item * I<Increment and decrement>

(I<インクリメントとデクリメント>)

    "++", "--",

=begin original

If undefined, addition and subtraction methods can be
used instead.  These operations are called both in prefix and
postfix form.

=end original

未定義であれば、足し算と引き算のメソッドが代わりに使われます。
これらの演算子は、プリフィクスとしても、ポストフィクスとしても使われます。

=item * I<Transcendental functions>

(I<超越関数>)

    "atan2", "cos", "sin", "exp", "abs", "log", "sqrt",

=begin original

If C<abs> is unavailable, it can be autogenerated using methods
for "E<lt>" or "E<lt>=E<gt>" combined with either unary minus or subtraction.

=end original

C<abs> がないときには、"E<lt>" か "E<lt>=<E<gt>" のメソッドを、
単項のマイナスか引き算のメソッドと組み合わせて、
自動生成されます。

=item * I<Boolean, string and numeric conversion>

(I<ブール変換、文字列変換、数値変換>)

    "bool", "\"\"", "0+",

=begin original

If one or two of these operations are not overloaded, the remaining ones can
be used instead.  C<bool> is used in the flow control operators
(like C<while>) and for the ternary "C<?:>" operation.  These functions can
return any arbitrary Perl value.  If the corresponding operation for this value
is overloaded too, that operation will be called again with this value.

=end original

これらの中で多重定義していないものがあっても、残りが一つで
も定義してあれば、それを代わりに使うことができます。
C<bool> は、(C<while> のような) フロー制御演算子や、
三項演算子 "C<?:>" で使われます。
これらの関数は、任意の Perl値を返すことができます。
この値に対応する演算子も多重定義されている場合には、
その演算子がその時の値を使って、再度呼び出されることになります。

As a special case if the overload returns the object itself then it will
be used directly. An overloaded conversion returning the object is
probably a bug, because you're likely to get something that looks like
C<YourPackage=HASH(0x8172b34)>.

=item * I<Iteration>

    "<>"

If not overloaded, the argument will be converted to a filehandle or
glob (which may require a stringification).  The same overloading
happens both for the I<read-filehandle> syntax C<E<lt>$varE<gt>> and
I<globbing> syntax C<E<lt>${var}E<gt>>.

=item * I<Dereferencing>

    '${}', '@{}', '%{}', '&{}', '*{}'.

If not overloaded, the argument will be dereferenced I<as is>, thus
should be of correct type.  These functions should return a reference
of correct type, or another object with overloaded dereferencing.

As a special case if the overload returns the object itself then it
will be used directly (provided it is the correct type).

The dereference operators must be specified explicitly they will not be passed to
"nomethod".

=item * I<Special>

(I<特殊 key>)

    "nomethod", "fallback", "=",

=begin original

see L<SPECIAL SYMBOLS FOR C<use overload>>.

=end original

L<SPECIAL SYMBOLS FOR C<use overload>> を参照してください。

=back

See L<"Fallback"> for an explanation of when a missing method can be
autogenerated.

A computer-readable form of the above table is available in the hash
%overload::ops, with values being space-separated lists of names:

 with_assign	  => '+ - * / % ** << >> x .',
 assign		  => '+= -= *= /= %= **= <<= >>= x= .=',
 num_comparison	  => '< <= > >= == !=',
 '3way_comparison'=> '<=> cmp',
 str_comparison	  => 'lt le gt ge eq ne',
 binary		  => '& | ^',
 unary		  => 'neg ! ~',
 mutators	  => '++ --',
 func		  => 'atan2 cos sin exp abs log sqrt',
 conversion	  => 'bool "" 0+',
 iterators	  => '<>',
 dereferencing	  => '${} @{} %{} &{} *{}',
 special	  => 'nomethod fallback ='

=head2 Inheritance and overloading

Inheritance interacts with overloading in two ways.

=over

=item Strings as values of C<use overload> directive

If C<value> in

  use overload key => value;

is a string, it is interpreted as a method name.

=item Overloading of an operation is inherited by derived classes

Any class derived from an overloaded class is also overloaded.  The
set of overloaded methods is the union of overloaded methods of all
the ancestors. If some method is overloaded in several ancestor, then
which description will be used is decided by the usual inheritance
rules:

If C<A> inherits from C<B> and C<C> (in this order), C<B> overloads
C<+> with C<\&D::plus_sub>, and C<C> overloads C<+> by C<"plus_meth">,
then the subroutine C<D::plus_sub> will be called to implement
operation C<+> for an object in package C<A>.

=back

Note that since the value of the C<fallback> key is not a subroutine,
its inheritance is not governed by the above rules.  In the current
implementation, the value of C<fallback> in the first overloaded
ancestor is used, but this is accidental and subject to change.

=head1 SPECIAL SYMBOLS FOR C<use overload>

(C<use overload> の特殊シンボル)

=begin original

Three keys are recognized by Perl that are not covered by the above
description.

=end original

ここまでに説明してきたものの他に、3 つの key が Perl に認識されます。

=head2 Last Resort

(最後の手段)

=begin original

C<"nomethod"> should be followed by a reference to a function of four
parameters.  If defined, it is called when the overloading mechanism
cannot find a method for some operation.  The first three arguments of
this function coincide with the arguments for the corresponding method if
it were found, the fourth argument is the symbol
corresponding to the missing method.  If several methods are tried,
the last one is used.  Say, C<1-$a> can be equivalent to

=end original

C<"nomethod"> は、4 つのパラメータを持つ関数へのリファレンスが引き続きます。
これが定義されていれば、多重定義の仕組みで、
何らかの演算子に対するメソッドを見つけることができなかったときに、
呼び出されます。
この関数の最初の 3 つの引数は、本来、
呼ばれるはずだったメソッドに対する引数と一致し、4 番目の引数は、
見つからなかったメソッドに対応するシンボルとなります。
いくつかのメソッドが試されている場合には、最後のものが使われます。
たとえば、C<1-$a> であれば、以下と同様です:

	&nomethodMethod($a,1,1,"-")

if the pair C<"nomethod" =E<gt> "nomethodMethod"> was specified in the
C<use overload> directive.

The C<"nomethod"> mechanism is I<not> used for the dereference operators
( ${} @{} %{} &{} *{} ).

=begin original

If some operation cannot be resolved, and there is no function
assigned to C<"nomethod">, then an exception will be raised via die()--
unless C<"fallback"> was specified as a key in C<use overload> directive.

=end original

何らかの演算子が見つからず、C<"nomethod"> に結び付けられた関数もない
場合には、(C<"fallback"> が C<use overload> 指示子のキーとして
指定されていない限り、) die() による例外が発生します。

=head2 Fallback

(フォールバック)

=begin original

The key C<"fallback"> governs what to do if a method for a particular
operation is not found.  Three different cases are possible depending on
the value of C<"fallback">:

=end original

C<"fallback"> は、特定の演算子に対するメソッドが見つからない場合の
動作を規定します。
C<"fallback"> の value によって、3 つの場合があります:

=over 16

=item * C<undef>

=begin original

Perl tries to use a
substituted method (see L<MAGIC AUTOGENERATION>).  If this fails, it
then tries to calls C<"nomethod"> value; if missing, an exception
will be raised.

=end original

Perl は、代替のメソッドを使うことを試みます
(L<MAGIC AUTOGENERATION> の節を参照してください)。
それもダメならば、C<"nomethod"> を呼び出そうとします。
これも無い場合には、例外が発生することになります。

=item * TRUE

(真)

=begin original

The same as for the C<undef> value, but no exception is raised.  Instead,
it silently reverts to what it would have done were there no C<use overload>
present.

=end original

C<undef> の場合と同じですが、例外を発生させません。
この場合、黙って、もし C<use overload> がなかったときに、
行なってであろう動作に戻されることになります。

=item * defined, but FALSE

(定義済みだが「偽」)

=begin original

No autogeneration is tried.  Perl tries to call
C<"nomethod"> value, and if this is missing, raises an exception.

=end original

マジック自動生成は行ないません。
Perl は、まず C<"nomethod"> の実行を試みて、
これがなければ、例外を発生させます。

=back

B<Note.> C<"fallback"> inheritance via @ISA is not carved in stone
yet, see L<"Inheritance and overloading">.

=head2 Copy Constructor

(コピーコンストラクタ)

=begin original

The value for C<"="> is a reference to a function with three
arguments, i.e., it looks like the other values in C<use
overload>. However, it does not overload the Perl assignment
operator. This would go against Camel hair.

=end original

C<"="> の値は、3 引数の関数へのリファレンスです。
つまり、C<use overload> の他の値と似ているように見えます。
しかし、これは Perl の代入演算子を多重定義しません。
これは「ラクダの毛(Camel hair)」に対抗しています。

=begin original

This operation is called in the situations when a mutator is applied
to a reference that shares its object with some other reference, such
as

=end original

この演算は、以下のような、他のリファレンスとオブジェクトを共有する
リファレンスに対して、ミューテーターを使うときに呼び出されます。

	$a=$b;
	++$a;

=begin original

To make this change $a and not change $b, a copy of C<$$a> is made,
and $a is assigned a reference to this new object.  This operation is
done during execution of the C<++$a>, and not during the assignment,
(so before the increment C<$$a> coincides with C<$$b>).  This is only
done if C<++> is expressed via a method for C<'++'> or C<'+='> (or
C<nomethod>).  Note that if this operation is expressed via C<'+'>
a nonmutator, i.e., as in

=end original

これを、$a を変更し、$b を変更しないようにするために、C<$$a> のコピーを作り、
この新しいオブジェクトへのリファレンスが $a に代入されます。
この操作は、C<++$a> の実行中に (すなわち、その前に
C<$$a> が C<$$b> に一致します)、行われます。
これはC<++> が C<'++'> か C<'+='> (か C<nomethod>) のメソッドを通じて
表現されているときにだけ行なわれます。　
この演算子が、非ミューテーター C<"+"> を使って記述されている場合、

	$a=$b;
	$a=$a+1;

then C<$a> does not reference a new copy of C<$$a>, since $$a does not
appear as lvalue when the above code is executed.

=begin original

If the copy constructor is required during the execution of some mutator,
but a method for C<'='> was not specified, it can be autogenerated as a
string copy if the object is a plain scalar.

=end original

コピーコンストラクタが、いくつかのミューテーターの実行中に必要となって、
C<'='> が指定されていないときには、そのオブジェクトが
単なるスカラであれば、文字列コピーとして自動生成されます。

=over 5

=item B<Example>

The actually executed code for

	$a=$b;
        Something else which does not modify $a or $b....
	++$a;

may be

	$a=$b;
        Something else which does not modify $a or $b....
	$a = $a->clone(undef,"");
        $a->incr(undef,"");

if $b was mathemagical, and C<'++'> was overloaded with C<\&incr>,
C<'='> was overloaded with C<\&clone>.

=back

Same behaviour is triggered by C<$b = $a++>, which is consider a synonym for
C<$b = $a; ++$a>.

=head1 MAGIC AUTOGENERATION

(マジック自動生成)

=begin original

If a method for an operation is not found, and the value for  C<"fallback"> is
TRUE or undefined, Perl tries to autogenerate a substitute method for
the missing operation based on the defined operations.  Autogenerated method
substitutions are possible for the following operations:

=end original

演算子に対するメソッドが見つからず、C<"fallback"> が
「真」か「未定義」であれば、Perl は、定義されている演算子を
もとに、見つからなかった演算子の代わりのメソッドを自動生成しようと試みます。
以下の演算子に対して、自動生成代替メソッドが行なえます:

=over 16

=item I<Assignment forms of arithmetic operations>

(算術演算子の代入形式)

=begin original

C<$a+=$b> can use the method for C<"+"> if the method for C<"+=">
is not defined.

=end original

C<"+="> メソッドが定義されていないとき、
C<$a+=$b> は、C<"+"> メソッドを使うことができます。

=item I<Conversion operations>

(変換演算子)

=begin original

String, numeric, and boolean conversion are calculated in terms of one
another if not all of them are defined.

=end original

文字列、数値、ブール値変換は、すべてが定義されてはいないとき、
互いに別のもので計算されます。

=item I<Increment and decrement>

(インクリメントとデクリメント)

=begin original

The C<++$a> operation can be expressed in terms of C<$a+=1> or C<$a+1>,
and C<$a--> in terms of C<$a-=1> and C<$a-1>.

=end original

演算 C<++$a> は、C<$a+=1> か C<$a+1> で、演算 C<$a--> は、
C<$a-=1> か C<$a-1> で表現することができます。

=item C<abs($a)>

=begin original

can be expressed in terms of C<$aE<lt>0> and C<-$a> (or C<0-$a>).

=end original

abs($a) は、C<$aE<lt>0> と C<-$a> (または C<0-$a>) で表現できます。

=item I<Unary minus>

(単項のマイナス)

=begin original

can be expressed in terms of subtraction.

=end original

単項のマイナスは、引き算を使って表現できます。

=item I<Negation>

C<!> and C<not> can be expressed in terms of boolean conversion, or
string or numerical conversion.

=item I<Concatenation>

(連結)

=begin original

can be expressed in terms of string conversion.

=end original

連結は、文字列変換を使って表現できます。

=item I<Comparison operations>

(比較演算子)

=begin original

can be expressed in terms of its "spaceship" counterpart: either
C<E<lt>=E<gt>> or C<cmp>:

=end original

比較演算は、それぞれに対応するスペースシップ演算
(C<E<lt>=<E<gt>> か C<cmp>) を用いて表現することができます:

    <, >, <=, >=, ==, != 	in terms of <=>
    lt, gt, le, ge, eq, ne 	in terms of cmp

=item I<Iterator>

    <>				in terms of builtin operations

=item I<Dereferencing>

    ${} @{} %{} &{} *{}		in terms of builtin operations

=item I<Copy operator>

(コピー演算)

=begin original

can be expressed in terms of an assignment to the dereferenced value, if this
value is a scalar and not a reference.

=end original

コピー演算は被参照した値が、リファレンスではないスカラであれば、
その値への代入という形で表現できます。

=back

=head1 Losing overloading

=begin original

The restriction for the comparison operation is that even if, for example,
`C<cmp>' should return a blessed reference, the autogenerated `C<lt>'
function will produce only a standard logical value based on the
numerical value of the result of `C<cmp>'.  In particular, a working
numeric conversion is needed in this case (possibly expressed in terms of
other conversions).

=end original

比較演算子に対する制限は、たとえば、`C<cmp>' が bless された
リファレンスを返さなければならないとしても、自動生成された関数
`C<lt>' は、`C<cmp>' の結果の数値に基づく標準の論理値だけを
作り出します。
特に、この場合には、(ときには別の変換で表わされた)
数値変換が使えないといけません。

=begin original

Similarly, C<.=>  and C<x=> operators lose their mathemagical properties
if the string conversion substitution is applied.

=end original

同様に、C<.=> 演算子や C<x=> 演算子も、文字列変換による代替が起これば、
マスマジカルな性質がなくなります。

=begin original

When you chop() a mathemagical object it is promoted to a string and its
mathemagical properties are lost.  The same can happen with other
operations as well.

=end original

マスマジカルなオブジェクトを chop() すると、文字列になり、
マスマジカルな性質はなくなります。　同じことは、他の演算でも
起こります。

=head1 Run-time Overloading

Since all C<use> directives are executed at compile-time, the only way to
change overloading during run-time is to

    eval 'use overload "+" => \&addmethod';

You can also use

    eval 'no overload "+", "--", "<="';

though the use of these constructs during run-time is questionable.

=head1 Public functions

Package C<overload.pm> provides the following public functions:

=over 5

=item overload::StrVal(arg)

Gives string value of C<arg> as in absence of stringify overloading.

=item overload::Overloaded(arg)

Returns true if C<arg> is subject to overloading of some operations.

=item overload::Method(obj,op)

Returns C<undef> or a reference to the method that implements C<op>.

=back

=head1 Overloading constants

For some application Perl parser mangles constants too much.  It is possible
to hook into this process via overload::constant() and overload::remove_constant()
functions.

These functions take a hash as an argument.  The recognized keys of this hash
are

=over 8

=item integer

to overload integer constants,

=item float

to overload floating point constants,

=item binary

to overload octal and hexadecimal constants,

=item q

to overload C<q>-quoted strings, constant pieces of C<qq>- and C<qx>-quoted
strings and here-documents,

=item qr

to overload constant pieces of regular expressions.

=back

The corresponding values are references to functions which take three arguments:
the first one is the I<initial> string form of the constant, the second one
is how Perl interprets this constant, the third one is how the constant is used.
Note that the initial string form does not
contain string delimiters, and has backslashes in backslash-delimiter
combinations stripped (thus the value of delimiter is not relevant for
processing of this string).  The return value of this function is how this
constant is going to be interpreted by Perl.  The third argument is undefined
unless for overloaded C<q>- and C<qr>- constants, it is C<q> in single-quote
context (comes from strings, regular expressions, and single-quote HERE
documents), it is C<tr> for arguments of C<tr>/C<y> operators,
it is C<s> for right-hand side of C<s>-operator, and it is C<qq> otherwise.

Since an expression C<"ab$cd,,"> is just a shortcut for C<'ab' . $cd . ',,'>,
it is expected that overloaded constant strings are equipped with reasonable
overloaded catenation operator, otherwise absurd results will result.
Similarly, negative numbers are considered as negations of positive constants.

Note that it is probably meaningless to call the functions overload::constant()
and overload::remove_constant() from anywhere but import() and unimport() methods.
From these methods they may be called as

	sub import {
	  shift;
	  return unless @_;
	  die "unknown import: @_" unless @_ == 1 and $_[0] eq ':constant';
	  overload::constant integer => sub {Math::BigInt->new(shift)};
	}

B<BUGS> Currently overloaded-ness of constants does not propagate
into C<eval '...'>.

=head1 IMPLEMENTATION

What follows is subject to change RSN.

=begin original

The table of methods for all operations is cached in magic for the
symbol table hash for the package.  The cache is invalidated during
processing of C<use overload>, C<no overload>, new function
definitions, and changes in @ISA. However, this invalidation remains
unprocessed until the next C<bless>ing into the package. Hence if you
want to change overloading structure dynamically, you'll need an
additional (fake) C<bless>ing to update the table.

=end original

すべての演算のためのメソッドのテーブルは、該当パッケージの
シンボルテーブルに対するマジックとしてキャッシュされます。
このキャッシュは C<use overload>, C<no overload>, 新しい関数定義、
@ISA の変更のいずれかの処理の間に無効化されます。
しかし、この無効化はパッケージに対する次の C<bless> までは
実行されずに残されます。
つまり、多重定義構造を動的に変更したいならば、テーブルを
更新するために、(意味の無い) C<bless> を行なう必要があります。

=begin original

(Every SVish thing has a magic queue, and magic is an entry in that
queue.  This is how a single variable may participate in multiple
forms of magic simultaneously.  For instance, environment variables
regularly have two forms at once: their %ENV magic and their taint
magic. However, the magic which implements overloading is applied to
the stashes, which are rarely used directly, thus should not slow down
Perl.)

=end original

(すべての SV 風のものは、マジックキューを持っており、マジックが
キューのエントリになっています。
これによって、1 つの変数が、同時に複数のマジックの形式に
関ることができるのです。
たとえば、環境変数は普段、%ENV マジックと「汚染」マジックの
2 つの形式を一度に持っています。
しかし、多重定義を実装しているマジックは隠してあるものに
適用され、これはめったに直接使うことはないため、
Perl の速度を低下させないはずです。)

=begin original

If an object belongs to a package using overload, it carries a special
flag.  Thus the only speed penalty during arithmetic operations without
overloading is the checking of this flag.

=end original

オブジェクトが多重定義を使うパッケージに属するならば、
そのオブジェクトには、特別なフラグが用意されます。
つまり、多重定義されていない算術演算を行なうときの、
スピードに対する影響は、このフラグのチェックのみです。

=begin original

In fact, if C<use overload> is not present, there is almost no overhead
for overloadable operations, so most programs should not suffer
measurable performance penalties.  A considerable effort was made to
minimize the overhead when overload is used in some package, but the
arguments in question do not belong to packages using overload.  When
in doubt, test your speed with C<use overload> and without it.  So far
there have been no reports of substantial speed degradation if Perl is
compiled with optimization turned on.

=end original

実際、C<use overload> が存在しなければ、多重定義可能な演算に
対するオーバヘッドはほとんど無く、ほとんどのプログラムで、
認識できるようなパフォーマスの低下はないはずです。
あるパッケージで多重定義が使われても、
対象の引数が多重定義を使ったパッケージに属していない場合には、
オーバヘッドの最小限にする最大限の努力が為されました。
疑わしいときには、C<use overload> がある場合と無い場合で、
スピードのテストをしてください。　これまでのところ、Perl が
最適化を指定してコンパイル場合には、顕著なスピードの低下の報告は
あがっていません。

=begin original

There is no size penalty for data if overload is not used. The only
size penalty if overload is used in some package is that I<all> the
packages acquire a magic during the next C<bless>ing into the
package. This magic is three-words-long for packages without
overloading, and carries the cache table if the package is overloaded.

=end original

多重定義が使われないときには、データの大きさには影響しません。
あるパッケージで多重定義を使うときの唯一のサイズペナルティは、
I<全ての>パッケージが次のパッケージへの C<bless> 時に
マジックを求めることです。
このマジックは多重定義を使わないパッケージの場合は 3 ワード長で、
多重定義を使うパッケージの場合はキャッシュテーブルを運びます。

=begin original

Copying (C<$a=$b>) is shallow; however, a one-level-deep copying is
carried out before any operation that can imply an assignment to the
object $a (or $b) refers to, like C<$a++>.  You can override this
behavior by defining your own copy constructor (see L<"Copy Constructor">).

=end original

C<$a=$b> のようなコピーは、表層的なものです。
しかし、C<$a++> のように、$b (または、$a) が参照するオブジェクトへの
代入を意味する演算の前に、1 層深度のコピーが行なわれます。
この動作は、
自分でコピーコンストラクタを定義することによって変更することが
できます (L<"Copy Constructor">の項を参照してください)。

=begin original

It is expected that arguments to methods that are not explicitly supposed
to be changed are constant (but this is not enforced).

=end original

明示的にサポートされていないメソッドに対する引数は、
定数であることが期待されます (が、強制はされません)。

=head1 Metaphor clash

One may wonder why the semantic of overloaded C<=> is so counter intuitive.
If it I<looks> counter intuitive to you, you are subject to a metaphor
clash.

Here is a Perl object metaphor:

I<  object is a reference to blessed data>

and an arithmetic metaphor:

I<  object is a thing by itself>.

The I<main> problem of overloading C<=> is the fact that these metaphors
imply different actions on the assignment C<$a = $b> if $a and $b are
objects.  Perl-think implies that $a becomes a reference to whatever
$b was referencing.  Arithmetic-think implies that the value of "object"
$a is changed to become the value of the object $b, preserving the fact
that $a and $b are separate entities.

The difference is not relevant in the absence of mutators.  After
a Perl-way assignment an operation which mutates the data referenced by $a
would change the data referenced by $b too.  Effectively, after
C<$a = $b> values of $a and $b become I<indistinguishable>.

On the other hand, anyone who has used algebraic notation knows the
expressive power of the arithmetic metaphor.  Overloading works hard
to enable this metaphor while preserving the Perlian way as far as
possible.  Since it is not not possible to freely mix two contradicting
metaphors, overloading allows the arithmetic way to write things I<as
far as all the mutators are called via overloaded access only>.  The
way it is done is described in L<Copy Constructor>.

If some mutator methods are directly applied to the overloaded values,
one may need to I<explicitly unlink> other values which references the
same value:

    $a = new Data 23;
    ...
    $b = $a;		# $b is "linked" to $a
    ...
    $a = $a->clone;	# Unlink $b from $a
    $a->increment_by(4);

Note that overloaded access makes this transparent:

    $a = new Data 23;
    $b = $a;		# $b is "linked" to $a
    $a += 4;		# would unlink $b automagically

However, it would not make

    $a = new Data 23;
    $a = 4;		# Now $a is a plain 4, not 'Data'

preserve "objectness" of $a.  But Perl I<has> a way to make assignments
to an object do whatever you want.  It is just not the overload, but
tie()ing interface (see L<perlfunc/tie>).  Adding a FETCH() method
which returns the object itself, and STORE() method which changes the
value of the object, one can reproduce the arithmetic metaphor in its
completeness, at least for variables which were tie()d from the start.

(Note that a workaround for a bug may be needed, see L<"BUGS">.)

=head1 Cookbook

Please add examples to what follows!

=head2 Two-face scalars

Put this in F<two_face.pm> in your Perl library directory:

  package two_face;		# Scalars with separate string and
                                # numeric values.
  sub new { my $p = shift; bless [@_], $p }
  use overload '""' => \&str, '0+' => \&num, fallback => 1;
  sub num {shift->[1]}
  sub str {shift->[0]}

Use it as follows:

  require two_face;
  my $seven = new two_face ("vii", 7);
  printf "seven=$seven, seven=%d, eight=%d\n", $seven, $seven+1;
  print "seven contains `i'\n" if $seven =~ /i/;

(The second line creates a scalar which has both a string value, and a
numeric value.)  This prints:

  seven=vii, seven=7, eight=8
  seven contains `i'

=head2 Two-face references

Suppose you want to create an object which is accessible as both an
array reference and a hash reference, similar to the
L<pseudo-hash|perlref/"Pseudo-hashes: Using an array as a hash">
builtin Perl type.  Let's make it better than a pseudo-hash by
allowing index 0 to be treated as a normal element.

  package two_refs;
  use overload '%{}' => \&gethash, '@{}' => sub { $ {shift()} };
  sub new {
    my $p = shift;
    bless \ [@_], $p;
  }
  sub gethash {
    my %h;
    my $self = shift;
    tie %h, ref $self, $self;
    \%h;
  }

  sub TIEHASH { my $p = shift; bless \ shift, $p }
  my %fields;
  my $i = 0;
  $fields{$_} = $i++ foreach qw{zero one two three};
  sub STORE {
    my $self = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $$self->[$key] = shift;
  }
  sub FETCH {
    my $self = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $$self->[$key];
  }

Now one can access an object using both the array and hash syntax:

  my $bar = new two_refs 3,4,5,6;
  $bar->[2] = 11;
  $bar->{two} == 11 or die 'bad hash fetch';

Note several important features of this example.  First of all, the
I<actual> type of $bar is a scalar reference, and we do not overload
the scalar dereference.  Thus we can get the I<actual> non-overloaded
contents of $bar by just using C<$$bar> (what we do in functions which
overload dereference).  Similarly, the object returned by the
TIEHASH() method is a scalar reference.

Second, we create a new tied hash each time the hash syntax is used.
This allows us not to worry about a possibility of a reference loop,
would would lead to a memory leak.

Both these problems can be cured.  Say, if we want to overload hash
dereference on a reference to an object which is I<implemented> as a
hash itself, the only problem one has to circumvent is how to access
this I<actual> hash (as opposed to the I<virtual> hash exhibited by the
overloaded dereference operator).  Here is one possible fetching routine:

  sub access_hash {
    my ($self, $key) = (shift, shift);
    my $class = ref $self;
    bless $self, 'overload::dummy'; # Disable overloading of %{}
    my $out = $self->{$key};
    bless $self, $class;	# Restore overloading
    $out;
  }

To remove creation of the tied hash on each access, one may an extra
level of indirection which allows a non-circular structure of references:

  package two_refs1;
  use overload '%{}' => sub { ${shift()}->[1] },
               '@{}' => sub { ${shift()}->[0] };
  sub new {
    my $p = shift;
    my $a = [@_];
    my %h;
    tie %h, $p, $a;
    bless \ [$a, \%h], $p;
  }
  sub gethash {
    my %h;
    my $self = shift;
    tie %h, ref $self, $self;
    \%h;
  }

  sub TIEHASH { my $p = shift; bless \ shift, $p }
  my %fields;
  my $i = 0;
  $fields{$_} = $i++ foreach qw{zero one two three};
  sub STORE {
    my $a = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $a->[$key] = shift;
  }
  sub FETCH {
    my $a = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $a->[$key];
  }

Now if $baz is overloaded like this, then C<$baz> is a reference to a
reference to the intermediate array, which keeps a reference to an
actual array, and the access hash.  The tie()ing object for the access
hash is a reference to a reference to the actual array, so

=over

=item *

There are no loops of references.

=item *

Both "objects" which are blessed into the class C<two_refs1> are
references to a reference to an array, thus references to a I<scalar>.
Thus the accessor expression C<$$foo-E<gt>[$ind]> involves no
overloaded operations.

=back

=head2 Symbolic calculator

Put this in F<symbolic.pm> in your Perl library directory:

  package symbolic;		# Primitive symbolic calculator
  use overload nomethod => \&wrap;

  sub new { shift; bless ['n', @_] }
  sub wrap {
    my ($obj, $other, $inv, $meth) = @_;
    ($obj, $other) = ($other, $obj) if $inv;
    bless [$meth, $obj, $other];
  }

This module is very unusual as overloaded modules go: it does not
provide any usual overloaded operators, instead it provides the L<Last
Resort> operator C<nomethod>.  In this example the corresponding
subroutine returns an object which encapsulates operations done over
the objects: C<new symbolic 3> contains C<['n', 3]>, C<2 + new
symbolic 3> contains C<['+', 2, ['n', 3]]>.

Here is an example of the script which "calculates" the side of
circumscribed octagon using the above package:

  require symbolic;
  my $iter = 1;			# 2**($iter+2) = 8
  my $side = new symbolic 1;
  my $cnt = $iter;

  while ($cnt--) {
    $side = (sqrt(1 + $side**2) - 1)/$side;
  }
  print "OK\n";

The value of $side is

  ['/', ['-', ['sqrt', ['+', 1, ['**', ['n', 1], 2]],
	               undef], 1], ['n', 1]]

Note that while we obtained this value using a nice little script,
there is no simple way to I<use> this value.  In fact this value may
be inspected in debugger (see L<perldebug>), but ony if
C<bareStringify> B<O>ption is set, and not via C<p> command.

If one attempts to print this value, then the overloaded operator
C<""> will be called, which will call C<nomethod> operator.  The
result of this operator will be stringified again, but this result is
again of type C<symbolic>, which will lead to an infinite loop.

Add a pretty-printer method to the module F<symbolic.pm>:

  sub pretty {
    my ($meth, $a, $b) = @{+shift};
    $a = 'u' unless defined $a;
    $b = 'u' unless defined $b;
    $a = $a->pretty if ref $a;
    $b = $b->pretty if ref $b;
    "[$meth $a $b]";
  }

Now one can finish the script by

  print "side = ", $side->pretty, "\n";

The method C<pretty> is doing object-to-string conversion, so it
is natural to overload the operator C<""> using this method.  However,
inside such a method it is not necessary to pretty-print the
I<components> $a and $b of an object.  In the above subroutine
C<"[$meth $a $b]"> is a catenation of some strings and components $a
and $b.  If these components use overloading, the catenation operator
will look for an overloaded operator C<.>; if not present, it will
look for an overloaded operator C<"">.  Thus it is enough to use

  use overload nomethod => \&wrap, '""' => \&str;
  sub str {
    my ($meth, $a, $b) = @{+shift};
    $a = 'u' unless defined $a;
    $b = 'u' unless defined $b;
    "[$meth $a $b]";
  }

Now one can change the last line of the script to

  print "side = $side\n";

which outputs

  side = [/ [- [sqrt [+ 1 [** [n 1 u] 2]] u] 1] [n 1 u]]

and one can inspect the value in debugger using all the possible
methods.

Something is is still amiss: consider the loop variable $cnt of the
script.  It was a number, not an object.  We cannot make this value of
type C<symbolic>, since then the loop will not terminate.

Indeed, to terminate the cycle, the $cnt should become false.
However, the operator C<bool> for checking falsity is overloaded (this
time via overloaded C<"">), and returns a long string, thus any object
of type C<symbolic> is true.  To overcome this, we need a way to
compare an object to 0.  In fact, it is easier to write a numeric
conversion routine.

Here is the text of F<symbolic.pm> with such a routine added (and
slightly modified str()):

  package symbolic;		# Primitive symbolic calculator
  use overload
    nomethod => \&wrap, '""' => \&str, '0+' => \&num;

  sub new { shift; bless ['n', @_] }
  sub wrap {
    my ($obj, $other, $inv, $meth) = @_;
    ($obj, $other) = ($other, $obj) if $inv;
    bless [$meth, $obj, $other];
  }
  sub str {
    my ($meth, $a, $b) = @{+shift};
    $a = 'u' unless defined $a;
    if (defined $b) {
      "[$meth $a $b]";
    } else {
      "[$meth $a]";
    }
  }
  my %subr = ( n => sub {$_[0]},
	       sqrt => sub {sqrt $_[0]},
	       '-' => sub {shift() - shift()},
	       '+' => sub {shift() + shift()},
	       '/' => sub {shift() / shift()},
	       '*' => sub {shift() * shift()},
	       '**' => sub {shift() ** shift()},
	     );
  sub num {
    my ($meth, $a, $b) = @{+shift};
    my $subr = $subr{$meth}
      or die "Do not know how to ($meth) in symbolic";
    $a = $a->num if ref $a eq __PACKAGE__;
    $b = $b->num if ref $b eq __PACKAGE__;
    $subr->($a,$b);
  }

All the work of numeric conversion is done in %subr and num().  Of
course, %subr is not complete, it contains only operators used in the
example below.  Here is the extra-credit question: why do we need an
explicit recursion in num()?  (Answer is at the end of this section.)

Use this module like this:

  require symbolic;
  my $iter = new symbolic 2;	# 16-gon
  my $side = new symbolic 1;
  my $cnt = $iter;

  while ($cnt) {
    $cnt = $cnt - 1;		# Mutator `--' not implemented
    $side = (sqrt(1 + $side**2) - 1)/$side;
  }
  printf "%s=%f\n", $side, $side;
  printf "pi=%f\n", $side*(2**($iter+2));

It prints (without so many line breaks)

  [/ [- [sqrt [+ 1 [** [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1]
			  [n 1]] 2]]] 1]
     [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1] [n 1]]]=0.198912
  pi=3.182598

The above module is very primitive.  It does not implement
mutator methods (C<++>, C<-=> and so on), does not do deep copying
(not required without mutators!), and implements only those arithmetic
operations which are used in the example.

To implement most arithmetic operations is easy; one should just use
the tables of operations, and change the code which fills %subr to

  my %subr = ( 'n' => sub {$_[0]} );
  foreach my $op (split " ", $overload::ops{with_assign}) {
    $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
  }
  my @bins = qw(binary 3way_comparison num_comparison str_comparison);
  foreach my $op (split " ", "@overload::ops{ @bins }") {
    $subr{$op} = eval "sub {shift() $op shift()}";
  }
  foreach my $op (split " ", "@overload::ops{qw(unary func)}") {
    print "defining `$op'\n";
    $subr{$op} = eval "sub {$op shift()}";
  }

Due to L<Calling Conventions for Mutators>, we do not need anything
special to make C<+=> and friends work, except filling C<+=> entry of
%subr, and defining a copy constructor (needed since Perl has no
way to know that the implementation of C<'+='> does not mutate
the argument, compare L<Copy Constructor>).

To implement a copy constructor, add C<< '=' => \&cpy >> to C<use overload>
line, and code (this code assumes that mutators change things one level
deep only, so recursive copying is not needed):

  sub cpy {
    my $self = shift;
    bless [@$self], ref $self;
  }

To make C<++> and C<--> work, we need to implement actual mutators,
either directly, or in C<nomethod>.  We continue to do things inside
C<nomethod>, thus add

    if ($meth eq '++' or $meth eq '--') {
      @$obj = ($meth, (bless [@$obj]), 1); # Avoid circular referencen
      return $obj;
    }

after the first line of wrap().  This is not a most effective
implementation, one may consider

  sub inc { $_[0] = bless ['++', shift, 1]; }

instead.

As a final remark, note that one can fill %subr by

  my %subr = ( 'n' => sub {$_[0]} );
  foreach my $op (split " ", $overload::ops{with_assign}) {
    $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
  }
  my @bins = qw(binary 3way_comparison num_comparison str_comparison);
  foreach my $op (split " ", "@overload::ops{ @bins }") {
    $subr{$op} = eval "sub {shift() $op shift()}";
  }
  foreach my $op (split " ", "@overload::ops{qw(unary func)}") {
    $subr{$op} = eval "sub {$op shift()}";
  }
  $subr{'++'} = $subr{'+'};
  $subr{'--'} = $subr{'-'};

This finishes implementation of a primitive symbolic calculator in
50 lines of Perl code.  Since the numeric values of subexpressions
are not cached, the calculator is very slow.

Here is the answer for the exercise: In the case of str(), we need no
explicit recursion since the overloaded C<.>-operator will fall back
to an existing overloaded operator C<"">.  Overloaded arithmetic
operators I<do not> fall back to numeric conversion if C<fallback> is
not explicitly requested.  Thus without an explicit recursion num()
would convert C<['+', $a, $b]> to C<$a + $b>, which would just rebuild
the argument of num().

If you wonder why defaults for conversion are different for str() and
num(), note how easy it was to write the symbolic calculator.  This
simplicity is due to an appropriate choice of defaults.  One extra
note: due to the explicit recursion num() is more fragile than sym():
we need to explicitly check for the type of $a and $b.  If components
$a and $b happen to be of some related type, this may lead to problems.

=head2 I<Really> symbolic calculator

One may wonder why we call the above calculator symbolic.  The reason
is that the actual calculation of the value of expression is postponed
until the value is I<used>.

To see it in action, add a method

  sub STORE {
    my $obj = shift;
    $#$obj = 1;
    @$obj->[0,1] = ('=', shift);
  }

to the package C<symbolic>.  After this change one can do

  my $a = new symbolic 3;
  my $b = new symbolic 4;
  my $c = sqrt($a**2 + $b**2);

and the numeric value of $c becomes 5.  However, after calling

  $a->STORE(12);  $b->STORE(5);

the numeric value of $c becomes 13.  There is no doubt now that the module
symbolic provides a I<symbolic> calculator indeed.

To hide the rough edges under the hood, provide a tie()d interface to the
package C<symbolic> (compare with L<Metaphor clash>).  Add methods

  sub TIESCALAR { my $pack = shift; $pack->new(@_) }
  sub FETCH { shift }
  sub nop {  }		# Around a bug

(the bug is described in L<"BUGS">).  One can use this new interface as

  tie $a, 'symbolic', 3;
  tie $b, 'symbolic', 4;
  $a->nop;  $b->nop;	# Around a bug

  my $c = sqrt($a**2 + $b**2);

Now numeric value of $c is 5.  After C<$a = 12; $b = 5> the numeric value
of $c becomes 13.  To insulate the user of the module add a method

  sub vars { my $p = shift; tie($_, $p), $_->nop foreach @_; }

Now

  my ($a, $b);
  symbolic->vars($a, $b);
  my $c = sqrt($a**2 + $b**2);

  $a = 3; $b = 4;
  printf "c5  %s=%f\n", $c, $c;

  $a = 12; $b = 5;
  printf "c13  %s=%f\n", $c, $c;

shows that the numeric value of $c follows changes to the values of $a
and $b.

=head1 AUTHOR

Ilya Zakharevich E<lt>F<ilya@math.mps.ohio-state.edu>E<gt>.

=head1 DIAGNOSTICS

=begin original

When Perl is run with the B<-Do> switch or its equivalent, overloading
induces diagnostic messages.

=end original

Perl を B<-Do> スイッチか同等のものを使って起動すると、
多重定義が、診断メッセージを誘発します。

Using the C<m> command of Perl debugger (see L<perldebug>) one can
deduce which operations are overloaded (and which ancestor triggers
this overloading). Say, if C<eq> is overloaded, then the method C<(eq>
is shown by debugger. The method C<()> corresponds to the C<fallback>
key (in fact a presence of this method shows that this package has
overloading enabled, and it is what is used by the C<Overloaded>
function of module C<overload>).

The module might issue the following warnings:

=over 4

=item Odd number of arguments for overload::constant

(W) The call to overload::constant contained an odd number of arguments.
The arguments should come in pairs.

=item `%s' is not an overloadable type

(W) You tried to overload a constant type the overload package is unaware of.

=item `%s' is not a code reference

(W) The second (fourth, sixth, ...) argument of overload::constant needs
to be a code reference. Either an anonymous subroutine, or a reference
to a subroutine.

=back

=head1 BUGS

=begin original

Because it is used for overloading, the per-package hash %OVERLOAD now
has a special meaning in Perl. The symbol table is filled with names
looking like line-noise.

=end original

多重定義に使用されるため、Perl では、ハッシュ %OVERLOAD は、
パッケージごとに特別な意味を持つことになります。
シンボルテーブルはごみのように見える名前で埋められます。

For the purpose of inheritance every overloaded package behaves as if
C<fallback> is present (possibly undefined). This may create
interesting effects if some package is not overloaded, but inherits
from two overloaded packages.

Relation between overloading and tie()ing is broken.  Overloading is
triggered or not basing on the I<previous> class of tie()d value.

This happens because the presence of overloading is checked too early,
before any tie()d access is attempted.  If the FETCH()ed class of the
tie()d value does not change, a simple workaround is to access the value
immediately after tie()ing, so that after this call the I<previous> class
coincides with the current one.

B<Needed:> a way to fix this without a speed penalty.

Barewords are not covered by overloaded string constants.

=begin original

This document is confusing.  There are grammos and misleading language
used in places.  It would seem a total rewrite is needed.

=end original

このドキュメントは混乱しています。あちこちに
誤解しやすい文章があります。完全な書き直しが必要です。

=cut
