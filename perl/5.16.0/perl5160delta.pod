
=encoding utf8

=head1 NAME

=begin original

perl5160delta - what is new for perl v5.16.0

=end original

perl5160delta - perl v5.16.0 での変更点

=head1 DESCRIPTION

=begin original

This document describes differences between the 5.14.0 release and
the 5.16.0 release.

=end original

この文書は 5.14.0 リリースと 5.16.0 リリースの変更点を記述しています。

=begin original

If you are upgrading from an earlier release such as 5.12.0, first read
L<perl5140delta>, which describes differences between 5.12.0 and
5.14.0.

=end original

5.12.0 のような以前のリリースから更新する場合は、まず 5.12.0 と
5.14.0 の違いについて記述している L<perl5140delta> を読んでください。

=begin original

Some of the bug fixes in this release have been backported to subsequent
releases of 5.14.x.  Those are indicated with the 5.14.x version in
parentheses.

=end original

このリリースで修正されたバグのいくつかは 5.14.x のリリースに
バックポートされました。
そのようなものはかっこの中に 5.14.x のバージョン番号を書いて示しています。

=head1 Notice

=begin original

With the release of Perl 5.16.0, the 5.12.x series of releases are now out of
their support period.  There may be future 5.12.x releases, but only in the
event of a critical security issue.  Users of Perl 5.12 or earlier should
consider upgrading to a more recent release of Perl.

=end original

Perl 5.16.0 のリリースによって、5.12.x リリースシリーズはサポート期間が
終了します。
将来 5.12.x リリースがあるかもしれませんが、それは重大なセキュリティ問題が
あった場合のみです。
Perl 5.12 以前のユーザーはより新しい Perl にアップグレードすることを
検討するべきです。

=begin original

This policy is described in greater detail in
L<perlpolicy|perlpolicy/MAINTENANCE AND SUPPORT>.

=end original

このポリシーは L<perlpolicy|perlpolicy/MAINTENANCE AND SUPPORT> に
より詳細に記述されています。

=head1 Core Enhancements

(コアの拡張)

=head2 C<use I<VERSION>>

=begin original

As of this release, version declarations like C<use v5.16> now disable
all features before enabling the new feature bundle.  This means that
the following holds true:

=end original

このリリース以降、C<use v5.16> のようなバージョン宣言は、新しい機能が
有効になる前の全ての機能が無効になるようになりました。
これは、以下のようなものが真であることを意味します:

    use 5.016;
    # only 5.16 features enabled here
    use 5.014;
    # only 5.14 features enabled here (not 5.16)

=begin original

C<use v5.12> and higher continue to enable strict, but explicit C<use
strict> and C<no strict> now override the version declaration, even
when they come first:

=end original

C<use v5.12> 以上は strict を有効にするという機能ははそのままですが、
明示的な C<use strict> と C<no strict> は (先に現れても) バージョン定義を
上書きするようになりました:

    no strict;
    use 5.012;
    # no strict here

=begin original

There is a new ":default" feature bundle that represents the set of
features enabled before any version declaration or C<use feature> has
been seen.  Version declarations below 5.10 now enable the ":default"
feature set.  This does not actually change the behaviour of C<use
v5.8>, because features added to the ":default" set are those that were
traditionally enabled by default, before they could be turned off.

=end original

新しい ":default" 機能は、任意のバージョン定義や C<use feature> が
現れる前に有効な機能の集合を表現します。
5.10 以前のバージョン宣言は ":default" 機能集合を有効にするように
なりました。
これは実際には C<use v5.8> の振る舞いを変更しません; なぜなら
":default" 集合は、機能を無効に出来るようになる前に伝統的にデフォルトで
有効になっていたものだからです。

=begin original

C<< no feature >> now resets to the default feature set.  To disable all
features (which is likely to be a pretty special-purpose request, since
it presumably won't match any named set of semantics) you can now  
write C<< no feature ':all' >>.

=end original

C<< no feature >> はデフォルト機能集合をリセットするようになりました。
全ての機能を無効にする (これはかなり特殊な用途の要求です; なぜなら
おそらく動作の全ての名前付き集合にマッチングしないからです) には、
C<< no feature ':all' >> と書けるようになります。

=begin original

C<$[> is now disabled under C<use v5.16>.  It is part of the default
feature set and can be turned on or off explicitly with C<use feature
'array_base'>.

=end original

C<$[> は C<use v5.16> の元では無効になるようになりました。
これはデフォルト機能集合の一部で、 C<use feature 'array_base'> によって
明示的に有効無効を切り替えられます。

=head2 C<__SUB__>

=begin original

The new C<__SUB__> token, available under the C<current_sub> feature
(see L<feature>) or C<use v5.16>, returns a reference to the current
subroutine, making it easier to write recursive closures.

=end original

C<current_sub> 機能 (L<feature> 参照) または C<use v5.16> で利用可能な
C<__SUB__> トークンは現在のサブルーチンへのリファレンスを返すことで、
再帰クロージャを書くのを容易にします。

=head2 New and Improved Built-ins

(新規または改良された組み込み関数)

=head3 More consistent C<eval>

(より一貫性のある C<eval>)

=begin original

The C<eval> operator sometimes treats a string argument as a sequence of
characters and sometimes as a sequence of bytes, depending on the
internal encoding.  The internal encoding is not supposed to make any
difference, but there is code that relies on this inconsistency.

=end original

C<eval> 演算子は内部エンコーディングに依存して、時には文字列引数を
文字の並びとして、時にはバイトの並びとして扱います。
内部エンコーディングは何の違いもないはずですが、この非一貫性に依存した
コードがあります。

=begin original

The new C<unicode_eval> and C<evalbytes> features (enabled under C<use
5.16.0>) resolve this.  The C<unicode_eval> feature causes C<eval
$string> to treat the string always as Unicode.  The C<evalbytes>
features provides a function, itself called C<evalbytes>, which
evaluates its argument always as a string of bytes.

=end original

(C<use 5.16.0> で有効になる)新しい C<unicode_eval> 機能と
C<evalbytes> 機能はこれを解決します。
C<unicode_eval> 機能は、C<eval $string> での文字列を常に Unicode として
扱います。
C<evalbytes> 機能は、引数を常にバイト列として扱う C<evalbytes> 関数を
提供します。

=begin original

These features also fix oddities with source filters leaking to outer
dynamic scopes.

=end original

これらの機能は、ソースフィルタが外側の動的スコープにリークする問題も
修正します。

=begin original

See L<feature> for more detail.

=end original

さらなる詳細については L<feature> を参照してください。

=head3 C<substr> lvalue revamp

(C<substr> 左辺値の刷新)

=for comment Does this belong here, or under Incomptable Changes?

=begin original

When C<substr> is called in lvalue or potential lvalue context with two
or three arguments, a special lvalue scalar is returned that modifies
the original string (the first argument) when assigned to.

=end original

左辺値や潜在的な左辺値コンテキストで 2 引数または 3 引数の C<substr> が
呼び出されると、代入するときに元の文字列(1 番目の引数)を修正する
特殊な左辺値スカラを返します。

=begin original

Previously, the offsets (the second and third arguments) passed to
C<substr> would be converted immediately to match the string, negative
offsets being translated to positive and offsets beyond the end of the
string being truncated.

=end original

以前は、C<substr> に渡されたオフセット(2 番目と 3 番目の引数) は直ちに
文字列にマッチするように変換され、負のオフセットは正に変換され、
文字列の末尾を越えるオフセットは切り詰められました。

=begin original

Now, the offsets are recorded without modification in the special
lvalue scalar that is returned, and the original string is not even
looked at by C<substr> itself, but only when the returned lvalue is
read or modified.

=end original

今では、オフセットは返される特殊左辺値スカラに修正なしに記録され、
元の文字列は C<substr> 自身によっても見ませんが、返された左辺値は
読んだり修正したりしたときだけです。

=begin original

These changes result in an incompatible change:

=end original

これらの変更はいくつかの互換性のない変更を引き起こします:

=begin original

If the original string changes length after the call to C<substr> but
before assignment to its return value, negative offsets will remember
their position from the end of the string, affecting code like this:

=end original

C<substr> を呼び出した後、返り値が代入される前に、元の文字列の長さが
変更されると、負のオフセットは文字列の末尾からの位置を覚えているので、
以下のようなコードに影響を与えます:

    my $string = "string";
    my $lvalue = \substr $string, -4, 2;
    print $lvalue, "\n"; # prints "ri"
    $string = "bailing twine";
    print $lvalue, "\n"; # prints "wi"; used to print "il"

=begin original

The same thing happens with an omitted third argument.  The returned
lvalue will always extend to the end of the string, even if the string
becomes longer.

=end original

同じことは省略された 3 番目の引数でも起こります。
返された左辺値は、たとえ文字列が長くなっても、常に文字列の末尾に
拡張されます。

=begin original

Since this change also allowed many bugs to be fixed (see
L</The C<substr> operator>), and since the behaviour
of negative offsets has never been specified, the
change was deemed acceptable.

=end original

この変更により多くのバグを修正できるようになり、
L</Fixes to the C<substr> operator> を参照してください)、
負数のオフセットの振る舞いは仕様になったことはないので、この変更は
受け入れられる取引でした。

=head3 Return value of C<tied>

(C<tied> の返り値)

=begin original

The value returned by C<tied> on a tied variable is now the actual
scalar that holds the object to which the variable is tied.  This
allows ties to be weakened with C<Scalar::Util::weaken(tied
$tied_variable)>.

=end original

tie された変数に対する C<tied> によって返される値は、変数が tie された
オブジェクトを保持する実際のスカラになりました。
これにより C<Scalar::Util::weaken(tied $tied_variable)> で tie を
弱めることが出来るようになります。

=head2 Unicode Support

(Unicode 対応)

=head3 Supports (I<almost>) Unicode 6.1

((I<ほぼ>) Unicode 6.1 対応)

=begin original

Besides the addition of whole new scripts, and new characters in
existing scripts, this new version of Unicode, as always, makes some
changes to existing characters.  One change that may trip up some
applications is that the General Category of two characters in the
Latin-1 range, PILCROW SIGN and SECTION SIGN, has been changed from
Other_Symbol to Other_Punctuation.  The same change has been made for
a character in each of Tibetan, Ethiopic, and Aegean.
The code points U+3248..U+324F (CIRCLED NUMBER TEN ON BLACK SQUARE
through CIRCLED NUMBER EIGHTY ON BLACK SQUARE) have had their General
Category changed from Other_Symbol to Other_Numeric.  The Line Break
property has changes for Hebrew and Japanese; and as a consequence of
other changes in 6.1, the Perl regular expression construct C<\X> now
works differently for some characters in Thai and Lao.

=end original

完全に新しい用字や、既にある用字への新しい文字の他に、新しい
Unicode はいつも通り、既にある文字もいくつか変更しています。
アプリケーションをつまずかせるかもしれない変更の一つは、
Latin-1 の範囲にある二つの文字 PILCROW SIGN および SECTION SIGN の
一般カテゴリは Other_Symbol から Other_Punctuation に変更されました。
同じ変更は Tibetan, Ethiopic, Aegean の文字に対しても行われました。
符号位置 U+3248..U+324F (CIRCLED NUMBER TEN ON BLACK SQUARE から
CIRCLED NUMBER EIGHTY ON BLACK SQUARE) の一般カテゴリは
Other_Symbol から Other_Numeric に変更されました。
Line Break 特性は Hebrew と Japanese で変更されました; そして 6.1 での
その他の変更の結果として、Perl の正規表現構造 C<\X> は Thai と Lao の
いくつかの文字では異なった動作をします。

=begin original

New aliases (synonyms) have been defined for many property values;
these, along with the previously existing ones, are all cross-indexed in
L<perluniprops>.

=end original

新しい別名が多くの特性値に定義されました; これらは、既に存在するものと
あわせて、全て L<perluniprops> にクロスインデックスされています。

=begin original

The return value of C<charnames::viacode()> is affected by other
changes:

=end original

C<charnames::viacode()> の帰り値はその他の変更の影響を受けます:

 Code point      Old Name             New Name
   U+000A    LINE FEED (LF)        LINE FEED
   U+000C    FORM FEED (FF)        FORM FEED
   U+000D    CARRIAGE RETURN (CR)  CARRIAGE RETURN
   U+0085    NEXT LINE (NEL)       NEXT LINE
   U+008E    SINGLE-SHIFT 2        SINGLE-SHIFT-2
   U+008F    SINGLE-SHIFT 3        SINGLE-SHIFT-3
   U+0091    PRIVATE USE 1         PRIVATE USE-1
   U+0092    PRIVATE USE 2         PRIVATE USE-2
   U+2118    SCRIPT CAPITAL P      WEIERSTRASS ELLIPTIC FUNCTION

=begin original

Perl will accept any of these names as input, but
C<charnames::viacode()> now returns the new name of each pair.  The
change for U+2118 is considered by Unicode to be a correction, that is
the original name was a mistake (but again, it will remain forever valid
to use it to refer to U+2118).  But most of these changes are the
fallout of the mistake Unicode 6.0 made in naming a character used in
Japanese cell phones to be "BELL", which conflicts with the longstanding
industry use of (and Unicode's recommendation to use) that name
to mean the ASCII control character at U+0007.  As a result, that name
has been deprecated in Perl since v5.14; and any use of it will raise a
warning message (unless turned off).  The name "ALERT" is now the
preferred name for this code point, with "BEL" being an acceptable short
form.  The name for the new cell phone character, at code point U+1F514,
remains undefined in this version of Perl (hence we don't quite
implement all of Unicode 6.1), but starting in v5.18, BELL will mean
this character, and not U+0007.

=end original

Perl は任意の名前を入力として受け付けますが、C<charnames::viacode()> は
それぞれのペアの新しい名前を返すようになりました。
U+2118 の変更は、元の名前が間違っていたための Unicode による訂正と
考えられます(しかし再び、これは U+2118 を参照するために永遠に有効の
ままです)。
しかしこれらの変更の中で最大のものは、日本の携帯電話で使われている
文字の名前に、長い間実用されている (そして Unicode も使用を推奨している
ASCII 制御文字 U+0007 と衝突している "BELL" という名前を付けたことによる
副産物です。
結果として、この名前は v5.14 以降 Perl では非推奨となっています;
そしてこれを使うと(オフにしていなければ)警告メッセージが発生します。
この符号位置に対する適切な名前は "ALERT" になり、短い形式として
"BEL" が受け入れられるようになります。
このバージョンの Perl では、符号位置 U+1F514 の新しい携帯電話の文字の
名前は未定義のままです(従って私たちは Unicode 6.1 の完全に全てを
実装しているわけではありません)が、v5.18 から BELL は U+0007 ではなく
この文字を意味するようになります。

=begin original

Unicode has taken steps to make sure that this sort of mistake does not
happen again.  The Standard now includes all the generally accepted
names and abbreviations for control characters, whereas previously it
didn't (though there were recommended names for most of them, which Perl
used).  This means that most of those recommended names are now
officially in the Standard.  Unicode did not recommend names for the
four code points listed above between U+008E and U+008F, and in
standardizing them Unicode subtly changed the names that Perl had
previously given them, by replacing the final blank in each name by a
hyphen.  Unicode also officially accepts names that Perl had deprecated,
such as FILE SEPARATOR.  Now the only deprecated name is BELL.
Finally, Perl now uses the new official names instead of the old
(now considered obsolete) names for the first four code points in the
list above (the ones which have the parentheses in them).

=end original

Unicode はこのような過ちが再び起きないようにするための対策を取りました。
今では標準には制御文字に対して、全ての一般的に受け入れられている名前を
含むようになりました(以前は含んでいませんでしたが、そのほとんどは
Perl が使っていた推奨される名前でした)。
Unicode は U+008E から U+008F の間の上述の四つの符号位置に対する
名前を推奨しておらず、これらを標準化する際に Unicode は Perl が以前
与えていた名前を、それぞれの名前の最後の空白をハイフンにすることで
微妙に変更しました。
Unicode はまた、FILE SEPARATOR のように Perl では非推奨とした名前を
公式に受け入れました。
今では唯一の非推奨の名前は BELL です。
最終的に、上述の四つの符号位置の名前として古い(今では古いものとなったと
考えられる)名前ではなく、新しい公式の名前(かっこで囲まれたもの)を使います。

=begin original

Now that the names have been placed in the Unicode standard, these kinds
of changes should not happen again, though corrections, such as to
U+2118, are still possible.

=end original

名前が Unicode 標準に入ったことにより、この種の変更は再び発生することは
ありませんが、U+2118 に対するような修正は引き続き起こりえます。

=begin original

Unicode also added some name abbreviations, which Perl now accepts:
SP for SPACE;
TAB for CHARACTER TABULATION;
NEW LINE, END OF LINE, NL, and EOL for LINE FEED;
LOCKING-SHIFT ONE for SHIFT OUT;
LOCKING-SHIFT ZERO for SHIFT IN;
and ZWNBSP for ZERO WIDTH NO-BREAK SPACE.

=end original

Unicode はまたいくつかの名前の略称を追加し、Perl でも使えるようになりました:
SPACE 用に SP;
CHARACTER TABULATION 用に TAB;
LINE FEED 用に NEW LINE, END OF LINE, NL, EOL;
SHIFT OUT 用に LOCKING-SHIFT ONE;
SHIFT IN 用に LOCKING-SHIFT ZERO;
ZERO WIDTH NO-BREAK SPACE 用に ZWNBSP。

=begin original

More details on this version of Unicode are provided in
L<http://www.unicode.org/versions/Unicode6.1.0/>.

=end original

このバージョンの Unicode に関するさらなる詳細は
L<http://www.unicode.org/versions/Unicode6.1.0/> で提供されています。

=head3 C<use charnames> is no longer needed for C<\N{I<name>}>

(C<\N{I<name>}> には C<use charnames> は不要に)

=begin original

When C<\N{I<name>}> is encountered, the C<charnames> module is now
automatically loaded when needed as if the C<:full> and C<:short>
options had been specified.  See L<charnames> for more information.

=end original

C<\N{I<name>}> に遭遇すると、必要なら C<:full> と C<:short> のオプションが
指定されたかのように C<charnames> モジュールが自動的に読み込まれるように
なりました。
さらなる情報については L<charnames> を参照してください。

=head3 C<\N{...}> can now have Unicode loose name matching

(C<\N{...}> は Unicode の緩い名前のマッチングに)

=begin original

This is described in the C<charnames> item in
L</Updated Modules and Pragmata> below.

=end original

これは後述する L</Updated Modules and Pragmata> の
C<charnames> に記述されています。

=head3 Unicode Symbol Names

(Unicode シンボル名)

=begin original

Perl now has proper support for Unicode in symbol names.  It used to be
that C<*{$foo}> would ignore the internal UTF8 flag and use the bytes of
the underlying representation to look up the symbol.  That meant that
C<*{"\x{100}"}> and C<*{"\xc4\x80"}> would return the same thing.  All
these parts of Perl have been fixed to account for Unicode:

=end original

Perl はシンボル名に対する Unicode 対応を適切に行うようになりました。
今までは C<*{$foo}> は内部 UTF8フラグを無視して、基となっているバイト列を
使います。

=over

=item *

=begin original

Method names (including those passed to C<use overload>)

=end original

メソッド名 (C<use overload> に渡されるものも含みます)

=item *

=begin original

Typeglob names (including names of variables, subroutines and filehandles)

=end original

型グロブ名 (変数、サブルーチン、ファイルハンドルの名前を含みます)

=item *

=begin original

Package names

=end original

パッケージ名

=item *

C<goto>

=item *

=begin original

Symbolic dereferencing

=end original

シンボリックなデリファレンス

=item *

=begin original

Second argument to C<bless()> and C<tie()>

=end original

C<bless()> と C<tie()> への第 2 引数

=item *

=begin original

Return value of C<ref()>

=end original

C<ref()> の返り値

=item *

=begin original

Subroutine prototypes

=end original

サブルーチンプロトタイプ

=item *

=begin original

Attributes

=end original

属性

=item *

=begin original

Various warnings and error messages that mention variable names or values,
methods, etc.

=end original

変数名や値、メソッドなどに言及する様々な警告やエラーメッセージ

=back

=begin original

In addition, a parsing bug has been fixed that prevented C<*{é}> from
implicitly quoting the name, but instead interpreted it as C<*{+é}>, which
would cause a strict violation.

=end original

さらに、C<*{é}> を暗黙にクォートする名前から除外するバグが修正され、
strict 違反となる C<*{+é}> として解釈されるようになりました。

=begin original

C<*{"*a::b"}> automatically strips off the * if it is followed by an ASCII
letter.  That has been extended to all Unicode identifier characters.

=end original

C<*{"*a::b"}> は、* の後に ASCII 文字が引き続いている場合は * が自動的に
削除されます。
これは全ての Unicode 識別子文字に拡張されました。

=begin original

One-character non-ASCII non-punctuation variables (like C<$é>) are now
subject to "Used only once" warnings.  They used to be exempt, as they
were treated as punctuation variables.

=end original

(C<$é> のような) 単一文字非 ASCII 非句読点変数はは
"Used only once" 警告を出すようになりました。
今までは、これは句読点変数として扱われていたので警告から免れていました。

=begin original

Also, single-character Unicode punctuation variables (like C<$‰>) are now
supported [perl #69032].

=end original

また、(C<$‰> のような)単一文字の Unicode 句読点変数に対応しました
[perl #69032]。

=head3 Improved ability to mix locales and Unicode, including UTF-8 locales

((UTF-8 ロケールを含む)ロケールと Unicode を混ぜる能力の改善)

=begin original

An optional parameter has been added to C<use locale>

=end original

C<use locale> にオプションの引数が追加されました:

 use locale ':not_characters';

=begin original

which tells Perl to use all but the C<LC_CTYPE> and C<LC_COLLATE>
portions of the current locale.  Instead, the character set is assumed
to be Unicode.  This allows locales and Unicode to be seamlessly mixed,
including the increasingly frequent UTF-8 locales.  When using this
hybrid form of locales, the C<:locale> layer to the L<open> pragma can
be used to interface with the file system, and there are CPAN modules
available for ARGV and environment variable conversions.

=end original

は、現在のロケールのうち、C<LC_CTYPE> と C<LC_COLLATE> 以外の全てを
使うことを Perl に知らせます。
それ以外では、文字集合は Unicode であると仮定します。
これにより、徐々に頻繁に出てくる UTF-8 ロケールを含む、ロケールと
Unicode をシームレスに混ぜることが出来るようになります。
このハイブリッド形式のロケールを使うとき、
L<open> への C<:locale> 層をファイルシステムへのインターフェースとして
使うことができ、ARGV と環境変数の変換のための CPAN モジュールを
利用可能です。

=begin original

Full details are in L<perllocale>.

=end original

完全な詳細は L<perllocale> にあります。

=head3 New function C<fc> and corresponding escape sequence C<\F> for Unicode foldcase

(Unicode 畳み込み文字のための新しい関数 C<fc> と対応するエスケープシーケンス C<\F>)

=begin original

Unicode foldcase is an extension to lowercase that gives better results
when comparing two strings case-insensitively.  It has long been used
internally in regular expression C</i> matching.  Now it is available
explicitly through the new C<fc> function call (enabled by
S<C<"use feature 'fc'">>, or C<use v5.16>, or explicitly callable via
C<CORE::fc>) or through the new C<\F> sequence in double-quotish
strings.

=end original

Unicode の畳み込み文字は、二つの文字列を大文字小文字を無視して比較するときに
よりよい結果を与えるための小文字の拡張です。
これは長い間正規表現の C</i> マッチングで内部で使われていました。
これは (S<C<"use feature 'fc'">>、C<use v5.16> で有効にするか、
明示的な C<CORE::fc> で明示的に呼び出し可能な)新しい C<fc> 関数呼び出しか、
ダブルクォート風の文字列の中の新しい C<\F> シーケンスを通して
利用可能になりました。

=begin original

Full details are in L<perlfunc/fc>.

=end original

完全な詳細は L<perlfunc/fc> にあります。

=head3 The Unicode C<Script_Extensions> property is now supported.

(Unicode の C<Script_Extensions> 特性に対応)

=begin original

New in Unicode 6.0, this is an improved C<Script> property.  Details
are in L<perlunicode/Scripts>.

=end original

Unicode 6.0 からの新機能で、これは改良された C<Script> 特性です。
詳細は L<perlunicode/Scripts> にあります。

=head2 XS Changes

=head3 Improved typemaps for Some Builtin Types

(いくつかの組み込み型の typemap の改善)

=begin original

Most XS authors will be aware that there is a longstanding bug in the
OUTPUT typemap for T_AVREF (C<AV*>), T_HVREF (C<HV*>), T_CVREF (C<CV*>),
and T_SVREF (C<SVREF> or C<\$foo>) that requires manually decrementing
the reference count of the return value instead of the typemap taking
care of this.  For backwards-compatibility, this cannot be changed in the
default typemaps.  But we now provide additional typemaps
C<T_AVREF_REFCOUNT_FIXED>, etc. that do not exhibit this bug.  Using
them in your extension is as simple as having one line in your
C<TYPEMAP> section:

=end original

ほとんどの XS 作者は、T_AVREF (C<AV*>), T_HVREF (C<HV*>), T_CVREF (C<CV*>),
T_SVREF (C<SVREF> または C<\$foo>) の OUTPUT typemap は参照カウントを
typemap が面倒を見てくれず、手動で減らす必要があるという長い間ある
バグに気付いていました。
後方互換性のために、これはデフォルトの typemap では変更できません。
しかし、この問題が含まれない
C<T_AVREF_REFCOUNT_FIXED> などの追加の typemap を提供することになりました。
エクステンションでこれらを使うことで、
C<TYPEMAP> セクションを 1 行にまで単純化できます:

  HV*	T_HVREF_REFCOUNT_FIXED

=head3 C<is_utf8_char()>

=begin original

The XS-callable function C<is_utf8_char()>, when presented with
malformed UTF-8 input, can read up to 12 bytes beyond the end of the
string.  This cannot be fixed without changing its API, and so its
use is now deprecated.  Use C<is_utf8_char_buf()> (described just below)
instead.

=end original

XS 呼び出し可能な関数 C<is_utf8_char()> は、不正な UTF-8 入力があると、
文字列の終わりを越えて最大 12 バイト読む可能性があります。
これは API を変更せずに修正することはできないので、この使用は
非推奨になりました。
代わりに (この後に記述している) C<is_utf8_char_buf()> を使ってください。

=head3 Added C<is_utf8_char_buf()>

(C<is_utf8_char_buf()> の追加)

=begin original

This function is designed to replace the deprecated L</is_utf8_char()>
function.  It includes an extra parameter to make sure it doesn't read
past the end of the input buffer.

=end original

この関数は非推奨の L</is_utf8_char()> 関数を置き換えるために
設計されています。
これには入力バッファの末尾を越えて読み込まないようにするための追加の引数が
あります。

=head3 Other C<is_utf8_foo()> functions, as well as C<utf8_to_foo()>, etc.

(C<utf8_to_foo()> のような、その他の C<is_utf8_foo()> 関数)

=begin original

Most of the other XS-callable functions that take UTF-8 encoded input
implicitly assume that the UTF-8 is valid (not malformed) in regards to
buffer length.  Do not do things such as change a character's case or
see if it is alphanumeric without first being sure that it is valid
UTF-8.  This can be safely done for a whole string by using one of the
functions C<is_utf8_string()>, C<is_utf8_string_loc()>, and
C<is_utf8_string_loclen()>.

=end original

UTF-8 エンコードされた入力を取るその他の XS 呼び出し可能な関数のほとんどは
バッファ長に関して UTF-8 が有効である(不正でない)ことを暗黙に
仮定しています。
まず文字列が有効な UTF-8 であることを確認せずに、文字の大文字小文字を
変更したり、英数字かどうかを確認したりしてはいけません。 
このようなことは、文字列全体に対して C<is_utf8_string()>,
C<is_utf8_string_loc()>, C<is_utf8_string_loclen()> のいずれかを使うことで
安全に行えます。

=head3 New Pad API

(新しいパッド API)

=begin original

Many new functions have been added to the API for manipulating lexical
pads.  See L<perlapi/Pad Data Structures> for more information.

=end original

レキシカルパッドを操作するための多くの新しい関数が API に追加されました。
さらなる情報については L<perlapi/Pad Data Structures> を参照してください。

=head2 Changes to Special Variables

(特殊変数に関する変更)

=head3 C<$$> can be assigned to

(C<$$> は代入可能に)

=begin original

C<$$> was made read-only in Perl 5.8.0.  But only sometimes: C<local $$>
would make it writable again.  Some CPAN modules were using C<local $$> or
XS code to bypass the read-only check, so there is no reason to keep C<$$>
read-only.  (This change also allowed a bug to be fixed while maintaining
backward compatibility.)

=end original

C<$$> は Perl 5.8.0 で読み込み専用になりました。
しかしときどき: C<local $$> で再び書き込み可能になることがあります。
CPAN モジュールによっては読み込み専用のチェックを回避するために
C<local $$> や XS コードを使っているものもあるので、C<$$> を読み込み専用に
保っておく理由がありません。
(この変更はまた、過去互換性を維持する間に修正するべきバグを許します。)

=head3 C<$^X> converted to an absolute path on FreeBSD, OS X and Solaris

(FreeBSD, OS X, Solaris でも C<$^X> が絶対パスに変換されるように)

=begin original

C<$^X> is now converted to an absolute path on OS X, FreeBSD (without
needing F</proc> mounted) and Solaris 10 and 11.  This augments the
previous approach of using F</proc> on Linux, FreeBSD and NetBSD
(in all cases, where mounted).

=end original

C<$^X> は、OS X、(F</proc> をマウントする必要のない) FreeBSD、
Solaris 10 と 11 では絶対パスに変換されるようになりました。
これは Linux, FreeBSD, NetBSD で(マウントされているときに)
F</proc> を使うという以前の手法を拡大します。

=begin original

This makes relocatable perl installations more useful on these platforms.
(See "Relocatable @INC" in F<INSTALL>)

=end original

これにより、これらのプラットフォームでの再配置可能な perl インストールが
より便利になります。
(F<INSTALL> の "Relocatable @INC" を参照してください。)

=head2 Debugger Changes

(デバッガの変更)

=head3 Features inside the debugger

(デバッガ内部の機能)

=begin original

The current Perl's L<feature> bundle is now enabled for commands entered
in the interactive debugger.

=end original

現在の Perl の L<feature> バンドルは、対話的デバッガで入力されたコマンドで
有効になるようになりました。

=head3 New option for the debugger's B<t> command

(デバッガの B<t> コマンドの新しいオプション)

=begin original

The B<t> command in the debugger, which toggles tracing mode, now
accepts a numeric argument that determines how many levels of subroutine
calls to trace.

=end original

トレースモードをトグルするデバッガの B<t> コマンドは、サブルーチン
呼び出しを何レベルまでトレースするかを決定する数値引数を
受け付けるようになりました。

=head3 C<enable> and C<disable>

(C<enable> と C<disable>)

=begin original

The debugger now has C<disable> and C<enable> commands for disabling
existing breakpoints and re-enabling them.  See L<perldebug>.

=end original

デバッガに、すでに有るブレークポイントを無効にしたり、再び有効に
したりするためのC<disable> コマンドと C<enable> コマンドが追加されました。
L<perldebug> を参照してください。

=head3 Breakpoints with file names

(ファイル名付きのブレークポイント)

=begin original

The debugger's "b" command for setting breakpoints now allows a line
number to be prefixed with a file name.  See
L<perldebug/"b [file]:[line] [condition]">.

=end original

ブレークポイントを設定するためのデバッガの "b" コマンドは、ファイル名の
後ろに付ける行番号を受け付けるようになりました。
L<perldebug/"b [file]:[line] [condition]"> を参照してください。

=head2 The C<CORE> Namespace

(C<CORE> 名前空間)

=head3 The C<CORE::> prefix

(C<CORE::> 接頭辞)

=begin original

The C<CORE::> prefix can now be used on keywords enabled by
L<feature.pm|feature>, even outside the scope of C<use feature>.

=end original

C<CORE::> 接頭辞は、たとえ C<use feature> スコープの外側でも、
L<feature.pm|feature> で有効になるキーワードで使われるようになりました。

=head3 Subroutines in the C<CORE> namespace

(C<CORE> 名前空間のサブルーチン)

=begin original

Many Perl keywords are now available as subroutines in the CORE namespace.
This allows them to be aliased:

=end original

多くの Perl キーワードが CORE 名前空間で利用可能になりました。
これにより以下のように別名にできるようになります:

    BEGIN { *entangle = \&CORE::tie }
    entangle $variable, $package, @args;

=begin original

And for prototypes to be bypassed:

=end original

そしてプロトタイプを回避するには:

    sub mytie(\[%$*@]$@) {
	my ($ref, $pack, @args) = @_;
	... do something ...
	goto &CORE::tie;
    }

=begin original

Some of these cannot be called through references or via C<&foo> syntax,
but must be called as barewords.

=end original

これらの一部はリファレンスや C<&foo> 文法では呼び出すことができず、
裸の単語で呼び出さなければなりません。

=begin original

See L<CORE> for details.

=end original

詳しくは L<CORE> を参照してください。

=head2 Other Changes

(その他の変更)

=head3 Anonymous handles

(無名ハンドル)

=begin original

Automatically generated file handles are now named __ANONIO__ when the
variable name cannot be determined, rather than $__ANONIO__.

=end original

変数名が決定できないときに自動的に生成されるファイルハンドルの名前は
$__ANONIO__ ではなく __ANONIO__ になりました。

=head3 Autoloaded sort Subroutines

(ソートサブルーチンがオートロードされるように)

=begin original

Custom sort subroutines can now be autoloaded [perl #30661]:

=end original

カスタムソートサブルーチンはオートロードされるようになりました
[perl #30661]:

    sub AUTOLOAD { ... }
    @sorted = sort foo @list; # uses AUTOLOAD

=head3 C<continue> no longer requires the "switch" feature

(C<continue> には "switch" は不要に)

=begin original

The C<continue> keyword has two meanings.  It can introduce a C<continue>
block after a loop, or it can exit the current C<when> block.  Up till now,
the latter meaning was only valid with the "switch" feature enabled, and
was a syntax error otherwise.  Since the main purpose of feature.pm is to
avoid conflicts with user-defined subroutines, there is no reason for
C<continue> to depend on it.

=end original

C<continue> キーワードには二つの意味があります。
ループの後に C<continue> ブロックを導入する意味と、現在の C<when> ブロックを
出る意味です。
今まで、後者の意味は "switch" 機能が有効の場合にのみ正当で、さもなければ
文法エラーでした。
feature.pm の主な目的はユーザー定義サブルーチンとの衝突を避けることなので、
C<continue> がこれに依存している意味はありません。

=head3 DTrace probes for interpreter phase change

(インタプリタフェーズ変更のための DTrace プローブ)

=begin original

The C<phase-change> probes will fire when the interpreter's phase
changes, which tracks the C<${^GLOBAL_PHASE}> variable.  C<arg0> is
the new phase name; C<arg1> is the old one.  This is useful mostly
for limiting your instrumentation to one or more of: compile time,
run time, destruct time.

=end original

C<phase-change> プローブは、C<${^GLOBAL_PHASE}> 変数を
追跡することによって、インタプリタのフェーズが変わったときに起動されます。
C<arg0> は新しいフェーズ名です; C<arg1> は古いフェーズ名です。
これはコンパイル時、実行時、破壊時に装備を制限するために普通は有用です。

=head3 C<__FILE__()> Syntax

(C<__FILE__()> 文法)

=begin original

The C<__FILE__>, C<__LINE__> and C<__PACKAGE__> tokens can now be written
with an empty pair of parentheses after them.  This makes them parse the
same way as C<time>, C<fork> and other built-in functions.

=end original

C<__FILE__>, C<__LINE__>, C<__PACKAGE__> トークンは、後ろに空のかっこの
組を書けるようになりました。
これにより C<time>, C<fork> やその他の組み込み関数と同じ方法で
パースできるようになります。

=head3 The C<\$> prototype accepts any scalar lvalue

(C<\$> プロトタイプは任意のスカラ左辺値を受け付けるように)

=begin original

The C<\$> and C<\[$]> subroutine prototypes now accept any scalar lvalue
argument.  Previously they only accepted scalars beginning with C<$> and
hash and array elements.  This change makes them consistent with the way
the built-in C<read> and C<recv> functions (among others) parse their
arguments.  This means that one can override the built-in functions with
custom subroutines that parse their arguments the same way.

=end original

C<\$> と C<\[$]> のサブルーチンプロトタイプは任意のスカラ左辺値引数を
受け付けるようになりました。
以前は C<$> で始まるスカラとハッシュおよび配列の要素のみを
受け付けていました。
この変更により組み込みの C<read> 関数と C<recv> 関数が(特に)引数を
パースする方法と一貫性があるようになります。
これは、同じ方法で引数をパースするカスタムサブルーチンで組み込み関数を
オーバーライドできることを意味します。

=head3 C<_> in subroutine prototypes

(サブルーチンプロトタイプの C<_>)

=begin original

The C<_> character in subroutine prototypes is now allowed before C<@> or
C<%>.

=end original

サブルーチンプロトタイプの C<_> 文字は C<@> や C<%> の前に
使えるようになりました。

=head1 Security

(セキュリティ)

=head2 Use C<is_utf8_char_buf()> and not C<is_utf8_char()>

(C<is_utf8_char()> ではなく C<is_utf8_char_buf()> を使う)

=begin original

The latter function is now deprecated because its API is insufficient to
guarantee that it doesn't read (up to 12 bytes in the worst case) beyond
the end of its input string.  See
L<is_utf8_char_buf()|/Added is_utf8_char_buf()>.

=end original

後者の関数は、API が入力文字列の末尾を超えて(最悪の場合最大 12 バイト)
読み込まないことを保証できないので非推奨になりました。
L<is_utf8_char_buf()|/Added is_utf8_char_buf()> を参照してください。

=head2 Malformed UTF-8 input could cause attempts to read beyond the end of the buffer

(不正な UTF-8 入力がバッファの末尾を超えて読み込もうとすることがある)

=begin original

Two new XS-accessible functions, C<utf8_to_uvchr_buf()> and
C<utf8_to_uvuni_buf()> are now available to prevent this, and the Perl
core has been converted to use them.
See L</Internal Changes>.

=end original

二つの新しい XS アクセス可能な関数である C<utf8_to_uvchr_buf()> と
C<utf8_to_uvuni_buf()> がこれを避けるために利用可能となり、Perl コアは
これらを使うように変換されました。
L</Internal Changes> を参照してください。

=head2 C<File::Glob::bsd_glob()> memory error with GLOB_ALTDIRFUNC (CVE-2011-2728).

(GLOB_ALTDIRFUNC での C<File::Glob::bsd_glob()> のメモリエラー (CVE-2011-2728))

=begin original

Calling C<File::Glob::bsd_glob> with the unsupported flag
GLOB_ALTDIRFUNC would cause an access violation / segfault.  A Perl
program that accepts a flags value from an external source could expose
itself to denial of service or arbitrary code execution attacks.  There
are no known exploits in the wild.  The problem has been corrected by
explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Clément Lecigne. (5.14.2)

=end original

未対応フラグ GLOB_ALTDIRFUNC 付きで C<File::Glob::bsd_glob> を呼び出すと
アクセス違反/セグメンテーションフォルトを引き起こすことがありました。
外部ソースからフラグの値を受け付ける Perl プログラムはサービス不能攻撃や
任意コード実行攻撃に晒されるかもしれません。
今のところ知られている攻撃はありません。
この問題は、未対応フラグを明示的に無効にして、未使用関数のポインタを
null にすることで修正されました。
バグは ClE<eacute>ment Lecigne によって報告されました。(5.14.2)

=head2 Privileges are now set correctly when assigning to C<$(>

(C<$(> への代入時に権限が適切に設定されるように)

=begin original

A hypothetical bug (probably non-exploitable in practice) due to the
incorrect setting of the effective group ID while setting C<$(> has been
fixed.  The bug would only have affected systems that have C<setresgid()>
but not C<setregid()>, but no such systems are known to exist.

=end original

C<$(> の設定中の有効グループ ID の設定が正しくないことによる仮説上の
(おそらく実際には攻撃できない)バグが修正されました。
このバグは C<setresgid()> はあるけれども C<setregid()> がないシステムにのみ
影響を与えますが、そのようなシステムの存在は知られていません。

=head1 Deprecations

(非推奨)

=head2 Don't read the Unicode data base files in F<lib/unicore>

(F<lib/unicore> にある Unicode データベースファイルは読み込まない)

=begin original

It is now deprecated to directly read the Unicode data base files.
These are stored in the F<lib/unicore> directory.  Instead, you should
use the new functions in L<Unicode::UCD>.  These provide a stable API,
and give complete information.

=end original

Unicode データベースファイルを直接読むのは非推奨になりました。
これらは F<lib/unicore> ディレクトリに補完されています。
代わりに、L<Unicode::UCD> の新しい関数を使うべきです。
これらは安定した API を提供し、完全な情報を得られます。

=begin original

Perl may at some point in the future change or remove the files.  The
file which applications were most likely to have used is
F<lib/unicore/ToDigit.pl>.  L<Unicode::UCD/prop_invmap()> can be used to
get at its data instead.

=end original

Perl は将来のいずれかの時点でファイルを変更または削除するかもしれません。
アプリケーションが一番使っていたであろうファイルは
F<lib/unicore/ToDigit.pl> です。
代わりにこのデータを得るために L<Unicode::UCD/prop_invmap()> が使えます。

=head2 XS functions C<is_utf8_char()>, C<utf8_to_uvchr()> and
C<utf8_to_uvuni()>

(XS 関数 C<is_utf8_char()>, C<utf8_to_uvchr()>, C<utf8_to_uvuni()>)

=begin original

This function is deprecated because it could read beyond the end of the
input string.  Use the new L<is_utf8_char_buf()|/Added is_utf8_char_buf()>,
C<utf8_to_uvchr_buf()> and C<utf8_to_uvuni_buf()> instead.

=end original

この関数は、入力文字列の末尾を超えて読み込むかもしれないので、
非推奨になりました。
代わりに新しい L<is_utf8_char_buf()|/Added is_utf8_char_buf()>,
C<utf8_to_uvchr_buf()>, C<utf8_to_uvuni_buf()> を使ってください。

=head1 Future Deprecations

(将来の非推奨)

=begin original

This section serves as a notice of features that are I<likely> to be
removed or L<deprecated|perlpolicy/deprecated> in the next release of
perl (5.18.0).  If your code depends on these features, you should
contact the Perl 5 Porters via the L<mailing
list|http://lists.perl.org/list/perl5-porters.html> or L<perlbug> to
explain your use case and inform the deprecation process.

=end original

この章は、次のリリースの perl (5.18.0) で I<おそらく> 削除されるか
L<非推奨|perlpolicy/deprecated> になる機能を示します。
あなたのコードがこれらの機能に依存しているなら、あなたのユースケースを
説明して非推奨プロセスに知らせるために、
L<メーリングリスト|http://lists.perl.org/list/perl5-porters.html> か
L<perlbug> で Perl 5 Porters に知らせるべきです。

=head2 Core Modules

(コアモジュール)

=begin original

These modules may be marked as deprecated I<from the core>.  This only
means that they will no longer be installed by default with the core
distribution, but will remain available on the CPAN.

=end original

これらのモジュールは I<コアからは> 非推奨としてマークされました。
これはコア配布でデフォルトではインストールされなくなるというだけで、
CPAN からは利用可能のままです。

=over

=item *

CPANPLUS

=item *

Filter::Simple

=item *

PerlIO::mmap

=item *

Pod::LaTeX

=item *

Pod::Parser

=item *

SelfLoader

=item *

Text::Soundex

=item *

Thread.pm

=back

=head2 Platforms with no supporting programmers:

(サポートするプログラマがいないプラットフォーム)

=begin original

These platforms will probably have their
special build support removed during the
5.17.0 development series.

=end original

以下のプラットフォームはおそらく 5.17.0 開発シリーズの間に独自のビルド
サポートが削除されます。

=over

=item *

BeOS

=item *

djgpp

=item *

dgux

=item *

EPOC

=item *

MPE/iX

=item *

Rhapsody

=item *

UTS

=item *

VM/ESA

=back

=head2 Other Future Deprecations

(その他の将来の非推奨)

=over

=item *

=begin original

Swapping of $< and $>

=end original

$< と $> の交換

=begin original

For more information about this future deprecation, see L<the relevant RT
ticket|https://rt.perl.org/rt3/Ticket/Display.html?id=96212>.

=end original

この将来の非推奨に関するさらなる情報については、
L<関連する RT チケット|https://rt.perl.org/rt3/Ticket/Display.html?id=96212> を
参照してください。

=item *

sfio, stdio

=begin original

Perl supports being built without PerlIO proper, using a stdio or sfio
wrapper instead.  A perl build like this will not support IO layers and
thus Unicode IO, making it rather handicapped.

=end original

Perl は、PerlIO 層なしで、stdio や sfio ラッパーを代わりに使って
ビルドすることにも対応しています。
このような perl ビルドは will not support IO layers and
thus Unicode IO, making it rather handicapped.
(TBT)

=begin original

PerlIO supports a C<stdio> layer if stdio use is desired, and similarly a
sfio layer could be produced. 

=end original

PerlIO は、stdio を使いたいなら C<stdio> に対応していて、同様に sfio 層も
作成されるかもしれません。

=item *

=begin original

Unescaped literal C<< "{" >> in regular expressions.

=end original

正規表現中のエスケープされていないリテラルの C<< "{" >>。

=begin original

It is planned starting in v5.20 to require a literal C<"{"> to be
escaped by, for example, preceding it with a backslash.  In v5.18, a
deprecated warning message will be emitted for all such uses.  Note that
this only affects patterns which are to match a literal C<"{">.  Other
uses of this character, such as part of a quantifier or sequence like in
the ones below are completely unaffected:

=end original

v5.20 から、リテラルの C<"{"> は、例えばバックスラッシュを前置することで、
エスケープする必要があるようにすることが計画されています。
v5.18 では、このような使用全てで警告が出力されます。
これはリテラルな C<"{"> にマッチングするパターンにのみ影響を与えることに
注意してください。
量指定子の一部や、以下のシーケンスのような、その他のこの文字の使用には
全く影響を与えません:

    /foo{3,5}/
    /\p{Alphabetic}/
    /\N{DIGIT ZERO}

=begin original

The removal of this will allow extensions to pattern syntax, and better
error checking of existing syntax.  See L<perlre/Quantifiers> for an
example.

=end original

この除去によって、パターン文法の拡張や、既にある文法のよりよいエラーチェックが
可能になります。
例については L<perlre/Quantifiers> を参照してください。

=item *

=begin original

Revamping C<< "\Q" >> semantics in double-quotish strings when combined with other escapes

=end original

ダブルクォート風の文字列の中で他のエスケープシーケンスと組み合わされたときの C<< "\Q" >> の意味論の刷新

=begin original

There are a number of bugs and inconsistencies involving combinations
of C<\Q> and  excapes like C<\x>, C<\L>, etc., within a C<\Q...\E> pair.
These need to be fixed, and doing so will necessarily change current
behavior.  The changes have not yet been settled.

=end original

There are a number of bugs and inconsistencies involving combinations
of C<\Q> and  excapes like C<\x>, C<\L>, etc., within a C<\Q...\E> pair.
These need to be fixed, and doing so will necessarily change current
behavior.
この変更はまだ安定していません。
(TBT)

=back

=head1 Incompatible Changes

(互換性のない変更)

=head2 Special blocks called in void context

(特殊ブロックは無効コンテキストで呼び出されるように)

=begin original

Special blocks (C<BEGIN>, C<CHECK>, C<INIT>, C<UNITCHECK>, C<END>) are now
called in void context.  This avoids wasteful copying of the result of the
last statement [perl #108794].

=end original

特殊ブロック (C<BEGIN>, C<CHECK>, C<INIT>, C<UNITCHECK>, C<END>) は
無効コンテキストで呼び出されるようになりました。。
これにより、最後の行の結果を無駄にコピーすることを防げます [perl #108794]。

=head2 The C<overloading> pragma and regexp objects

(C<overloading> プラグマと正規表現オブジェクト)

=begin original

With C<no overloading>, regular expression objects returned by C<qr//> are
now stringified as "Regexp=REGEXP(0xbe600d)" instead of the regular
expression itself [perl #108780].

=end original

C<no overloading> のとき、 C<qr//> によって返される正規表現オブジェクトは
正規表現自体ではなく、"Regexp=REGEXP(0xbe600d)" として
文字列化されるようになりました。

=head2 Two XS typemap Entries removed

(二つの XS typemap エントリを削除)

=begin original

Two presumably unused XS typemap entries have been removed from the
core typemap: T_DATAUNIT and T_CALLBACK.  If you are, against all odds,
a user of these, please see the instructions on how to restore them
in L<perlxstypemap>.

=end original

おそらく使われていない二つの XS typemap エントリ(T_DATAUNIT と T_CALLBACK)が
コア typemap から削除されました。
もしあなたが、あらゆる予想を覆して、これらを使っているなら、
これらを復活させる方法を記してある L<perlxstypemap> を参照してください。

=head2 Unicode 6.1 has incompatibilities with Unicode 6.0

(Unicode 6.1 は Unicode 6.0 と互換性がない)

=begin original

These are detailed in L</Supports (almost) Unicode 6.1> above.
You can compile this version of Perl to use Unicode 6.0.  See
L<perlunicode/Hacking Perl to work on earlier Unicode versions (for very serious hackers only)>.

=end original

この詳細は上述の L</Supports (almost) Unicode 6.1> にあります。
このバージョンの Perl を Unicode 6.0 を使ってコンパイルすることも出来ます。
L<perlunicode/Hacking Perl to work on earlier Unicode versions (for very serious hackers only)> を
参照してください。

=head2 Borland compiler

(Borland コンパイラ)

=begin original

All support for the Borland compiler has been dropped.  The code had not
worked for a long time anyway.

=end original

Borland コンパイラ対応が全て削除されました。
どちらにしろコードは長い間動作していませんでした。

=head2 Certain deprecated Unicode properties are no longer supported by default

(いくつかの非推奨の Unicode 特性がデフォルトではサポート外に)

=begin original

Perl should never have exposed certain Unicode properties that are used
by Unicode internally and not meant to be publicly available.  Use of
these has generated deprecated warning messages since Perl 5.12.  The
removed properties are Other_Alphabetic,
Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, and
Other_Uppercase.

=end original

Perl は、Unicode が内部で使って公開するつもりがないいくつかの Unicode 特性を
暴露するべきではありません。
Perl 5.12 以降これらを使うと警告が出力されていました。
削除された特性は、Other_Alphabetic,
Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, 
Other_Uppercase です。

=begin original

Perl may be recompiled to include any or all of them; instructions are
given in
L<perluniprops/Unicode character properties that are NOT accepted by Perl>.

=end original

これらの一部または全部を含む形で Perl を再コンパイルすることもできます;
手順は
L<perluniprops/Unicode character properties that are NOT accepted by Perl> に
あります。

=head2 Dereferencing IO thingies as typeglobs

(IO 系のものを型グロブとしてデリファレンス)

=begin original

The C<*{...}> operator, when passed a reference to an IO thingy (as in
C<*{*STDIN{IO}}>), creates a new typeglob containing just that IO object.
Previously, it would stringify as an empty string, but some operators would
treat it as undefined, producing an "uninitialized" warning.
Now it stringifies as __ANONIO__ [perl #96326].

=end original

C<*{...}> 演算子は、(C<*{*STDIN{IO}}> のような) IO 系へのリファレンスを
渡すと、IO オブジェクト自体を含む新しい型グロブを作成します。
以前は、空文字列として文字列化していましたが、一部の演算子はこれを
未定義として扱い、"uninitialized" 警告を出力していました。
今では __ANONIO__ と文字列化されます [perl #96326]。

=head2 User-defined case changing operations

(ユーザー定義大文字変更操作)

=begin original

This feature was deprecated in Perl 5.14, and has now been removed.
The CPAN module L<Unicode::Casing> provides better functionality without
the drawbacks that this feature had, as are detailed in the 5.14
documentation:
L<http://perldoc.perl.org/5.14.0/perlunicode.html#User-Defined-Case-Mappings-%28for-serious-hackers-only%29>

=end original

この機能は Perl 5.14 で非推奨となり、今回削除されました。
CPAN モジュール L<Unicode::Casing> は、5.14 の文書に詳細に記されている通り、
この機能が持っていた欠点なしに、よりよい機能を提供します:
L<http://perldoc.perl.org/5.14.0/perlunicode.html#User-Defined-Case-Mappings-%28for-serious-hackers-only%29>

=head2 XSUBs are now 'static'

(XSUB は 'static' に)

=begin original

XSUB C functions are now 'static', that is, they are not visible from
outside the compilation unit.  Users can use the new C<XS_EXTERNAL(name)>
and C<XS_INTERNAL(name)> macros to pick the desired linking behaviour.
The ordinary C<XS(name)> declaration for XSUBs will continue to declare
non-'static' XSUBs for compatibility, but the XS compiler,
L<ExtUtils::ParseXS> (C<xsubpp>) will emit 'static' XSUBs by default.
L<ExtUtils::ParseXS>'s behaviour can be reconfigured from XS using the
C<EXPORT_XSUB_SYMBOLS> keyword.  See L<perlxs> for details.

=end original

XSUB C 関数は 'static' になりました; つまり、コンパイル単位の外側からは
見えなくなりました。
ユーザーは求めるリンクの振る舞いを得るために新しい
C<XS_EXTERNAL(name)> マクロと C<XS_INTERNAL(name)> マクロを使えます。
XSUB の通常の C<XS(name)> 宣言は互換性のために非 'static' な XSUB を
宣言するままですが、XS コンパイラ L<ExtUtils::ParseXS> (C<xsubpp>) は
デフォルトでは 'static' XSUB を出力します。
L<ExtUtils::ParseXS> の振る舞いは C<EXPORT_XSUB_SYMBOLS> キーワードを
使った XS によって再設定できます。
詳しくは L<perlxs> を参照してください。

=head2 Weakening read-only references

(読み込み専用の参照を弱くする)

=begin original

Weakening read-only references is no longer permitted.  It should never
have worked anyway, and in some cases could result in crashes.

=end original

読み込み専用の参照を弱くすることはできなくなりました。
どちらにしても正しく動作しておらず、場合によってはクラッシュしていました。

=head2 Tying scalars that hold typeglobs

(型グロブを保持しているスカラの tie)

=begin original

Attempting to tie a scalar after a typeglob was assigned to it would
instead tie the handle in the typeglob's IO slot.  This meant that it was
impossible to tie the scalar itself.  Similar problems affected C<tied> and
C<untie>: C<tied $scalar> would return false on a tied scalar if the last
thing returned was a typeglob, and C<untie $scalar> on such a tied scalar
would do nothing.

=end original

型グロブを代入された後のスカラを tie しようとすると、代わりに型グロブの
IO スロットにあるハンドルが tie されます。
これは、スカラ自身を tie することが不可能になると言うことを意味します。
似たような問題は C<tied> と C<untie> に影響を与えます: C<tied $scalar> は
最後に返されたものが型グロブの場合は tie されたスカラに偽を返し、
そのような tie されたスカラに C<untie $scalar> しても何も起きません。

=begin original

We fixed this problem before Perl 5.14.0, but it caused problems with some
CPAN modules, so we put in a deprecation cycle instead.

=end original

私たちはこの問題を Perl 5.14.0 の前に修正しましたが、これは一部の
CPAN モジュールに問題を引き起こすので、代わりに
非推奨サイクルに入れることにしました。

=begin original

Now the deprecation has been removed and this bug has been fixed.  So
C<tie $scalar> will always tie the scalar, not the handle it holds.  To tie
the handle, use C<tie *$scalar> (with an explicit asterisk).  The same
applies to C<tied *$scalar> and C<untie *$scalar>.

=end original

今回非推奨は削除され、バグは修正されました。
それで C<tie $scalar> は、スカラが保存しているハンドルではなく、スカラ自身を
tie します。
ハンドルを tie するには、C<tie *$scalar> を(明示的なアスタリスク付きで)
使ってください。
同じ内容は C<tied *$scalar> と C<untie *$scalar> にも適用されます。

=head2 IPC::Open3 no longer provides C<xfork()>, C<xclose_on_exec()>
and C<xpipe_anon()>

(IPC::Open3 は C<xfork()>, C<xclose_on_exec()>, C<xpipe_anon()> を提供しません)

=begin original

All three functions were private, undocumented and unexported.  They do
not appear to be used by any code on CPAN.  Two have been inlined and one
deleted entirely.

=end original

これら三つの関数はプライベートなもので文書化されておらずエクスポートも
されていません。
これらは CPAN のどのコードからも使われていません。
二つはインライン化され、一つは完全に削除されました。

=head2 C<$$> no longer caches PID

(C<$$> は PID をキャッシュしません)

=begin original

Previously, if one called fork(3) from C, Perl's
notion of C<$$> could go out of sync with what getpid() returns.  By always
fetching the value of C<$$> via getpid(), this potential bug is eliminated.
Code that depends on the caching behavior will break.  As described in
L<Core Enhancements|/C<$$> can be assigned to>,
C<$$> is now writable, but it will be reset during a
fork.

=end original

以前は、C から fork(3) を呼び出すと、Perl の C<$$> の概念は getpid() が
返すものと同期しなくなることがありました。
常に getpid() 経由で C<$$> の値を取得することで、この潜在的なバグは
修正されました。
キャッシュする振る舞いに依存しているコードは動かなくなります。
L<Core Enhancements|/C<$$> can be assigned to> で記述したように、
C<$$> は書き込み可能になりましたが、fork 中はリセットされます。

=head2 C<$$> and C<getppid()> no longer emulate POSIX semantics under LinuxThreads

(C<$$> と C<getppid()> は LinuxThreads のもとで POSIX の意味論をエミュレートしません)

=begin original

The POSIX emulation of C<$$> and C<getppid()> under the obsolete
LinuxThreads implementation has been removed.
This only impacts users of Linux 2.4 and
users of Debian GNU/kFreeBSD up to and including 6.0, not the vast
majority of Linux installations that use NPTL threads.

=end original

古い LinuxThreads 実装のもとでの C<$$> と C<getppid()> の POSIX
エミュレーションは削除されました。
これは Linux 2.4 のユーザーとバージョン 6.0 までの Debian GNU/kFreeBSD の
ユーザーにのみ影響があり、NPTL スレッドを使っている圧倒的多数の
Linux インストールには影響はありません。

=begin original

This means that C<getppid()>, like C<$$>, is now always guaranteed to
return the OS's idea of the current state of the process, not perl's
cached version of it.

=end original

これは、C<getppid()> は C<$$> と同様に、perl がキャッシュしたものではなく
OS が考えているプロセスの現在の状態を常に返すと言うことを意味まします。

=begin original

See the documentation for L<$$|perlvar/$$> for details.

=end original

詳しくは L<$$|perlvar/$$> の文書を参照してください。

=head2 C<< $< >>, C<< $> >>, C<$(> and C<$)> are no longer cached

(C<< $< >>, C<< $> >>, C<$(>, C<$)> はキャッシュされません)

=begin original

Similarly to the changes to C<$$> and C<getppid()>, the internal
caching of C<< $< >>, C<< $> >>, C<$(> and C<$)> has been removed.

=end original

C<$$> および C<getppid()> の変更と同様に C<< $< >>, C<< $> >>, C<$(>,
C<$)> の内部キャッシュも削除されました。

=begin original

When we cached these values our idea of what they were would drift out
of sync with reality if someone (e.g., someone embedding perl) called
C<sete?[ug]id()> without updating C<PL_e?[ug]id>.  Having to deal with
this complexity wasn't worth it given how cheap the C<gete?[ug]id()>
system call is.

=end original

When we cached these values our idea of what they were would drift out
of sync with reality if someone (e.g., someone embedding perl) called
C<sete?[ug]id()> without updating C<PL_e?[ug]id>.
この複雑性は C<gete?[ug]id()> の呼び出しコストの低さを考えると割に
合いませんでした。
(TBT)

=begin original

This change will break a handful of CPAN modules that use the XS-level
C<PL_uid>, C<PL_gid>, C<PL_euid> or C<PL_egid> variables.

=end original

この変更により XS レベルの C<PL_uid>, C<PL_gid>, C<PL_euid>,
C<PL_egid> 変数を使っている一握りの CPAN モジュールが動かなくなります。

=begin original

The fix for those breakages is to use C<PerlProc_gete?[ug]id()> to
retrieve them (e.g. C<PerlProc_getuid()>), and not to assign to
C<PL_e?[ug]id> if you change the UID/GID/EUID/EGID.  There is no longer
any need to do so since perl will always retrieve the up-to-date
version of those values from the OS.

=end original

これを修正するには、値を得るのに (C<PerlProc_getuid()> のような)
C<PerlProc_gete?[ug]id()> を使って、もし UID/GID/EUID/EGID を変更するなら
C<PL_e?[ug]id> に代入しないことです。
perl はこれらの値を常に OS から最新の値を取るようになったので、
このようにする必要性はなくなっています。

=head2 Which Non-ASCII characters get quoted by C<quotemeta> and C<\Q> has changed

(C<quotemeta> と C<\Q> でクォートされる非 ASCII 文字の変更)

=begin original

This is unlikely to result in a real problem, as Perl does not attach
special meaning to any non-ASCII character, so it is currently
irrelevant which are quoted or not.  This change fixes bug [perl #77654] and
bring Perl's behavior more into line with Unicode's recommendations.
See L<perlfunc/quotemeta>.

=end original

Perl は非 ASCII 文字に特別な意味を割り振っていないために、これが実際の
問題になるとは考えにくいので、今のところクォートされているかどうかは
無関係です。
この変更は [perl #77654] のバグを修正して、Perl の振る舞いを Unicode の
要求により近いものにします。
L<perlfunc/quotemeta> を参照してください。

=head1 Performance Enhancements

(性能改善)

=over

=item *

=begin original

Improved performance for Unicode properties in regular expressions

=end original

正規表現中の Unicode 特性の性能改善

=for comment Can this be compacted some? -- rjbs, 2012-02-20

=begin original

Matching a code point against a Unicode property is now done via a
binary search instead of linear.  This means for example that the worst
case for a 1000 item property is 10 probes instead of 1000.  This
inefficiency has been compensated for in the past by permanently storing
in a hash the results of a given probe plus the results for the adjacent
64 code points, under the theory that near-by code points are likely to
be searched for.  A separate hash was used for each mention of a Unicode
property in each regular expression.  Thus, C<qr/\p{foo}abc\p{foo}/>
would generate two hashes.  Any probes in one instance would be unknown
to the other, and the hashes could expand separately to be quite large
if the regular expression were used on many different widely-separated
code points.
Now, however, there is just one hash shared by all instances of a given
property.  This means that if C<\p{foo}> is matched against "A" in one
regular expression in a thread, the result will be known immediately to
all regular expressions, and the relentless march of using up memory is
slowed considerably.

=end original

Matching a code point against a Unicode property is now done via a
binary search instead of linear.  This means for example that the worst
case for a 1000 item property is 10 probes instead of 1000.  This
inefficiency has been compensated for in the past by permanently storing
in a hash the results of a given probe plus the results for the adjacent
64 code points, under the theory that near-by code points are likely to
be searched for.  A separate hash was used for each mention of a Unicode
property in each regular expression.  Thus, C<qr/\p{foo}abc\p{foo}/>
would generate two hashes.  Any probes in one instance would be unknown
to the other, and the hashes could expand separately to be quite large
if the regular expression were used on many different widely-separated
code points.
Now, however, there is just one hash shared by all instances of a given
property.  This means that if C<\p{foo}> is matched against "A" in one
regular expression in a thread, the result will be known immediately to
all regular expressions, and the relentless march of using up memory is
slowed considerably.
(TBT)

=item *

=begin original

Version declarations with the C<use> keyword (e.g., C<use 5.012>) are now
faster, as they enable features without loading F<feature.pm>.

=end original

(C<use 5.012> のような)C<use> キーワードのバージョン宣言は、
F<feature.pm> を読み込むことなく機能を有効にするので、より
速くなりました。

=item *

=begin original

C<local $_> is faster now, as it no longer iterates through magic that it
is not going to copy anyway.

=end original

結局コピーされないマジックを反復しなくなったので、C<local $_> は
早くなりました。

=item *

=begin original

Perl 5.12.0 sped up the destruction of objects whose classes define
empty C<DESTROY> methods (to prevent autoloading), by simply not
calling such empty methods.  This release takes this optimisation a
step further, by not calling any C<DESTROY> method that begins with a
C<return> statement.  This can be useful for destructors that are only
used for debugging:

=end original

Perl 5.12.0 は(オートロードを防ぐために) 空の C<DESTROY> メソッドを
定義しているクラスのオブジェクトを破壊するときに、単にそのような
空メソッドを呼ばないようにすることで高速化しました。
このリリースはこの最適化をさらに進めて、C<return> 文で始まる
全ての C<DESTROY> メソッドを呼び出さなくなりました。
これはデストラクタがデバッグのためだけに使われている場合に有用です:

    use constant DEBUG => 1;
    sub DESTROY { return unless DEBUG; ... }

=begin original

Constant-folding will reduce the first statement to C<return;> if DEBUG
is set to 0, triggering this optimisation.

=end original

DEBUG が 0 にセットされ、最適化が有効になっているなら、
定数の畳み込みが C<return;> への最初の文に制限されるようになります。

=item *

=begin original

Assigning to a variable that holds a typeglob or copy-on-write scalar
is now much faster.  Previously the typeglob would be stringified or
the copy-on-write scalar would be copied before being clobbered.

=end original

型グロブを補完している変数やコピーオンライトスカラ変数への代入は
とても速くなりました。
以前は型グロブは文字列化され、、コピーオンライトスカラ変数は上書きされる
前にコピーされていました。

=item *

=begin original

Assignment to C<substr> in void context is now more than twice its
previous speed.  Instead of creating and returning a special lvalue
scalar that is then assigned to, C<substr> modifies the original string
itself.

=end original

無効コンテキストでの C<substr> への代入は以前より倍以上速くなりました。
後で代入される特殊左辺値を作って返すのではなく、C<substr> 自身が
元の文字列を変更します。

=item *

=begin original

C<substr> no longer calculates a value to return when called in void
context.

=end original

C<substr> は、無効コンテキストで呼び出された場合は返す値を
計算しなくなりました。

=item *

=begin original

Due to changes in L<File::Glob>, Perl's C<glob> function and its C<<
<...> >> equivalent are now much faster.  The splitting of the pattern
into words has been rewritten in C, resulting in speed-ups of 20% in
some cases.

=end original

L<File::Glob> の変更により、Perl の C<glob> 関数および、等価な
C<< <...> >> はとても速くなりました。
パターンから単語への分割は C で書き直されたので、場合によっては 20%
高速化しました。

=begin original

This does not affect C<glob> on VMS, as it does not use File::Glob.

=end original

これは VMS の C<glob> には影響を与えません; File::Glob を
使わないからです。

=item *

=begin original

The short-circuiting operators C<&&>, C<||>, and C<//>, when chained
(such as C<$a || $b || $c>), are now considerably faster to short-circuit,
due to reduced optree traversal.

=end original

短絡演算子 C<&&>, C<||>, and C<//> は (C<$a || $b || $c> のように)
連結されたとき、大幅に速くなりました; 構文木をたどる量が減少したからです。

=item *

=begin original

The implementation of C<s///r> makes one fewer copy of the scalar's value.

=end original

C<s///r> の実装のスカラ値のコピーが一回減りました。

=item *

=begin original

Recursive calls to lvalue subroutines in lvalue scalar context use less
memory.

=end original

左辺値スカラコンテキストでの左辺サブルーチンの再帰呼び出しのメモリ消費が
少なくなりました。

=back

=head1 Modules and Pragmata

(モジュールとプラグマ)

=head2 Deprecated Modules

(非推奨のモジュール)

=over

=item L<Version::Requirements>

=begin original

Version::Requirements is now DEPRECATED, use L<CPAN::Meta::Requirements>,
which is a drop-in replacement.  It will be deleted from perl.git blead
in v5.17.0.

=end original

Version::Requirements は非推奨となりました; 差し込み式の代替品である
L<CPAN::Meta::Requirements> を使ってください。
これは v5.17.0 の perl.git blead で削除されます。

=back

=head2 New Modules and Pragmata

(新しいモジュールとプラグマ)

=over 4

=item *

=begin original

L<arybase> -- this new module implements the C<$[> variable.

=end original

L<arybase> -- これは C<$[> 変数を実装する新しいモジュールです。

=item *

=begin original

L<PerlIO::mmap> 0.010 has been added to the Perl core.

=end original

L<PerlIO::mmap> 0.010 が Perl コアに追加されました。

=begin original

The C<mmap> PerlIO layer is no longer implemented by perl itself, but has
been moved out into the new L<PerlIO::mmap> module.

=end original

C<mmap> PerlIO 層は perl 自身では実装されなくなり、新しい
L<PerlIO::mmap> モジュールに外出しされました。

=back

=head2 Updated Modules and Pragmata

(更新されたモジュールとプラグマ)

=begin original

This is only an overview of selected module updates.  For a complete list of
updates, run:

=end original

これは一部のモジュール更新の概要です。
更新の完全な一覧を見るには、以下を実行してください:

    $ corelist --diff 5.14.0 5.16.0

=begin original

You can substitute your favorite version in place of 5.14.0, too.

=end original

5.14.0 の部分は好みのバージョンに置き換えることもできます。

=over 4

=item *

=begin original

L<Archive::Extract> has been upgraded from version 0.48 to 0.58.

=end original

L<Archive::Extract> はバージョン 0.48 から 0.58 に更新されました。

=begin original

Includes a fix for FreeBSD to only use C<unzip> if it is located in
C</usr/local/bin>, as FreeBSD 9.0 will ship with a limited C<unzip> in
C</usr/bin>.

=end original

FreeBSD 9.0 は C</usr/bin> に制限された C<unzip> を入れて出荷されるので、
FreeBSD では C</usr/local/bin> にある C<unzip> 岳を使うようにする修正を
含みます。

=item *

=begin original

L<Archive::Tar> has been upgraded from version 1.76 to 1.82.

=end original

L<Archive::Tar> はバージョン 1.76 から 1.82 に更新されました。

=begin original

Adjustments to handle files >8gb (>0777777777777 octal) and a feature
to return the MD5SUM of files in the archive.

=end original

8GB (8 進数で 0777777777777 バイト以上) のファイルの扱いが調整され、
アーカイブ中のファイルの MD5SUM を返す機能が追加されました。

=item *

=begin original

L<base> has been upgraded from version 2.16 to 2.18.

=end original

L<base> はバージョン 2.16 から 2.18 に更新されました。

=begin original

C<base> no longer sets a module's C<$VERSION> to "-1" when a module it
loads does not define a C<$VERSION>.  This change has been made because
"-1" is not a valid version number under the new "lax" criteria used
internally by C<UNIVERSAL::VERSION>.  (See L<version> for more on "lax"
version criteria.)

=end original


=begin original

C<base> no longer internally skips loading modules it has already loaded
and instead relies on C<require> to inspect C<%INC>.  This fixes a bug
when C<base> is used with code that clear C<%INC> to force a module to
be reloaded.

=end original

C<base> はもはや既に読み込んだモジュールを内部で読み飛ばさず、代わりに
C<%INC> を調べる C<require> に依存します。
これは、C<base> が、モジュールの再読み込みを強制するために C<%INC> を
クリアするコードで使われたときのバグを修正します。

=item *

=begin original

L<Carp> has been upgraded from version 1.20 to 1.26.

=end original

L<Carp> はバージョン 1.20 から 1.26 に更新されました。

=begin original

It now includes last read filehandle info and puts a dot after the file
and line number, just like errors from C<die> [perl #106538].

=end original

C<die> からのエラーと同様に、読み込んだファイルハンドルを含むようになり、
ファイルと行番号の後にドットを出力するようになりました [perl #106538]。

=item *

=begin original

L<charnames> has been updated from version 1.18 to 1.30.

=end original

L<charnames> はバージョン 1.18 から 1.30 に更新されました。

=begin original

L<charnames> can now be invoked with a new option, C<:loose>,
which is like the existing C<:full> option, but enables Unicode loose
name matching.  Details are in L<charnames/LOOSE MATCHES>.

=end original

L<charnames> can now be invoked with a new option, C<:loose>,
which is like the existing C<:full> option, but enables Unicode loose
name matching.  Details are in L<charnames/LOOSE MATCHES>.
(TBT)

=item *

=begin original

L<B::Deparse> has been upgraded from version 1.03 to 1.14.  This fixes
numerous deparsing bugs.

=end original

L<B::Deparse> はバージョン 1.03 から 1.14 に更新されました。
これは多くの逆パースバグを修正します。

=item *

=begin original

L<CGI> has been upgraded from version 3.52 to 3.59.

=end original

L<CGI> はバージョン 3.52 から 3.59 に更新されました。

=begin original

It uses the public and documented FCGI.pm API in CGI::Fast.  CGI::Fast was
using an FCGI API that was deprecated and removed from documentation
more than ten years ago.  Usage of this deprecated API with FCGI E<gt>=
0.70 or FCGI E<lt>= 0.73 introduces a security issue.
L<https://rt.cpan.org/Public/Bug/Display.html?id=68380>
L<http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2766>

=end original

It uses the public and documented FCGI.pm API in CGI::Fast.  CGI::Fast was
using an FCGI API that was deprecated and removed from documentation
more than ten years ago.  Usage of this deprecated API with FCGI E<gt>=
0.70 or FCGI E<lt>= 0.73 introduces a security issue.
L<https://rt.cpan.org/Public/Bug/Display.html?id=68380>
L<http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2766>
(TBT)

=begin original

Things that may break your code:

=end original

Things that may break your code:
(TBT)

=begin original

C<url()> was fixed to return C<PATH_INFO> when it is explicitly requested
with either the C<path=E<gt>1> or C<path_info=E<gt>1> flag.

=end original

C<url()> was fixed to return C<PATH_INFO> when it is explicitly requested
with either the C<path=E<gt>1> or C<path_info=E<gt>1> flag.
(TBT)

=begin original

If your code is running under mod_rewrite (or compatible) and you are
calling C<self_url()> or you are calling C<url()> and passing
C<path_info=E<gt>1>, these methods will actually be returning
C<PATH_INFO> now, as you have explicitly requested or C<self_url()>
has requested on your behalf.

=end original

If your code is running under mod_rewrite (or compatible) and you are
calling C<self_url()> or you are calling C<url()> and passing
C<path_info=E<gt>1>, these methods will actually be returning
C<PATH_INFO> now, as you have explicitly requested or C<self_url()>
has requested on your behalf.
(TBT)

=begin original

The C<PATH_INFO> has been omitted in such URLs since the issue was
introduced in the 3.12 release in December, 2005.

=end original

The C<PATH_INFO> has been omitted in such URLs since the issue was
introduced in the 3.12 release in December, 2005.
(TBT)

=begin original

This bug is so old your application may have come to depend on it or
workaround it. Check for application before upgrading to this release.

=end original

This bug is so old your application may have come to depend on it or
workaround it. Check for application before upgrading to this release.
(TBT)

=begin original

Examples of affected method calls:

=end original

影響を受けるメソッド呼び出しの例:

  $q->url(-absolute => 1, -query => 1, -path_info => 1);
  $q->url(-path=>1);
  $q->url(-full=>1,-path=>1);
  $q->url(-rewrite=>1,-path=>1);
  $q->self_url();

=begin original

We no longer read from STDIN when the Content-Length is not set,
preventing requests with no Content-Length from freezing in some cases.
This is consistent with the CGI RFC 3875, and is also consistent with
CGI::Simple.  However, the old behavior may have been expected by some
command-line uses of CGI.pm.

=end original

We no longer read from STDIN when the Content-Length is not set,
preventing requests with no Content-Length from freezing in some cases.
This is consistent with the CGI RFC 3875, and is also consistent with
CGI::Simple.  However, the old behavior may have been expected by some
command-line uses of CGI.pm.
(TBT)

=begin original

In addition, the DELETE HTTP verb is now supported.

=end original

さらに、DELETE HTTP 動詞に対応しました。

=item *

=begin original

L<Compress::Zlib> has been upgraded from version 2.035 to 2.048.

=end original

L<Compress::Zlib> はバージョン 2.035 から 2.048 に更新されました。

=begin original

IO::Compress::Zip and IO::Uncompress::Unzip now have support for LZMA
(method 14).  There is a fix for a CRC issue in IO::Compress::Unzip and
it supports Streamed Stored context now.  And fixed a Zip64 issue in
IO::Compress::Zip when the content size was exactly 0xFFFFFFFF.

=end original

IO::Compress::Zip and IO::Uncompress::Unzip now have support for LZMA
(method 14).  There is a fix for a CRC issue in IO::Compress::Unzip and
it supports Streamed Stored context now.  And fixed a Zip64 issue in
IO::Compress::Zip when the content size was exactly 0xFFFFFFFF.
(TBT)

=item *

=begin original

L<Digest::SHA> has been upgraded from version 5.61 to 5.71.

=end original

L<Digest::SHA> はバージョン 5.61 から 5.71 に更新されました。

=begin original

Added BITS mode to the addfile method and shasum.  This makes
partial-byte inputs possible via files/STDIN and allows shasum to check
all 8074 NIST Msg vectors, where previously special programming was
required to do this.

=end original

Added BITS mode to the addfile method and shasum.  This makes
partial-byte inputs possible via files/STDIN and allows shasum to check
all 8074 NIST Msg vectors, where previously special programming was
required to do this.
(TBT)

=item *

=begin original

L<Encode> has been upgraded from version 2.42 to 2.44.

=end original

L<Encode> はバージョン 2.42 から 2.44 に更新されました。

=begin original

Missing aliases added, a deep recursion error fixed and various
documentation updates.

=end original

不足していた別名が追加され、深い再帰エラーが修正され、様々な文書が
更新されました。

=begin original

Addressed 'decode_xs n-byte heap-overflow' security bug in Unicode.xs
(CVE-2011-2939). (5.14.2)

=end original

Unicode.xs の 'decode_xs n-byte heap-overflow' セキュリティバグ
(CVE-2011-2939) が対処されました。(5.14.2)

=item *

=begin original

L<ExtUtils::CBuilder> updated from version 0.280203 to 0.280206.

=end original

L<ExtUtils::CBuilder> はバージョン 0.280203 から 0.280206 に更新されました。

=begin original

The new version appends CFLAGS and LDFLAGS to their Config.pm
counterparts.

=end original

新しいバージョンは Config.pm のものと対になる CFLAGS と LDFLAGS が
追加されました。

=item *

=begin original

L<ExtUtils::ParseXS> has been upgraded from version 2.2210 to 3.16.

=end original

L<ExtUtils::ParseXS> はバージョン 2.2210 から 3.16 に更新されました。

=begin original

Much of L<ExtUtils::ParseXS>, the module behind the XS compiler C<xsubpp>,
was rewritten and cleaned up.  It has been made somewhat more extensible
and now finally uses strictures.

=end original

Much of L<ExtUtils::ParseXS>, the module behind the XS compiler C<xsubpp>,
was rewritten and cleaned up.  It has been made somewhat more extensible
and now finally uses strictures.
(TBT)

=begin original

The typemap logic has been moved into a separate module,
L<ExtUtils::Typemaps>.  See L</New Modules and Pragmata>, above.

=end original

typemap ロジックは別のモジュール L<ExtUtils::Typemaps> に移動しました。
上述の L</New Modules and Pragmata> を参照してください。

=begin original

For a complete set of changes, please see the ExtUtils::ParseXS
changelog, available on the CPAN.

=end original

変更の完全な一覧は、CPAN で利用可能な ExtUtils::ParseXS
changelog を参照してください。

=item *

=begin original

L<File::Glob> has been upgraded from version 1.12 to 1.17.

=end original

L<File::Glob> はバージョン 1.12 から 1.17 に更新されました。

=begin original

On Windows, tilde (~) expansion now checks the C<USERPROFILE> environment
variable, after checking C<HOME>.

=end original

Windows では、チルダ (~) 拡張は C<HOME> のチェックの後
C<USERPROFILE> 環境変数をチェックするようになりました。

=begin original

It has a new C<:bsd_glob> export tag, intended to replace C<:glob>.  Like
C<:glob> it overrides C<glob> with a function that does not split the glob
pattern into words, but, unlike C<:glob>, it iterates properly in scalar
context, instead of returning the last file.

=end original

C<:glob> の置き換えを意図した新しい C<:bsd_glob> エクスポートタグが
追加されました。
C<:glob> と同様、これは overrides C<glob> with a function that does not split the glob
pattern into words, but, unlike C<:glob>, it iterates properly in scalar
context, instead of returning the last file.
(TBT)

=begin original

There are other changes affecting Perl's own C<glob> operator (which uses
File::Glob internally, except on VMS).  See L</Performance Enhancements>
and L</Selected Bug Fixes>.

=end original

(VMS 以外では File::Glob が内部で使用している) Perl 自身の C<glob> 演算子に
影響を与えるその他の変更があります。
L</Performance Enhancements> と L</Selected Bug Fixes> を参照してください。

=item *

=begin original

L<FindBin> updated from version 1.50 to 1.51.

=end original

L<FindBin> はバージョン 1.50 から 1.51 に更新されました。

=begin original

It no longer returns a wrong result if a script of the same name as the
current one exists in the path and is executable.

=end original

現在のものと同じ名前のスクリプトがパス上に実行ファイルとしてあっても
誤った結果を返さないようになりました。

=item *

=begin original

L<HTTP::Tiny> has been upgraded from version 0.012 to 0.017.

=end original

L<HTTP::Tiny> はバージョン 0.012 から 0.017 に更新されました。

=begin original

Added support for using C<$ENV{http_proxy}> to set the default proxy host.

=end original

デフォルトプロキシホストを設定するための C<$ENV{http_proxy}> の利用の
対応が追加されました。

=begin original

Adds additional shorthand methods for all common HTTP verbs,
a C<post_form()> method for POST-ing x-www-form-urlencoded data and
a C<www_form_urlencode()> utility method.

=end original

全ての一般的な HTTP 動詞のための短縮形メソッド、
x-www-form-urlencoded データを POST するためのC<post_form()>、
C<www_form_urlencode()> ユーティリティメソッドが追加されました。

=item *

=begin original

L<IO> has been upgraded from version 1.25_04 to 1.25_06, and L<IO::Handle>
from version 1.31 to 1.33.

=end original

L<IO> はバージョン 1.25_04 から 1.25_06 に、L<IO::Handle> は
バージョン 1.31 から 1.33 に更新されました。

=begin original

Together, these upgrades fix a problem with IO::Handle's C<getline> and
C<getlines> methods.  When these methods are called on the special ARGV
handle, the next file is automatically opened, as happens with the built-in
C<E<lt>E<gt>> and C<readline> functions.  But, unlike the built-ins, these
methods were not respecting the caller's use of the L<open> pragma and
applying the approprate I/O layers to the newly-opened file
[rt.cpan.org #66474].

=end original

Together, these upgrades fix a problem with IO::Handle's C<getline> and
C<getlines> methods.
これらのメソッドが特殊 ARGV ハンドルで呼び出されると、組み込みの
C<E<lt>E<gt>> および C<readline> 関数と同様に、次のファイルが自動的に
開かれます。
しかし、組み込み関数と違って、これらのメソッドは呼び出し側の
L<open> プラグマの使用に影響を受けず、新しく開かれたファイルに適切な
I/O 層を提供します [rt.cpan.org #66474]。
(TBT)

=item *

=begin original

L<IPC::Cmd> has been upgraded from version 0.70 to 0.76.

=end original

L<IPC::Cmd> はバージョン 0.70 から 0.76 に更新されました。

=begin original

Capturing of command output (both C<STDOUT> and C<STDERR>) is now supported
using L<IPC::Open3> on MSWin32 without requiring L<IPC::Run>.

=end original

コマンド出力 (C<STDOUT> と C<STDERR> の両方) の捕捉は、MSWin32 では
L<IPC::Run> を要求することなく L<IPC::Open3> を使うことに対応しました。

=item *

=begin original

L<IPC::Open3> has been upgraded from version 1.09 to 1.12.

=end original

L<IPC::Open3> はバージョン 1.09 から 1.12 に更新されました。

=over 4

=item *

=begin original

Fixes a bug which prevented use of C<open3> on Windows when C<*STDIN>,
C<*STDOUT> or C<*STDERR> had been localized.

=end original

C<*STDIN>, C<*STDOUT>, C<*STDERR> がローカル化されているときに、
Windows で C<open3> が使えないバグが修正されました。

=item *

=begin original

Fixes a bug which prevented duplicating numeric file descriptors on Windows.

=end original

Windows で数値ファイル記述子の複製が出来ないバグが修正されました。

=item *

=begin original

C<open3> with "-" for the program name works once more.  This was broken in
version 1.06 (and hence in Perl 5.14.0) [perl #95748].

=end original

C<open3> でのプログラム名としての "-" が再び動作するようになりました。
これはバージョン 1.06 (従って Perl 5.14.0) で壊れていました [perl #95748]。

=back

=item *

=begin original

L<Locale::Codes> has been upgraded from version 3.16 to 3.21.

=end original

L<Locale::Codes> はバージョン 3.16 から 3.21 に更新されました。

=begin original

Added Language Extension codes (langext) and Language Variation codes (langvar)
as defined in the IANA language registry.

=end original

IANA 言語レジストリで定義されている言語拡張コード (langext) と
言語変化コード (langvar) が追加されました。

=begin original

Added language codes from ISO 639-5

=end original

ISO 639-5 から言語コードが追加されました。

=begin original

Added language/script codes from the IANA language subtag registry

=end original

IANA 言語副タグレジストリから言語/用字コードが追加されました。

=begin original

Fixed an uninitialized value warning [rt.cpan.org #67438].

=end original

未定義字警告が修正されました [rt.cpan.org #67438]。

=begin original

Fixed the return value for the all_XXX_codes and all_XXX_names functions
[rt.cpan.org #69100].

=end original

all_XXX_codes 関数と all_XXX_names 関数の返り値が修正されました
[rt.cpan.org #69100]。

=begin original

Reorganized modules to move Locale::MODULE to Locale::Codes::MODULE to allow
for cleaner future additions.  The original four modules (Locale::Language,
Locale::Currency, Locale::Country, Locale::Script) will continue to work, but
all new sets of codes will be added in the Locale::Codes namespace.

=end original

よりクリーンに将来追加できるように Locale::MODULE から
Locale::Codes::MODULE に移動することで再構成されました。
元の四つのモジュール (Locale::Language, Locale::Currency, Locale::Country,
Locale::Script) はまだ動作しますが、新しいコードは Locale::Codes 名前空間に
追加されます。

=begin original

The code2XXX, XXX2code, all_XXX_codes, and all_XXX_names functions now
support retired codes.  All codesets may be specified by a constant or
by their name now.  Previously, they were specified only by a constant.

=end original

code2XXX, XXX2code, all_XXX_codes, all_XXX_names 関数は引退したコードに
対応するようになりました。
全てのコード集合は定数またはその名前で指定出来るようになりました。
以前は、定数でのみ指定していました。

=begin original

The alias_code function exists for backward compatibility.  It has been
replaced by rename_country_code.  The alias_code function will be
removed some time after September, 2013.

=end original

alias_code 関数は後方互換性のために存在しています。
これは rename_country_code に置き換えられました。
alias_code 関数は 2013 年 9 月以降のいずれかの時点で削除されます。

=begin original

All work is now done in the central module (Locale::Codes).  Previously,
some was still done in the wrapper modules (Locale::Codes::*).  Added
Language Family codes (langfam) as defined in ISO 639-5.

=end original

中心モジュール (Locale::Codes) への全ての作業が終了しました。
以前は、一部はまだラッパーモジュール (Locale::Codes::*) で行われていました。
ISO 639-5 で定義されている言語ファミリーコード (langfam) が追加されました。

=item *

=begin original

L<Math::BigFloat> has been upgraded from version 1.993 to 1.997.

=end original

L<Math::BigFloat> はバージョン 1.993 から 1.997 に更新されました。

=begin original

The C<numify> method has been corrected to return a normalised Perl number
(the result of C<0 + $thing>), instead of a string [rt.cpan.org #66732].

=end original

C<numify> メソッドは、文字列ではなく正規化された Perl 数値
(C<0 + $thing> の結果) を返すように修正されました [rt.cpan.org #66732]。

=item *

=begin original

L<Math::BigInt> has been upgraded from version 1.994 to 1.998.

=end original

L<Math::BigInt> はバージョン 1.994 から 1.998 に更新されました。

=begin original

It provides a new C<bsgn> method that complements the C<babs> method.

=end original

C<babs> メソッドを補完する新しい C<bsgn> メソッドが提供されます。

=begin original

It fixes the internal C<objectify> function's handling of "foreign objects"
so they are converted to the appropriate class (Math::BigInt or
Math::BigFloat).

=end original

内部の C<objectify> 関数の「外部オブジェクト」の扱いが修正され、
適切なクラス (Math::BigInt または Math::BigFloat) に変換されるように
なります。

=item *

=begin original

L<Math::BigRat> has been upgraded from version 0.2602 to 0.2603.

=end original

L<Math::BigRat> はバージョン 0.2602 から 0.2603 に更新されました。

=begin original

C<int()> on a Math::BigRat object containing -1/2 now creates a
Math::BigInt containing 0, rather than -0.  L<Math::BigInt> does not even
support negative zero, so the resulting object was actually malformed
[perl #95530].

=end original

-1/2 を含んでいる Math::BigRat オブジェクトの C<int()> は -0 ではなく、
0 を含む Math::BigInt を作成するようになりました。
L<Math::BigInt> は負のゼロに対応していないので、結果のオブジェクトは
実際には不正なものとなっていました [perl #95530]。

=item *

=begin original

L<Math::Complex> has been upgraded from version 1.56 to 1.59
and L<Math::Trig> from version 1.2 to 1.22.

=end original

L<Math::Complex> はバージョン 1.56 から 1.59 に、L<Math::Trig> は
バージョン 1.2 から 1.22 に更新されました。

=begin original

Fixes include: correct copy constructor usage; fix polarwise formatting with
numeric format specifier; and more stable C<great_circle_direction> algorithm.

=end original

修正は以下のものを含みます: コピーコンストラクタの使用の修正; fix polarwise formatting with
numeric format specifier; and more stable C<great_circle_direction> algorithm.
(TBT)

=item *

=begin original

L<Module::CoreList> has been upgraded from version 2.51 to 2.66.

=end original

L<Module::CoreList> はバージョン 2.51 から 2.66 に更新されました。

=begin original

The C<corelist> utility now understands the C<-r> option for displaying
Perl release dates and the C<--diff> option to print the set of modlib
changes between two perl distributions.

=end original

C<corelist> ユーティリティは、Perl リリース日を表示するための C<-r>
オプションと、二つの perl 配布の間のモジュールライブラリの変更を
表示するための C<--diff> オプションを理解するようになりました。

=item *

=begin original

L<Module::Metadata> has been upgraded from version 1.000004 to 1.000009.

=end original

L<Module::Metadata> はバージョン 1.000004 から 1.000009 に更新されました。

=begin original

Adds C<provides> method to generate a CPAN META provides data structure
correctly; use of C<package_versions_from_directory> is discouraged.

=end original

CPAN META が提供するデータ構造を正しく生成するための C<provides> メソッドが
追加されました;  C<package_versions_from_directory> の使用は非推奨です。

=item *

=begin original

L<ODBM_File> has been upgraded from version 1.10 to 1.12.

=end original

L<ODBM_File> はバージョン 1.10 から 1.12 に更新されました。

=begin original

The XS code is now compiled with C<PERL_NO_GET_CONTEXT>, which will aid
performance under ithreads.

=end original

ithreads での性能の助けになるように、XS コードは C<PERL_NO_GET_CONTEXT> で
コンパイルされるようになりました。

=item *

=begin original

L<open> has been upgraded from version 1.08 to 1.10.

=end original

L<open> はバージョン 1.08 から 1.10 に更新されました。

=begin original

It no longer turns off layers on standard handles when invoked without the
":std" directive.  Similarly, when invoked I<with> the ":std" directive, it
now clears layers on STDERR before applying the new ones, and not just on
STDIN and STDOUT [perl #92728].

=end original

It no longer turns off layers on standard handles when invoked without the
":std" directive.  Similarly, when invoked I<with> the ":std" directive, it
now clears layers on STDERR before applying the new ones, and not just on
STDIN and STDOUT [perl #92728].
(TBT)

=item *

=begin original

L<overload> has been upgraded from version 1.13 to 1.18.

=end original

L<overload> はバージョン 1.13 から 1.18 に更新されました。

=begin original

C<overload::Overloaded> no longer calls C<can> on the class, but uses
another means to determine whether the object has overloading.  It was
never correct for it to call C<can>, as overloading does not respect
AUTOLOAD.  So classes that autoload methods and implement C<can> no longer
have to account for overloading [perl #40333].

=end original

C<overload::Overloaded> no longer calls C<can> on the class, but uses
another means to determine whether the object has overloading.  It was
never correct for it to call C<can>, as overloading does not respect
AUTOLOAD.  So classes that autoload methods and implement C<can> no longer
have to account for overloading [perl #40333].
(TBT)

=begin original

A warning is now produced for invalid arguments.  See L</New Diagnostics>.

=end original

不正な引数に対して警告が生成されるようになりました。
L</New Diagnostics> を参照してください。

=item *

=begin original

L<PerlIO::scalar> has been upgraded from version 0.11 to 0.14.

=end original

L<PerlIO::scalar> はバージョン 0.11 から 0.14 に更新されました。

=begin original

(This is the module that implements C<< open $fh, '>', \$scalar >>.)

=end original

(これは C<< open $fh, '>', \$scalar >> を実装するモジュールです。)

=begin original

It fixes a problem with C<< open my $fh, ">", \$scalar >> not working if
C<$scalar> is a copy-on-write scalar. (5.14.2)

=end original

C<$scalar> がコピーオンライトスカラのときに
C<< open my $fh, ">", \$scalar >> が動作しない問題を修正しました。(5.14.2)

=begin original

It also fixes a hang that occurs with C<readline> or C<< <$fh> >> if a
typeglob has been assigned to $scalar [perl #92258].

=end original

It also fixes a hang that occurs with C<readline> or C<< <$fh> >> if a
typeglob has been assigned to $scalar [perl #92258].
(TBT)

=begin original

It no longer assumes during C<seek> that $scalar is a string internally.
If it didn't crash, it was close to doing so [perl #92706].  Also, the
internal print routine no longer assumes that the position set by C<seek>
is valid, but extends the string to that position, filling the intervening
bytes (between the old length and the seek position) with nulls
[perl #78980].

=end original

It no longer assumes during C<seek> that $scalar is a string internally.
If it didn't crash, it was close to doing so [perl #92706].  Also, the
internal print routine no longer assumes that the position set by C<seek>
is valid, but extends the string to that position, filling the intervening
bytes (between the old length and the seek position) with nulls
[perl #78980].
(TBT)

=begin original

Printing to an in-memory handle now works if the $scalar holds a reference,
stringifying the reference before modifying it.  References used to be
treated as empty strings.

=end original

Printing to an in-memory handle now works if the $scalar holds a reference,
stringifying the reference before modifying it.  References used to be
treated as empty strings.
(TBT)

=begin original

Printing to an in-memory handle no longer crashes if the $scalar happens to
hold a number internally, but no string buffer.

=end original

Printing to an in-memory handle no longer crashes if the $scalar happens to
hold a number internally, but no string buffer.
(TBT)

=begin original

Printing to an in-memory handle no longer creates scalars that confuse
the regular expression engine [perl #108398].

=end original

Printing to an in-memory handle no longer creates scalars that confuse
the regular expression engine [perl #108398].
(TBT)

=item *

=begin original

L<Pod::Functions> has been upgraded from version 1.04 to 1.05.

=end original

L<Pod::Functions> はバージョン 1.04 から 1.05 に更新されました。

=begin original

F<Functions.pm> is now generated at perl build time from annotations in
F<perlfunc.pod>.  This will ensure that L<Pod::Functions> and L<perlfunc>
remain in synchronisation.

=end original

F<Functions.pm> is now generated at perl build time from annotations in
F<perlfunc.pod>.  This will ensure that L<Pod::Functions> and L<perlfunc>
remain in synchronisation.
(TBT)

=item *

=begin original

L<Pod::Html> has been upgraded from version 1.11 to 1.1502.

=end original

L<Pod::Html> はバージョン 1.11 から 1.1502 に更新されました。

=begin original

This is an extensive rewrite of Pod::Html to use L<Pod::Simple> under
the hood.  The output has changed significantly.

=end original

これは内部で L<Pod::Simple> を使うようにした Pod::Html の大幅な
書き直しです。
出力は大きく変わりました。

=item *

=begin original

L<Pod::Perldoc> has been upgraded from version 3.15_03 to 3.17.

=end original

L<Pod::Perldoc> はバージョン 3.15_03 から 3.17 に更新されました。

=begin original

It corrects the search paths on VMS [perl #90640]. (5.14.1)

=end original

これは VMS での検索パスを修正します [perl #90640]。(5.14.1)

=begin original

The B<-v> option now fetches the right section for C<$0>.

=end original

B<-v> オプションは C<$0> の正しい部分を取り込むようになりました。

=begin original

This upgrade has numerous significant fixes.  Consult its changelog on
the CPAN for more information.

=end original

この更新は多くの顕著な修正を含みます。
さらなる情報については CPAN にある changelog を参照してください。

=item *

=begin original

L<POSIX> has been upgraded from version 1.24 to 1.30.

=end original

L<POSIX> はバージョン 1.24 から 1.30 に更新されました。

=begin original

L<POSIX> no longer uses L<AutoLoader>.  Any code which was relying on this
implementation detail was buggy, and may fail as a result of this change.
The module's Perl code has been considerably simplified, roughly halving
the number of lines, with no change in functionality.  The XS code has
been refactored to reduce the size of the shared object by about 12%,
with no change in functionality.  More POSIX functions now have tests.

=end original

L<POSIX> no longer uses L<AutoLoader>.  Any code which was relying on this
implementation detail was buggy, and may fail as a result of this change.
The module's Perl code has been considerably simplified, roughly halving
the number of lines, with no change in functionality.  The XS code has
been refactored to reduce the size of the shared object by about 12%,
with no change in functionality.  More POSIX functions now have tests.
(TBT)

=begin original

C<sigsuspend> and C<pause> now run signal handlers before returning, as the
whole point of these two functions is to wait until a signal has
arrived, and then return I<after> it has been triggered.  Delayed, or
"safe", signals were preventing that from happening, possibly resulting in
race conditions [perl #107216].

=end original

C<sigsuspend> and C<pause> now run signal handlers before returning, as the
whole point of these two functions is to wait until a signal has
arrived, and then return I<after> it has been triggered.  Delayed, or
"safe", signals were preventing that from happening, possibly resulting in
race conditions [perl #107216].
(TBT)

=begin original

C<POSIX::sleep> is now a direct call into the underlying OS C<sleep>
function, instead of being a Perl wrapper on C<CORE::sleep>.
C<POSIX::dup2> now returns the correct value on Win32 (I<i.e.>, the file
descriptor).  C<POSIX::SigSet> C<sigsuspend> and C<sigpending> and
C<POSIX::pause> now dispatch safe signals immediately before returning to
their caller.

=end original

C<POSIX::sleep> is now a direct call into the underlying OS C<sleep>
function, instead of being a Perl wrapper on C<CORE::sleep>.
C<POSIX::dup2> now returns the correct value on Win32 (I<i.e.>, the file
descriptor).  C<POSIX::SigSet> C<sigsuspend> and C<sigpending> and
C<POSIX::pause> now dispatch safe signals immediately before returning to
their caller.
(TBT)

=begin original

C<POSIX::Termios::setattr> now defaults the third argument to C<TCSANOW>,
instead of 0. On most platforms C<TCSANOW> is defined as 0, but on some
0 is not a valid parameter, which caused a call with defaults to fail.

=end original

C<POSIX::Termios::setattr> now defaults the third argument to C<TCSANOW>,
instead of 0. On most platforms C<TCSANOW> is defined as 0, but on some
0 is not a valid parameter, which caused a call with defaults to fail.
(TBT)

=item *

=begin original

L<Socket> has been upgraded from version 1.94 to 2.000.

=end original

L<Socket> はバージョン 1.94 から 2.000 に更新されました。

=begin original

It has new functions and constants for handling IPv6 sockets:

=end original

IPv6 ソケットを扱うための関数と定数が追加されました:

    pack_ipv6_mreq
    unpack_ipv6_mreq
    IPV6_ADD_MEMBERSHIP
    IPV6_DROP_MEMBERSHIP
    IPV6_MTU
    IPV6_MTU_DISCOVER
    IPV6_MULTICAST_HOPS
    IPV6_MULTICAST_IF
    IPV6_MULTICAST_LOOP
    IPV6_UNICAST_HOPS
    IPV6_V6ONLY

=item *

=begin original

L<Storable> has been upgraded from version 2.27 to 2.34.

=end original

L<Storable> はバージョン 2.27 から 2.34 に更新されました。

=begin original

It no longer turns copy-on-write scalars into read-only scalars when
freezing and thawing.

=end original

凍結と解凍の時にコピーオンライトスカラを読み込み専用スカラに
変換しなくなりました。

=item *

=begin original

L<Sys::Syslog> has been upgraded from version 0.27 to 0.29.

=end original

L<Sys::Syslog> はバージョン 0.27 から 0.29 に更新されました。

=begin original

This upgrade closes many outstanding bugs.

=end original

この更新により多くの顕著なバグが修正されました。

=item *

=begin original

L<Term::ANSIColor> has been upgraded from version 3.00 to 3.01.

=end original

L<Term::ANSIColor> はバージョン 3.00 から 3.01 に更新されました。

=begin original

Only interpret an initial array reference as a list of colors, not any initial
reference, allowing the colored function to work properly on objects with
stringification defined.

=end original

Only interpret an initial array reference as a list of colors, not any initial
reference, allowing the colored function to work properly on objects with
stringification defined.
(TBT)

=item *

=begin original

L<Term::ReadLine> has been upgraded from version 1.07 to 1.09.

=end original

L<Term::ReadLine> はバージョン 1.07 から 1.09 に更新されました。

=begin original

Term::ReadLine now supports any event loop, including unpublished ones and
simple L<IO::Select>, loops without the need to rewrite existing code for
any particular framework [perl #108470].

=end original

Term::ReadLine now supports any event loop, including unpublished ones and
simple L<IO::Select>, loops without the need to rewrite existing code for
any particular framework [perl #108470].
(TBT)

=item *

=begin original

L<threads::shared> has been upgraded from version 1.37 to 1.40.

=end original

L<threads::shared> はバージョン 1.37 から 1.40 に更新されました。

=begin original

Destructors on shared objects used to be ignored sometimes if the objects
were referenced only by shared data structures.  This has been mostly
fixed, but destructors may still be ignored if the objects still exist at
global destruction time [perl #98204].

=end original

Destructors on shared objects used to be ignored sometimes if the objects
were referenced only by shared data structures.  This has been mostly
fixed, but destructors may still be ignored if the objects still exist at
global destruction time [perl #98204].
(TBT)

=item *

=begin original

L<Unicode::Collate> has been upgraded from version 0.73 to 0.89.

=end original

L<Unicode::Collate> はバージョン 0.73 から 0.89 に更新されました。

=begin original

Updated to CLDR 1.9.1

=end original

CLDR 1.9.1 に更新されました。

=begin original

Locales updated to CLDR 2.0: mk, mt, nb, nn, ro, ru, sk, sr, sv, uk,
zh__pinyin, zh__stroke

=end original

CLDR 2.0 に更新されたロケール: mk, mt, nb, nn, ro, ru, sk, sr, sv, uk,
zh__pinyin, zh__stroke

=begin original

Newly supported locales: bn, fa, ml, mr, or, pa, sa, si, si__dictionary,
sr_Latn, sv__reformed, ta, te, th, ur, wae.

=end original

新たに対応したロケール: bn, fa, ml, mr, or, pa, sa, si, si__dictionary,
sr_Latn, sv__reformed, ta, te, th, ur, wae.

=begin original

Tailored compatibility ideographs as well as unified ideographs for the
locales: ja, ko, zh__big5han, zh__gb2312han, zh__pinyin, zh__stroke.

=end original

Tailored compatibility ideographs as well as unified ideographs for the
locales: ja, ko, zh__big5han, zh__gb2312han, zh__pinyin, zh__stroke.
(TBT)

=begin original

Locale/*.pl files are now searched for in @INC.

=end original

Locale/*.pl ファイルは @INC から検索されるようになりました。

=item *

=begin original

L<Unicode::Normalize> has been upgraded from version 1.10 to 1.14.

=end original

L<Unicode::Normalize> はバージョン 1.10 から 1.14 に更新されました。

=begin original

Fixes for the removal of F<unicore/CompositionExclusions.txt> from core.

=end original

F<unicore/CompositionExclusions.txt> がコアから削除されたことによる
修正が行われました。

=item *

=begin original

L<Unicode::UCD> has been upgraded from version 0.32 to 0.43.

=end original

L<Unicode::UCD> はバージョン 0.32 から 0.43 に更新されました。

=begin original

This adds four new functions:  C<prop_aliases()> and
C<prop_value_aliases()>, which are used to find all the Unicode-approved
synonyms for property names, or to convert from one name to another;
C<prop_invlist> which returns all the code points matching a given
Unicode binary property; and C<prop_invmap> which returns the complete
specification of a given Unicode property.

=end original

This adds four new functions:  C<prop_aliases()> and
C<prop_value_aliases()>, which are used to find all the Unicode-approved
synonyms for property names, or to convert from one name to another;
C<prop_invlist> which returns all the code points matching a given
Unicode binary property; and C<prop_invmap> which returns the complete
specification of a given Unicode property.
(TBT)

=item *

=begin original

L<Win32API::File> has been upgraded from version 0.1101 to 0.1200.

=end original

L<Win32API::File> はバージョン 0.1101 から 0.1200 に更新されました。

=begin original

Added SetStdHandle and GetStdHandle functions

=end original

SetStdHandle 関数と GetStdHandle 関数が追加されました。

=back

=head2 Removed Modules and Pragmata

(削除されたモジュールとプラグマ)

=begin original

As promised in Perl 5.14.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from CPAN instead.

=end original

Perl 5.14.0 のリリースノートで約束した通り、以下のモジュールがコア配布から
削除されました; もし必要なら代わりに CPAN からインストールしてください。

=over

=item *

=begin original

C<Devel::DProf> has been removed from the Perl core.  Prior version was
20110228.00.

=end original

C<Devel::DProf> は Perl コアから削除されました。
以前のバージョンは 20110228.00 でした。

=item *

=begin original

C<Shell> has been removed from the Perl core.  Prior version was 0.72_01.

=end original

C<Shell> は Perl コアから削除されました。
以前のバージョンは 0.72_01 でした。

=back

=head1 Documentation

(文書)

=head2 New Documentation

(新しい文書)

=head3 L<perldtrace>

=begin original

L<perldtrace> describes Perl's DTrace support, listing the provided probes
and gives examples of their use.

=end original

L<perldtrace> は Perl の DTrace 対応について記述し、提供している
プローブの一覧と使用例を提供します。

=head3 L<perlexperiment>

=begin original

This document is intended to provide a list of experimental features in
Perl.  It is still a work in progress.

=end original

この文書は Perl の実験的機能の一覧を提供することを意図しています。
これはまだ作業中です。

=head3 L<perlootut>

=begin original

This a new OO tutorial.  It focuses on basic OO concepts, and then recommends
that readers choose an OO framework from CPAN.

=end original

これは新しい OO チュートリアルです。
基本的な OO コンセプトに焦点を合わせ、読者が CPAN から OO フレームワークを
選ぶことを推奨しています。

=head3 L<perlxstypemap>

=begin original

The new manual describes the XS typemapping mechanism in unprecedented
detail and combines new documentation with information extracted from
L<perlxs> and the previously unofficial list of all core typemaps.

=end original

この新しいマニュアルは、前例のないほど詳細に XS typemap 機構について記述し、
新しい文書を L<perlxs> から抽出された情報および以前は非公式だった
全てのコア typemap の一覧と結合します。

=head2 Changes to Existing Documentation

(既存の文書の変更)

=head3 L<perlapi>

=over 4

=item *

=begin original

The HV API has long accepted negative lengths to indicate that the key is
in UTF8.  Now this is documented.

=end original

HV API は長い間、キーが UTF8 であることを示すための負数の長さを
受け付けていました。
これが文書化されました。

=item *

=begin original

The C<boolSV()> macro is now documented.

=end original

C<boolSV()> が文書化されました。

=back

=head3 L<perlfunc>

=over 4

=item *

=begin original

C<dbmopen> treats a 0 mode as a special case, that prevents a nonexistent
file from being created.  This has been the case since Perl 5.000, but was
never documented anywhere.  Now the perlfunc entry mentions it
[perl #90064].

=end original

C<dbmopen> はモード 0 を特殊な場合として扱い、この場合存在しないファイルを
作成しません。
これは Perl 5.000 からありましたが、どこにも文書化されていませんでした。
perlfunc のエントリでこれに触れるようになりました [perl #90064]。

=item *

=begin original

As an accident of history, C<open $fh, '<:', ...> applies the default
layers for the platform (C<:raw> on Unix, C<:crlf> on Windows), ignoring
whatever is declared by L<open.pm|open>.  This seems such a useful feature
it has been documented in L<perlfunc|perlfunc/open> and L<open>.

=end original

歴史上の偶然により、C<open $fh, '<:', ...> はプラットフォームのデフォルト層
(Unix では C<:raw>、Windows では C<:crlf>)を適用し、L<open.pm|open> で
宣言されていたものを無視していました。
これは有効な機能に思えるので、L<perlfunc|perlfunc/open> と L<open> に
文書化されました。

=item *

=begin original

The entry for C<split> has been rewritten.  It is now far clearer than
before.

=end original

C<split> のエントリが書き直されました。
以前より遥かに明確になりました。

=back

=head3 L<perlguts>

=over 4

=item *

=begin original

A new section, L<Autoloading with XSUBs|perlguts/Autoloading with XSUBs>,
has been added, which explains the two APIs for accessing the name of the
autoloaded sub.

=end original

オートロードされたサブルーチンの名前にアクセスするための二つの API に
ついて説明した 
L<Autoloading with XSUBs|perlguts/Autoloading with XSUBs> という新しい
章が追加されました。

=item *

=begin original

Some of the function descriptions in L<perlguts> were confusing, as it was
not clear whether they referred to the function above or below the
description.  This has been clarified [perl #91790].

=end original

L<perlguts> のいくつかの関数の説明は混乱していて、説明の上に書いてある
関数のことか下に書いてある関数のことかがはっきりしていませんでした。
これは明確化されました [perl #91790]。

=back

=head3 L<perlobj>

=over 4

=item *

=begin original

This document has been rewritten from scratch, and its coverage of various OO
concepts has been expanded.

=end original

この文書は最初から書き直され、様々な OO コンセプトの範囲が拡張されました。

=back

=head3 L<perlop>

=over 4

=item *

=begin original

Documentation of the smartmatch operator has been reworked and moved from
perlsyn to perlop where it belongs.

=end original

スマートマッチング演算子の文書が書き直され、perlsyn から属する場所である
perlopに移動しました。

=begin original

It has also been corrected for the case of C<undef> on the left-hand
side.  The list of different smart match behaviours had an item in the
wrong place.

=end original

左側の C<undef> の場合も修正されました。
スマートマッチングの振る舞いの違いの一覧は間違った位置のアイテムに
ありました。

=item *

=begin original

Documentation of the ellipsis statement (C<...>) has been reworked and
moved from perlop to perlsyn.

=end original

省略文 (C<...>) の文書が書き直され、perlop から perlsyn に移動しました。

=item *

=begin original

The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings (5.14.1).

=end original

ビット単位演算子の説明は、Unicode 文字列に対してどのように動作するかの
説明が追加されました (5.14.1)。

=item *

=begin original

More examples for C<m//g> have been added (5.14.1).

=end original

C<m//g> に関するさらなる例が追加されました (5.14.1)。

=item *

=begin original

The C<<< <<\FOO >>> here-doc syntax has been documented (5.14.1).

=end original

C<<< <<\FOO >>> ヒヤドキュメント文法が追加されました (5.14.1)。

=back

=head3 L<perlpragma>

=over 4

=item *

=begin original

There is now a standard convention for naming keys in the C<%^H>,
documented under L<Key naming|perlpragma/Key naming>.

=end original

C<%^H> のキーの命名に標準規則が定められ、
L<Key naming|perlpragma/Key naming> で文書化されました。

=back

=head3 L<perlsec/Laundering and Detecting Tainted Data>

=over 4

=item *

=begin original

The example function for checking for taintedness contained a subtle
error.  C<$@> needs to be localized to prevent its changing this
global's value outside the function.  The preferred method to check for
this remains L<Scalar::Util/tainted>.

=end original

汚染をチェックする例の関数に僅かなミスがありました。
C<$@> は関数の外側でこのグローバルな値を変更されないようにローカル化する
必要があります。
これをチェックするための望ましいメソッドはやはり
L<Scalar::Util/tainted> です。

=back

=head3 L<perllol>

=over

=item *

=begin original

L<perllol> has been expanded with examples using the new C<push $scalar>
syntax introduced in Perl 5.14.0 (5.14.1).

=end original

L<perllol> は、Perl 5.14.0 で導入された新しい C<push $scalar> 文法を
使った例が追加されました (5.14.1)。

=back

=head3 L<perlmod>

=over

=item *

=begin original

L<perlmod> now states explicitly that some types of explicit symbol table
manipulation are not supported.  This codifies what was effectively already
the case [perl #78074].

=end original

L<perlmod> は明示的なシンボルテーブル操作のいくつかの種類は対応していない
ことを明示的に記すようになりました。
これは何が事実上すでに対応していないかを明文化しています [perl #78074]。

=back

=head3 L<perlpodstyle>

=over 4

=item *

=begin original

The tips on which formatting codes to use have been corrected and greatly
expanded.

=end original

どのフォーマッティングコードを使うかの小技が修正され、大幅に
拡張されました。

=item *

=begin original

There are now a couple of example one-liners for previewing POD files after
they have been edited.

=end original

POD ファイルを修正した後プレビューするためのいくつかの例となる一行野郎が
追加されました。

=back

=head3 L<perlre>

=over

=item *

=begin original

The C<(*COMMIT)> directive is now listed in the right section
(L<Verbs without an argument|perlre/Verbs without an argument>).

=end original

C<(*COMMIT)> 指示子は正しい節
(L<Verbs without an argument|perlre/Verbs without an argument>) に
挙げられるようになりました。

=back

=head3 L<perlrun>

=over

=item *

=begin original

L<perlrun> has undergone a significant clean-up.  Most notably, the
B<-0x...> form of the B<-0> flag has been clarified, and the final section
on environment variables has been corrected and expanded (5.14.1).

=end original

L<perlrun> は大幅に整理されました。
最も注目するべき所は、B<-0> フラグの B<-0x...> 形式が明確化され、
環境変数の最後の節が修正、拡張されました(5.14.1)。

=back

=head3 L<perlsub>

=over

=item *

=begin original

The ($;) prototype syntax, which has existed for rather a long time, is now
documented in L<perlsub>.  It allows a unary function to have the same
precedence as a list operator.

=end original

かなり長い間存在していた ($;) プロトタイプが L<perlsub> で文書化されました。
リスト演算子と同じ優先順位を持つ単項関数が可能になります。

=back

=head3 L<perltie>

=over

=item *

=begin original

The required syntax for tying handles has been documented.

=end original

ハンドルを tie するために必要な文法が文書化されました。

=back

=head3 L<perlvar>

=over

=item *

=begin original

The documentation for L<$!|perlvar/$!> has been corrected and clarified.
It used to state that $! could be C<undef>, which is not the case.  It was
also unclear as to whether system calls set C's C<errno> or Perl's C<$!>
[perl #91614].

=end original

L<$!|perlvar/$!> の文書が修正され明確化されました。
以前は $! は C<undef> になることがあると書かれていましたが、そうなることは
ありませんでした。
また、システムコールが C の C<errno> を設定するのか Perl の C<$!> を
設定するのかが不明確でした [perl #91614]。

=item *

=begin original

Documentation for L<$$|perlvar/$$> has been amended with additional
cautions regarding changing the process ID.

=end original

L<$$|perlvar/$$> の文書は、プロセス ID の変更に関する追加の注意を
追記されました。

=back

=head3 Other Changes

(その他の変更)

=over 4

=item *

=begin original

L<perlxs> was extended with documentation on inline typemaps.

=end original

L<perlxs> はインライン typemap の文書で拡張されました。

=item *

=begin original

L<perlref> has a new L<Circular References|perlref/Circular References>
section explaining how circularities may not be freed and how to solve that
with weak references.

=end original

L<perlref> に、なぜ循環性があると解放されないかと弱い参照を使って
解決する方法を説明した新しい章である
L<Circular References|perlref/Circular References> が追加されました。

=item *

=begin original

Parts of L<perlapi> were clarified, and Perl equivalents of some C
functions have been added as an additional mode of exposition.

=end original

L<perlapi> の一部が明確化され、and Perl equivalents of some C
functions have been added as an additional mode of exposition.
(TBT)

=item *

=begin original

A few parts of L<perlre> and L<perlrecharclass> were clarified.

=end original

L<perlre> と L<perlrecharclass> のいくつかの部分が明確化されました。

=back

=head2 Removed Documentation

(削除された文書)

=head3 Old OO Documentation

(古い OO 文書)

=begin original

All the old OO tutorials, perltoot, perltooc, and perlboot, have been
removed.  The perlbot (bag of object tricks) document has been removed
as well.

=end original

古い OO チュートリアルである perltoot, perltooc, perlboot は削除されました。
perlbot (bag of object tricks) 文書も削除されました。

=head3 Development Deltas

=begin original

The perldelta files for development releases are no longer packaged with
perl.  These can still be found in the perl source code repository.

=end original

開発リリースの perldelta ファイルは perl と共に
パッケージングされなくなりました。
perl ソースコードレポジトリには残っています。

=head1 Diagnostics

(診断メッセージ)

=begin original

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=end original

以下の追加や変更が、警告や致命的エラーメッセージ含む診断出力に行われました。
完全な診断メッセージの一覧については、L<perldiag> を参照してください。

=head2 New Diagnostics

(新しい診断メッセージ)

=head3 New Errors

(新しいエラー)

=over 4

=item *

L<Cannot set tied @DB::args|perldiag/"Cannot set tied @DB::args">

=begin original

This error occurs when C<caller> tries to set C<@DB::args> but finds it
tied.  Before this error was added, it used to crash instead.

=end original

このエラーは、C<caller> が C<@DB::args> を設定しようとしたけれども
これが tie されていたときに起こります。
このエラーが追加される前は、クラッシュしていました。

=item *

L<Cannot tie unreifiable array|perldiag/"Cannot tie unreifiable array">

=begin original

This error is part of a safety check that the C<tie> operator does before
tying a special array like C<@_>.  You should never see this message.

=end original

このエラーは、C<@_> のような特殊配列を tie する前に C<tie> 演算子が行う
安全チェックの一部です。
このメッセージを見ることは決してないはずです。

=item *

L<&CORE::%s cannot be called directly|perldiag/"&CORE::%s cannot be called directly">

=begin original

This occurs when a subroutine in the C<CORE::> namespace is called
with C<&foo> syntax or through a reference.  Some subroutines
in this package cannot yet be called that way, but must be
called as barewords.  See L</Subroutines in the C<CORE> namespace>, above.

=end original

これは、C<CORE::> 名前空間のサブルーチンが C<&foo> 文法またはリファレンスを
通して呼び出されたときに起こります。
このパッケージの一部のサブルーチンはまだこのような方法では呼び出せず、
裸の単語で呼び出さなければなりません。
上述の L</Subroutines in the C<CORE> namespace> を参照してください。

=item *

L<Source filters apply only to byte streams|perldiag/"Source filters apply only to byte streams">

=begin original

This new error occurs when you try to activate a source filter (usually by
loading a source filter module) within a string passed to C<eval> under the
C<unicode_eval> feature.

=end original

この新しいエラーは、C<unicode_eval> 機能が有効の時に C<eval> に渡された
文字列の中でソースフィルタを(通常はソースフィルタモジュールを読み込むことで)
起動しようとした場合に起こります。

=back

=head3 New Warnings

(新しい警告)

=over 4

=item *

L<defined(@array) is deprecated|perldiag/"defined(@array) is deprecated">

=begin original

The long-deprecated C<defined(@array)> now also warns for package variables.
Previously it only issued a warning for lexical variables.

=end original

長い間非推奨となっている C<defined(@array)> は、パッケージ変数に対しても
警告するようになりました。
以前はレキシカル変数に対してのみ警告を出していました。

=item *

L<length() used on %s|perldiag/length() used on %s>

=begin original

This new warning occurs when C<length> is used on an array or hash, instead
of C<scalar(@array)> or C<scalar(keys %hash)>.

=end original

この新しい警告は、C<scalar(@array)> や C<scalar(keys %hash)> ではなく、
C<length> が配列やハッシュに使われるときに発生します。

=item *

L<lvalue attribute %s already-defined subroutine|perldiag/"lvalue attribute %s already-defined subroutine">

=begin original

L<attributes.pm|attributes> now emits this warning when the :lvalue
attribute is applied to a Perl subroutine that has already been defined, as
doing so can have unexpected side-effects.

=end original

L<attributes.pm|attributes> は、:lvalue 属性が既に定義されている
Perl サブルーチンに適用されると出力されます; なぜならそうすると想定外の
副作用があるかもしれないからです。

=item *

L<overload arg '%s' is invalid|perldiag/"overload arg '%s' is invalid">

=begin original

This warning, in the "overload" category, is produced when the overload
pragma is given an argument it doesn't recognize, presumably a mistyped
operator.

=end original

"overload" カテゴリに入るこの警告は、overload プラグマが (おそらくは
ミスタイプした演算子で) 認識できない引数を指定されたときに発生します。

=item *

L<$[ used in %s (did you mean $] ?)|perldiag/"$[ used in %s (did you mean $] ?)">

=begin original

This new warning exists to catch the mistaken use of C<$[> in version
checks.  C<$]>, not C<$[>, contains the version number.

=end original

この新しい警告はバージョンチェックでの C<$[> の間違った使用法を
捕捉するために存在します。
バージョン番号は C<$[> ではなく C<$]> に含まれています。

=item *

L<Useless assignment to a temporary|perldiag/"Useless assignment to a temporary">

=begin original

Assigning to a temporary scalar returned
from an lvalue subroutine now produces this
warning [perl #31946].

=end original

左辺値サブルーチンから返された一時スカラに代入するとこの警告が
出力されるようになりました [perl #31946]。

=item *

L<Useless use of \E|perldiag/"Useless use of \E">

=begin original

C<\E> does nothing unless preceded by C<\Q>, C<\L> or C<\U>.

=end original

C<\Q>, C<\L>, C<\U> のいずれかが前にない場合、C<\E> は何もしません。

=back

=head2 Removed Errors

(削除されたエラー)

=over

=item *

"sort is now a reserved word"

=begin original

This error used to occur when C<sort> was called without arguments,
followed by C<;> or C<)>.  (E.g., C<sort;> would die, but C<{sort}> was
OK.)  This error message was added in Perl 3 to catch code like
C<close(sort)> which would no longer work.  More than two decades later,
this message is no longer appropriate.  Now C<sort> without arguments is
always allowed, and returns an empty list, as it did in those cases
where it was already allowed [perl #90030].

=end original

このエラーは C<sort> が引数なしで呼び出され、その後に C<;> か C<)> が
続いていた場合に発生していました。
(例えば C<sort;> は die しますが、C<{sort}> は OK です。)
このエラーは、もはや動作しない C<close(sort)> のようなコードを捕捉するために
Perl 3 で追加されました。
20 年以上経って、このメッセージはもはや適切ではなくなりました。
引数なしの C<sort> は常に許されるようになり、今まで許されていた場合と
同じように、空リストを返します [perl #90030]。

=back

=head2 Changes to Existing Diagnostics

(既存の診断メッセージの変更)

=over 4

=item *

=begin original

The "Applying pattern match..." or similar warning produced when an
array or hash is on the left-hand side of the C<=~> operator now
mentions the name of the variable.

=end original

配列やハッシュが C<=~> 演算子の左側にあるときに出力される
"Applying pattern match..." または同様の警告は、変数名を
出力するようになりました。

=item *

=begin original

The "Attempt to free non-existent shared string" has had the spelling
of "non-existent" corrected to "nonexistent".  It was already listed
with the correct spelling in L<perldiag>.

=end original

"Attempt to free non-existent shared string" は "non-existent" という綴りを
"nonexistent" に変更しました。
これは  L<perldiag> では既に正しい綴りになっていました。

=item *

=begin original

The error messages for using C<default> and C<when> outside of a
topicalizer have been standardised to match the messages for C<continue>
and loop controls.  They now read 'Can't "default" outside a
topicalizer' and 'Can't "when" outside a topicalizer'.  They both used
to be 'Can't use when() outside a topicalizer' [perl #91514].

=end original

解析器の外側で C<default> や C<when> を使ったときのエラーメッセージは
C<continue> やループ制御のときのメッセージと一致するように
標準化されました。
'Can't "default" outside a topicalizer' と
'Can't "when" outside a topicalizer' になりました。
以前は 'Can't use when() outside a topicalizer' でした [perl #91514]。

=item *

=begin original

The message, "Code point 0x%X is not Unicode, no properties match it;
all inverse properties do" has been changed to "Code point 0x%X is not
Unicode, all \p{} matches fail; all \P{} matches succeed".

=end original

"Code point 0x%X is not Unicode, no properties match it;
all inverse properties do" というメッセージは "Code point 0x%X is not
Unicode, all \p{} matches fail; all \P{} matches succeed" に
変更されました。

=item *

=begin original

Redefinition warnings for constant subroutines used to be mandatory,
even occurring under C<no warnings>.  Now they respect the L<warnings>
pragma.

=end original

定数サブルーチンの再定義警告は、たとえ C<no warnings> のもとでも
強制的に発生していました。
これは L<warnings> プラグマに従うようになりました。

=item *

=begin original

The "glob failed" warning message is now suppressible via C<no warnings>
[perl #111656].

=end original

"glob failed" 警告メッセージは C<no warnings> で抑制できるようになりました
[perl #111656]。

=item *

=begin original

The L<Invalid version format|perldiag/"Invalid version format (%s)">
error message now says "negative version number" within the parentheses,
rather than "non-numeric data", for negative numbers.

=end original

L<Invalid version format|perldiag/"Invalid version format (%s)"> エラー
メッセージは、負数の場合はかっこの中は "non-numeric data" ではなく
"negative version number" と出力されるようになりました。

=item *

=begin original

The two warnings
L<Possible attempt to put comments in qw() list|perldiag/"Possible attempt to put comments in qw() list">
and
L<Possible attempt to separate words with commas|perldiag/"Possible attempt to separate words with commas">
are no longer mutually exclusive: the same C<qw> construct may produce
both.

=end original

L<Possible attempt to put comments in qw() list|perldiag/"Possible attempt to put comments in qw() list">
と
L<Possible attempt to separate words with commas|perldiag/"Possible attempt to separate words with commas">
の二つの警告は相互に排他的ではなくなりました: 同じ C<qw> 構文が両方を
出力することがあります。

=item *

=begin original

The uninitialized warning for C<y///r> when C<$_> is implicit and
undefined now mentions the variable name, just like the non-/r variation
of the operator.

=end original

C<$_> が暗黙で未定義のときの C<y///r> の未初期化警告は、非 /r 系の
演算子と同様に、変数名を出力するようになりました。

=item *

=begin original

The 'Use of "foo" without parentheses is ambiguous' warning has been
extended to apply also to user-defined subroutines with a (;$)
prototype, and not just to built-in functions.

=end original

'Use of "foo" without parentheses is ambiguous' 警告は、組み込み
関数だけではなく、(;$) プロトタイプを持つユーザー定義サブルーチンにも
適用されるように拡張されました。

=item *

=begin original

Warnings that mention the names of lexical (C<my>) variables with
Unicode characters in them now respect the presence or absence of the
C<:utf8> layer on the output handle, instead of outputting UTF8
regardless.  Also, the correct names are included in the strings passed
to C<$SIG{__WARN__}> handlers, rather than the raw UTF8 bytes.

=end original

Unicode 文字のレキシカル (C<my>) 変数を出力する警告は、無条件で
UTF8 を出力するのではなく、出力ハンドルの C<:utf8> 層のありなしに
対応するようになりました。
また、正しい名前は生 UTF8 バイトではなく、C<$SIG{__WARN__}> ハンドラに
渡される文字列に含まれるようになりました。

=back

=head1 Utility Changes

(ツールの変更)

=head3 L<h2ph>

=over 4

=item *

=begin original

L<h2ph> used to generate code of the form

=end original

L<h2ph> は以下のような形のコードを生成していました

  unless(defined(&FOO)) {
    sub FOO () {42;}
  }

=begin original

But the subroutine is a compile-time declaration, and is hence unaffected
by the condition.  It has now been corrected to emit a string C<eval>
around the subroutine [perl #99368].

=end original

しかしサブルーチンはコンパイル時定義なので、条件の影響を受けません。
サブルーチンを C<eval> で囲んだ文字列を出力するように修正されました
[perl #99368]。

=back

=head3 L<splain>

=over 4

=item *

=begin original

F<splain> no longer emits backtraces with the first line number repeated.

=end original

F<splain> は最初の行番号を繰り返してバックトレースを出力しないように
なりました。

=begin original

This:

=end original

以下の出力は:

    Uncaught exception from user code:
            Cannot fwiddle the fwuddle at -e line 1.
     at -e line 1
            main::baz() called at -e line 1
            main::bar() called at -e line 1
            main::foo() called at -e line 1

=begin original

has become this:

=end original

以下のようになりました:

    Uncaught exception from user code:
            Cannot fwiddle the fwuddle at -e line 1.
            main::baz() called at -e line 1
            main::bar() called at -e line 1
            main::foo() called at -e line 1

=item *

=begin original

Some error messages consist of multiple lines that are listed as separate
entries in L<perldiag>.  splain has been taught to find the separate
entries in these cases, instead of simply failing to find the message.

=end original

一部のエラーメッセージは L<perldiag> に分割されたエントリとして
リストされている複数の行で構成されています。
splain はこのような場合に単にメッセージを見つけることに失敗するのではなく、
分割されたエントリを見つけるように教えるようになりました。

=back

=head3 L<zipdetails>

=over 4

=item *

=begin original

This is a new utility, included as part of an
L<IO::Compress::Base> upgrade.

=end original

これは新しいツールで、L<IO::Compress::Base> のアップグレードの一部として
含まれました。

=begin original

L<zipdetails> displays information about the internal record structure
of the zip file.  It is not concerned with displaying any details of
the compressed data stored in the zip file.

=end original

L<zipdetails> は zip ファイルの内部レコード構造についての情報を表示します。
zip ファイルに保管している圧縮データの詳細を表示することには
関心がありません。

=back

=head1 Configuration and Compilation

=over 4

=item *

=begin original

F<regexp.h> has been modified for compatibility with GCC's B<-Werror>
option, as used by some projects that include perl's header files (5.14.1).

=end original

F<regexp.h> は perl のヘッダファイルを含むいくつかのプロジェクトで
使われている GCC の C<-Werror> オプションとの互換性のために修正されました (5.14.1)。

=item *

=begin original

C<USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}> have been added the output of perl -V
as they have affect the behaviour of the interpreter binary (albeit only
in a small area).

=end original

インタプリタバイナリの振る舞い(但し小さい部分にだけ)に影響を与える
C<USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}> が perl -V の出力に
追加されました。

=item *

=begin original

The code and tests for L<IPC::Open2> have been moved from F<ext/IPC-Open2>
into F<ext/IPC-Open3>, as C<IPC::Open2::open2()> is implemented as a thin
wrapper around C<IPC::Open3::_open3()>, and hence is very tightly coupled to
it.

=end original

L<IPC::Open2> のコードとテストが F<ext/IPC-Open2> から F<ext/IPC-Open3> に
移動しました; C<IPC::Open2::open2()> は C<IPC::Open3::_open3()> への
薄いラッパーとして実装されているため、これと強く結びついているからです。

=item *

=begin original

The magic types and magic vtables are now generated from data in a new script
F<regen/mg_vtable.pl>, instead of being maintained by hand.  As different
EBCDIC variants can't agree on the code point for '~', the character to code
point conversion is done at build time by F<generate_uudmap> to a new generated
header F<mg_data.h>.  C<PL_vtbl_bm> and C<PL_vtbl_fm> are now defined by the
pre-processor as C<PL_vtbl_regexp>, instead of being distinct C variables.
C<PL_vtbl_sig> has been removed.

=end original

The magic types and magic vtables are now generated from data in a new script
F<regen/mg_vtable.pl>, instead of being maintained by hand.
異なった EBCDIC バリアントは符号位置として '~' を使えないので、
符号位置を変換の文字は F<generate_uudmap> から新しく生成されるヘッダ
F<mg_data.h> でビルド時に行われます。
C<PL_vtbl_bm> と C<PL_vtbl_fm> は明確な C の変数ではなく、
C<PL_vtbl_regexp> としてプリプロセッサで定義されるようになりました。
C<PL_vtbl_sig> は削除されました。
(TBT)

=item *

=begin original

Building with C<-DPERL_GLOBAL_STRUCT> works again.  This configuration is not
generally used.

=end original

C<-DPERL_GLOBAL_STRUCT> でのビルドが再び動作するようになりました。
この設定は普通使われません。

=item *

=begin original

Perl configured with I<MAD> now correctly frees C<MADPROP> structures when
OPs are freed.  C<MADPROP>s are now allocated with C<PerlMemShared_malloc()>

=end original

I<MAD> で設定されている Perl は OP が解放されるときに正しく
C<MADPROP> 構造体を正しく解放するようになりました。
C<MADPROP> は C<PerlMemShared_malloc()> で割り当てられるようになりました。

=item *

=begin original

F<makedef.pl> has been refactored.  This should have no noticeable affect on
any of the platforms that use it as part of their build (AIX, VMS, Win32).

=end original

F<makedef.pl> がリファクタリングされました。
これをビルドの一部として使っているプラットフォーム (AIX, VMS, Win32) に
顕著な影響を与えることはないはずです。

=item *

=begin original

C<useperlio> can no longer be disabled.

=end original

C<useperlio> は無効にならなくなりました。

=item *

=begin original

The file F<global.sym> is no longer needed, and has been removed.  It
contained a list of all exported functions, one of the files generated by
F<regen/embed.pl> from data in F<embed.fnc> and F<regen/opcodes>.  The code
has been refactored so that the only user of F<global.sym>, F<makedef.pl>,
now reads F<embed.fnc> and F<regen/opcodes> directly, removing the need to
store the list of exported functions in an intermediate file.

=end original

F<global.sym> は不要になったので削除されました。
これは全てのエクスポートされた関数の一覧で、F<embed.fnc> と
F<regen/opcodes> のデータから F<regen/embed.pl> で生成されたものです。
The code
has been refactored so that the only user of F<global.sym>, F<makedef.pl>,
now reads F<embed.fnc> and F<regen/opcodes> directly, removing the need to
store the list of exported functions in an intermediate file.
(TBT)

=begin original

As F<global.sym> was never installed, this change should not be visible
outside the build process.

=end original

F<global.sym> は決してインストールされなくなったので、この変更はビルド
プロセス以外では分からないはずです。

=item *

=begin original

F<pod/buildtoc>, used by the build process to build L<perltoc>, has been
refactored and simplified.  It now only contains code to build L<perltoc>;
the code to regenerate Makefiles has been moved to F<Porting/pod_rules.pl>.
It's a bug if this change has any material effect on the build process.

=end original

L<perltoc> をビルドするためのビルドプロセスで使われる F<pod/buildtoc> は
リファクタリングされ単純化されました。
L<perltoc> をビルドするコードだけが含まれるようになりました;
Makefiles を再生制するためのコードは F<Porting/pod_rules.pl> に
移動しました。
この変更がビルドプロセスに実質的な影響を与えているのはバグでした。

=item *

=begin original

F<pod/roffitall> is now built by F<pod/buildtoc>, instead of being
shipped with the distribution.  Its list of manpages is now generated
(and therefore current).  See also RT #103202 for an unresolved related
issue.

=end original

F<pod/roffitall> はそのまま出荷されるのではなく、F<pod/buildtoc> によって
ビルドされるようになりました。
この man ページの一覧は生成されるようになりました(従って最新です)。
未解決の関連問題である RT #103202 も参照してください。

=item *

=begin original

The man page for C<XS::Typemap> is no longer installed.  C<XS::Typemap>
is a test module which is not installed, hence installing its
documentation makes no sense.

=end original

C<XS::Typemap> の man ページはインストールされなくなりました。
C<XS::Typemap> はインストールされないテストモジュールなので、その
文書をインストールするのには意味はありません。

=item *

=begin original

The -Dusesitecustomize and -Duserelocatableinc options now work
together properly.

=end original

-Dusesitecustomize と -Duserelocatableinc のオプションは互いに正しく
動作するようになりました。

=back

=head1 Platform Support

(プラットフォーム対応)

=head2 Platform-Specific Notes

(プラットフォーム固有の注意)

=head3 Cygwin

=over 4

=item *

=begin original

Since version 1.7, Cygwin supports native UTF-8 paths.  If Perl is built
under that environment, directory and filenames will be UTF-8 encoded.

=end original

バージョン 1.7 から、Cygwin はネイティブな UTF-8 パスに対応しています。
Perl がこの環境でビルドされると、ディレクトリとファイル名は
UTF-8 エンコードされます。

=begin original

Cygwin does not initialize all original Win32 environment variables.  See
F<README.cygwin> for a discussion of the newly-added
C<Cygwin::sync_winenv()> function [perl #110190] and for
further links.

=end original

Cygwin は元々の Win32 環境変数の全てを初期化しません。
新しく追加された C<Cygwin::sync_winenv()> 関数 [perl #110190] と
さらなるリンクについては F<README.cygwin> を参照してください。

=back

=head3 HP-UX

=over 4

=item *

=begin original

HP-UX PA-RISC/64 now supports gcc-4.x

=end original

HP-UX PA-RISC/64 は gcc-4.x に対応しました。

=begin original

A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds. (5.14.2)

=end original

ソケットサイズを修正することで、HP-UX PA-RISC の 64bitall ビルドで
テストスイートがパスするようになりました。(5.14.2)

=back

=head3 VMS

=over 4

=item *

=begin original

Remove unnecessary includes, fix miscellaneous compiler warnings and
close some unclosed comments on F<vms/vms.c>.

=end original

F<vms/vms.c> にある不必要なインクルードを削除し、様々なコンパイラ警告を
修正し、いくつかの閉じていないコメントを閉じました。

=begin original

Remove sockadapt layer from the VMS build.

=end original

VMS ビルドから sockadapt 層を削除しました。

=item *

=begin original

Explicit support for VMS versions prior to v7.0 and DEC C versions
prior to v6.0 has been removed.

=end original

v7.0 より前の VMS と、v6.0 より前の DEC C の明示的な対応が削除されました。

=item *

=begin original

Since Perl 5.10.1, the home-grown C<stat> wrapper has been unable to
distinguish between a directory name containing an underscore and an
otherwise-identical filename containing a dot in the same position
(e.g., t/test_pl as a directory and t/test.pl as a file).  This problem
has been corrected.

=end original

Perl 5.10.1 から、自家製の C<stat> ラッパーは、下線を含むディレクトリ名と
同じ位置にドットのあるその他で区別できるファイル名 (例えば
ディレクトリとしての t/test_pl とファイルとしての t/test.pl) を
区別できませんでした。
この問題は修正されました。

=item *

=begin original

The build on VMS now allows names of the resulting symbols in C code for
Perl longer than 31 characters.  Symbols like
C<Perl__it_was_the_best_of_times_it_was_the_worst_of_times> can now be
created freely without causing the VMS linker to seize up.

=end original

VMS でのビルドは、結果として 31 文字よりも長くなる Perl のための C コードの
シンボル名を許すようになりました。
C<Perl__it_was_the_best_of_times_it_was_the_worst_of_times> のような
シンボルを自由に使っても VMS リンカが動かなくならなくなりました。

=back

=head3 GNU/Hurd

=begin original

Numerous build and test failures on GNU/Hurd have been resolved with hints
for building DBM modules, detection of the library search path, and enabling
of large file support.

=end original

GNU/Hurd での多くのビルドおよびテストの失敗が、DBM モジュールのビルドの
ヒント、ライブラリ検索パスの検出、大容量ファイル対応の有効化によって
解決しました。

=head3 OpenVOS

=begin original

Perl is now built with dynamic linking on OpenVOS, the minimum supported
version of which is now Release 17.1.0.

=end original

Perl は OpenVOS の動的リンクでビルドできるようになり、最小対応バージョンが
リリース 17.1.0 になりました。

=head3 SunOS

=begin original

The CC workshop C++ compiler is now detected and used on systems that ship
without cc.

=end original

CC workshop C++ compiler が検出されるようになり、cc なしのシステムで
使用するようになりました。

=head1 Internal Changes

(内部の変更)

=over 4

=item *

=begin original

The compiled representation of formats is now stored via the C<mg_ptr> of
their C<PERL_MAGIC_fm>.  Previously it was stored in the string buffer,
beyond C<SvLEN()>, the regular end of the string.  C<SvCOMPILED()> and
C<SvCOMPILED_{on,off}()> now exist solely for compatibility for XS code.
The first is always 0, the other two now no-ops. (5.14.1)

=end original

フォーマットのコンパイル表現は PERL_MAGIC_fm の mg_ptr 経由で
保管されるようになりました。
以前は通常の文字列の末尾である SvLEN() の向こうの文字列バッファに
保管されていました。
SvCOMPILED() と SvCOMPILED_{on,off}() は XS コードとの互換性のためだけに
存在するようになりました。
最初は常に 0、後の二つは何もしなくなりました (5.14.1)。

=item *

=begin original

Some global variables have been marked C<const>, members in the interpreter
structure have been re-ordered, and the opcodes have been re-ordered.  The
op C<OP_AELEMFAST> has been split into C<OP_AELEMFAST> and C<OP_AELEMFAST_LEX>.

=end original

いくつかのグローバル変数が C<const> としてマークされ、インタプリタ
構造体のメンバーの順序が入れ替えられ、オペコードの順序が入れ替えられました。
C<OP_AELEMFAST> op は C<OP_AELEMFAST> と C<OP_AELEMFAST_LEX> に
分割されました。

=item *

=begin original

When empting a hash of its elements (e.g. via undef(%h), or %h=()), HvARRAY
field is no longer temporarily zeroed.  Any destructors called on the freed
elements see the remaining elements.  Thus, %h=() becomes more like
C<delete $h{$_} for keys %h>.

=end original

(例えば undef(%h) や %h=() によって) ハッシュの要素を空にするとき、
HvARRAY フィールドは一時的に 0 にされなくなりました。
解放される要素で呼び出される任意のデストラクタは残っている要素を
見ることができます。
従って、%h=() は、より C<delete $h{$_} for keys %h> に似ているものに
なりました。

=item *

=begin original

Boyer-Moore compiled scalars are now PVMGs, and the Boyer-Moore tables are now
stored via the mg_ptr of their C<PERL_MAGIC_bm>.
Previously they were PVGVs, with the tables stored in
the string buffer, beyond C<SvLEN()>.  This eliminates
the last place where the core stores data beyond C<SvLEN()>.

=end original

ボイヤー-ムーアコンパイル済みスカラは PVMG となり、
ボイヤー-ムーアテーブルは C<PERL_MAGIC_bm> の mg_ptr 経由で
補完されるようになりました。
以前はこれらは PVGV で、テーブルは文字列バッファの C<SvLEN()> を超えた
位置に補完されていました。
これによりコアが C<SvLEN()> を声対置にデータを補完する最後の場所が
除去されました。

=item *

=begin original

Simplified logic in C<Perl_sv_magic()> introduces a small change of
behaviour for error cases involving unknown magic types.  Previously, if
C<Perl_sv_magic()> was passed a magic type unknown to it, it would

=end original

C<Perl_sv_magic()> のロジックが単純化され、不明なマジック型に関係する
エラーの場合にわずかに振る舞いが変更されました。
以前は、C<Perl_sv_magic()> に不明なマジック型が渡されると:

=over

=item 1.

=begin original

Croak "Modification of a read-only value attempted" if read only

=end original

読み込み専用なら "Modification of a read-only value attempted" で
croak する

=item 2.

=begin original

Return without error if the SV happened to already have this magic

=end original

SV がたまたますでにこのマジックを保持しているならエラーなしで返る

=item 3.

=begin original

otherwise croak "Don't know how to handle magic of type \\%o"

=end original

それ以外なら "Don't know how to handle magic of type \\%o" で croak する

=back

=begin original

Now it will always croak "Don't know how to handle magic of type \\%o", even
on read only values, or SVs which already have the unknown magic type.

=end original

今では、読み込み専用の値でも、既に不明なマジック型を保持している SV でも
常に "Don't know how to handle magic of type \\%o" で croak します。

=item *

=begin original

The experimental C<fetch_cop_label> function has been renamed to
C<cop_fetch_label>.

=end original

実験的な C<fetch_cop_label> 関数は C<cop_fetch_label> に名前が
変更されました。

=item *

=begin original

The C<cop_store_label> function has been added to the API, but is
experimental.

=end original

C<cop_store_label> 関数が API に追加されましたが、実験的なものです。

=item *

=begin original

F<embedvar.h> has been simplified, and one level of macro indirection for
PL_* variables has been removed for the default (non-multiplicity)
configuration.  PERLVAR*() macros now directly expand their arguments to
tokens such as C<PL_defgv>, instead of expanding to C<PL_Idefgv>, with
F<embedvar.h> defining a macro to map C<PL_Idefgv> to C<PL_defgv>.  XS code
which has unwarranted chumminess with the implementation may need updating.

=end original

F<embedvar.h> が単純化され、デフォルトの (非多重化) 設定での PL_*
変数の 1 レベルの間接マクロが削除されました。
PERLVAR*() マクロは、now directly expand their arguments to
tokens such as C<PL_defgv>, instead of expanding to C<PL_Idefgv>, with
F<embedvar.h> defining a macro to map C<PL_Idefgv> to C<PL_defgv>.
実装上の保証されていない友好性をもつ XS コードは更新が必要かもしれません。
(TBT)

=item *

=begin original

An API has been added to explicitly choose whether or not to export XSUB
symbols.  More detail can be found in the comments for commit e64345f8.

=end original

XSUB シンボルをエクスポートするかどうかを明示的に選択するための API が
追加されました。
さらなる詳細はコミット e64345f8 のコメントにあります。

=item *

=begin original

The C<is_gv_magical_sv> function has been eliminated and merged with
C<gv_fetchpvn_flags>.  It used to be called to determine whether a GV
should be autovivified in rvalue context.  Now it has been replaced with a
new C<GV_ADDMG> flag (not part of the API).

=end original

C<is_gv_magical_sv> 関数が削除され、C<gv_fetchpvn_flags> と統合されました。
GV が右辺値コンテキストで自動有効化されるべきかどうかを決定するために
呼び出されていました。
これは (API の一部ではない) 新しい C<GV_ADDMG> フラグで置き換えられました。

=item *

=begin original

The returned code point from the function C<utf8n_to_uvuni()>
when the input is malformed UTF-8, malformations are allowed, and
C<utf8> warnings are off is now the Unicode REPLACEMENT CHARACTER
whenever the malformation is such that no well-defined code point can be
computed.  Previously the returned value was essentially garbage.  The
only malformations that have well-defined values are a zero-length
string (0 is the return), and overlong UTF-8 sequences.

=end original

The returned code point from the function C<utf8n_to_uvuni()>
when the input is malformed UTF-8, malformations are allowed, and
C<utf8> warnings are off is now the Unicode REPLACEMENT CHARACTER
whenever the malformation is such that no well-defined code point can be
computed.
以前は返される値は基本的にはごみでした。
よく知られている値の唯一の不正形は長さ 0 の文字列 (0 が返されます) と
長すぎる UTF-8 シーケンスです。
(TBT)

=item *

=begin original

The returned code point from the function C<utf8n_to_uvuni()>
when the input is malformed UTF-8, malformations are allowed, and
C<utf8> warnings are off is now the Unicode REPLACEMENT CHARACTER
whenever the malformation is such that no well-defined code point can be
computed.  Previously the returned value was essentially garbage.  The
only malformations that have well-defined values are a zero-length
string (0 is the return), and overlong UTF-8 sequences.

=end original

The returned code point from the function C<utf8n_to_uvuni()>
when the input is malformed UTF-8, malformations are allowed, and
C<utf8> warnings are off is now the Unicode REPLACEMENT CHARACTER
whenever the malformation is such that no well-defined code point can be
computed.  Previously the returned value was essentially garbage.  The
only malformations that have well-defined values are a zero-length
string (0 is the return), and overlong UTF-8 sequences.
(TBT)

=item *

=begin original

Padlists are now marked C<AvREAL>; i.e., reference-counted.  They have
always been reference-counted, but were not marked real, because F<pad.c>
did its own clean-up, instead of using the usual clean-up code in F<sv.c>.
That caused problems in thread cloning, so now the C<AvREAL> flag is on,
but is turned off in F<pad.c> right before the padlist is freed (after
F<pad.c> has done its custom freeing of the pads).

=end original

パッドリストは C<AvREAL> としてマークされるようになりました; つまり、
参照カウントされます。
これは常に参照カウントされますが、通常の F<sv.c> のクリーンナップ
コードを使うのではなく、F<pad.c> が自身でクリーンナップしていたため、
実際にはマークされていませんでした。
これはスレッドのクローン化で問題を引き起こすので、 C<AvREAL> フラグを
オンにするようになりましたが、パッドリストが解放される直前 (F<pad.c> が
独自のパッドの解放を行った後) F<pad.c> によってオフにされます。

=item *

=begin original

All the C files that make up the Perl core have been converted to UTF-8.

=end original

Perl コアの全ての C ファイルが UTF-8 に変換されました。

=item *

=begin original

These new functions have been added as part of the work on Unicode symbols:

=end original

以下の新しい関数が Unicode 文字での作業の一部として追加されました。

    HvNAMELEN
    HvNAMEUTF8
    HvENAMELEN
    HvENAMEUTF8
    gv_init_pv
    gv_init_pvn
    gv_init_pvsv
    gv_fetchmeth_pv
    gv_fetchmeth_pvn
    gv_fetchmeth_sv
    gv_fetchmeth_pv_autoload
    gv_fetchmeth_pvn_autoload
    gv_fetchmeth_sv_autoload
    gv_fetchmethod_pv_flags
    gv_fetchmethod_pvn_flags
    gv_fetchmethod_sv_flags
    gv_autoload_pv
    gv_autoload_pvn
    gv_autoload_sv
    newGVgen_flags
    sv_derived_from_pv
    sv_derived_from_pvn
    sv_derived_from_sv
    sv_does_pv
    sv_does_pvn
    sv_does_sv
    whichsig_pv
    whichsig_pvn
    whichsig_sv
    newCONSTSUB_flags

=begin original

The gv_fetchmethod_*_flags functions, like gv_fetchmethod_flags, are
experimental and may change in a future release.

=end original

gv_fetchmethod_*_flags 関数は、gv_fetchmethod_flags と同様に実験的であり、
将来のリリースで変更されるかもしれません。

=item *

=begin original

The following functions were added.  These are I<not> part of the API:

=end original

以下の関数が追加されました。
これらは API の一部 I<ではありません> 。

    GvNAMEUTF8
    GvENAMELEN
    GvENAME_HEK
    CopSTASH_flags
    CopSTASH_flags_set
    PmopSTASH_flags
    PmopSTASH_flags_set
    sv_sethek
    HEKfARG

=begin original

There is also a C<HEKf> macro corresponding to C<SVf>, for
interpolating HEKs in formatted strings.

=end original

フォーマットされた文字列の HEK を展開するために、C<SVf> に対応する
C<HEKf> マクロもあります。

=item *

=begin original

C<sv_catpvn_flags> takes a couple of new internal-only flags,
C<SV_CATBYTES> and C<SV_CATUTF8>, which tell it whether the char array to
be concatenated is UTF8.  This allows for more efficient concatenation than
creating temporary SVs to pass to C<sv_catsv>.

=end original

C<sv_catpvn_flags> は二つの新しい内部専用のフラグ C<SV_CATBYTES> と
C<SV_CATUTF8> を取るようになり、連結される文字配列が UTF8 かどうかを
知らせます。
これにより C<sv_catsv> に渡すために一時的な SV を作成するよりも
より効率的に結合を行えるようになります。

=item *

=begin original

For XS AUTOLOAD subs, $AUTOLOAD is set once more, as it was in 5.6.0.  This
is in addition to setting C<SvPVX(cv)>, for compatibility with 5.8 to 5.14.
See L<perlguts/Autoloading with XSUBs>.

=end original

XS AUTOLOAD サブルーチンのために、$AUTOLOAD が 5.6.0 の頃のように
再び設定されるようになりました。
これは、5.8 から 5.14 の互換性のために、C<SvPVX(cv)> の設定に追加されます。
L<perlguts/Autoloading with XSUBs> を参照してください。

=item *

=begin original

Perl now checks whether the array (the linearised isa) returned by a MRO
plugin begins with the name of the class itself, for which the array was
created, instead of assuming that it does.  This prevents the first element
from being skipped during method lookup.  It also means that
C<mro::get_linear_isa> may return an array with one more element than the
MRO plugin provided [perl #94306].

=end original

Perl now checks whether the array (the linearised isa) returned by a MRO
plugin begins with the name of the class itself, for which the array was
created, instead of assuming that it does.
これはメソッド検索中に最初の要素がスキップされるのを防ぎます。
これはまた、C<mro::get_linear_isa> が MRO プラグインが提供するよりも一つ
要素の多い配列を返すかもしれないことも意味します [perl #94306]。
(TBT)

=item *

=begin original

C<PL_curstash> is now reference-counted.

=end original

C<PL_curstash> は参照カウントされるようになりました。

=item *

=begin original

There are now feature bundle hints in C<PL_hints> (C<$^H>) that version
declarations use, to avoid having to load F<feature.pm>.  One setting of
the hint bits indicates a "custom" feature bundle, which means that the
entries in C<%^H> still apply.  F<feature.pm> uses that.

=end original

F<feature.pm> を読み込む必要性を避けるために、バージョン宣言に使う
新しい機能バンドルヒント C<PL_hints> (C<$^H>) が追加されました。
ヒントビットの一つの設定は「カスタム」機能バンドルを示していて、
これは C<%^H> のエントリがまだ適用されていることを意味します。
F<feature.pm> はこれを使います。

=begin original

The C<HINT_FEATURE_MASK> macro is defined in F<perl.h> along with other
hints.  Other macros for setting and testing features and bundles are in
the new F<feature.h>.  C<FEATURE_IS_ENABLED> (which has moved to
F<feature.h>) is no longer used throughout the codebase, but more specific
macros, e.g., C<FEATURE_SAY_IS_ENABLED>, that are defined in F<feature.h>.

=end original

C<HINT_FEATURE_MASK> マクロがその他のヒントと共に F<perl.h> に
定義されました。
機能とバンドルを設定およびテストするためのその他のマクロは新しい
F<feature.h> にあります。
(F<feature.h> に移動した) C<FEATURE_IS_ENABLED> はコードベース全体から
もはや使われなくなりましたが、 C<FEATURE_SAY_IS_ENABLED> のような
より限定的なマクロは F<feature.h> に定義されています。

=item *

=begin original

F<lib/feature.pm> is now a generated file, created by the new
F<regen/feature.pl> script, which also generates F<feature.h>.

=end original

F<lib/feature.pm> は新しい F<regen/feature.pl> スクリプトで生成される
ファイルとなり、このスクリプトは F<feature.h> も生成します。

=item *

=begin original

Tied arrays are now always C<AvREAL>.  If C<@_> or C<DB::args> is tied, it
is reified first, to make sure this is always the case.

=end original

tie された配列は常に C<AvREAL> になりました。
C<@_> または C<DB::args> が tie されると、常に当てはまるように、
最初に具体化されます。

=item *

=begin original

Two new functions C<utf8_to_uvchr_buf()> and C<utf8_to_uvuni_buf()> have
been added.  These are the same as C<utf8_to_uvchr> and
C<utf8_to_uvuni> (which are now deprecated), but take an extra parameter
that is used to guard against reading beyond the end of the input
string.
See L<perlapi/utf8_to_uvchr_buf> and L<perlapi/utf8_to_uvuni_buf>.

=end original

二つの新しい関数 C<utf8_to_uvchr_buf()> と C<utf8_to_uvuni_buf()> が
追加されました。
これらは(非推奨となった) C<utf8_to_uvchr> および C<utf8_to_uvuni> と
同じですが、入力文字列の末尾を超えて読み込むのを守るために使われる追加の
引数を取ります。
L<perlapi/utf8_to_uvchr_buf> と L<perlapi/utf8_to_uvuni_buf> を
参照してください。

=item *

=begin original

The regular expression engine now does TRIE case insensitive matches
under Unicode. This may change the output of C<< use re 'debug'; >>,
and will speed up various things.

=end original

正規表現エンジンは Unicode での大文字小文字を無視したマッチングに TRIE を
するようになりました。
これにより C<< use re 'debug'; >> の出力が変わる可能性があり、
また色々なことが高速化します。

=item *

=begin original

There is a new C<wrap_op_checker()> function, which provides a thread-safe
alternative to writing to C<PL_check> directly.

=end original

C<PL_check> を直接書くためのスレッドセーフな代替策を提供するために、
C<wrap_op_checker()> 関数が追加されました。

=back

=head1 Selected Bug Fixes

(バグ修正の抜粋)

=head2 Array and hash

(配列とハッシュ)

=over

=item *

=begin original

A bug has been fixed that would cause a "Use of freed value in iteration"
error if the next two hash elements that would be iterated over are
deleted [perl #85026]. (5.14.1)

=end original

反復される次の二つのハッシュ要素が削除されたときに
"Use of freed value in iteration" エラーが出るバグが修正されました
[perl #85026]。(5.14.1)

=item *

=begin original

Deleting the current hash iterator (the hash element that would be returend
by the next call to C<each>) in void context used not to free it
[perl #85026].

=end original

Deleting the current hash iterator (the hash element that would be returend
by the next call to C<each>) in void context used not to free it
[perl #85026].
(TBT)

=item *

=begin original

Deletion of methods via C<delete $Class::{method}> syntax used to update
method caches if called in void context, but not scalar or list context.

=end original

Deletion of methods via C<delete $Class::{method}> syntax used to update
method caches if called in void context, but not scalar or list context.
(TBT)

=item *

=begin original

When hash elements are deleted in void context, the internal hash entry is
now freed before the value is freed, to prevent destructors called by that
latter freeing from seeing the hash in an inconsistent state.  It was
possible to cause double-frees if the destructor freed the hash itself
[perl #100340].

=end original

When hash elements are deleted in void context, the internal hash entry is
now freed before the value is freed, to prevent destructors called by that
latter freeing from seeing the hash in an inconsistent state.  It was
possible to cause double-frees if the destructor freed the hash itself
[perl #100340].
(TBT)

=item *

=begin original

A C<keys> optimisation in Perl 5.12.0 to make it faster on empty hashes
caused C<each> not to reset the iterator if called after the last element
was deleted.

=end original

A C<keys> optimisation in Perl 5.12.0 to make it faster on empty hashes
caused C<each> not to reset the iterator if called after the last element
was deleted.
(TBT)

=item *

=begin original

Freeing deeply nested hashes no longer crashes [perl #44225].

=end original

Freeing deeply nested hashes no longer crashes [perl #44225].
(TBT)

=item *

=begin original

It is possible from XS code to create hashes with elements that have no
values.  The hash element and slice operators used to crash
when handling these in lvalue context.  They now
produce a "Modification of non-creatable hash value attempted" error
message.

=end original

It is possible from XS code to create hashes with elements that have no
values.  The hash element and slice operators used to crash
when handling these in lvalue context.  They now
produce a "Modification of non-creatable hash value attempted" error
message.
(TBT)

=item *

=begin original

If list assignment to a hash or array triggered destructors that freed the
hash or array itself, a crash would ensue.  This is no longer the case
[perl #107440].

=end original

If list assignment to a hash or array triggered destructors that freed the
hash or array itself, a crash would ensue.  This is no longer the case
[perl #107440].
(TBT)

=item *

=begin original

It used to be possible to free the typeglob of a localised array or hash
(e.g., C<local @{"x"}; delete $::{x}>), resulting in a crash on scope exit.

=end original

It used to be possible to free the typeglob of a localised array or hash
(e.g., C<local @{"x"}; delete $::{x}>), resulting in a crash on scope exit.
(TBT)

=item *

=begin original

Some core bugs affecting L<Hash::Util> have been fixed: locking a hash
element that is a glob copy no longer causes subsequent assignment to it to
corrupt the glob (5.14.2), and unlocking a hash element that holds a
copy-on-write scalar no longer causes modifications to that scalar to
modify other scalars that were sharing the same string buffer.

=end original

Some core bugs affecting L<Hash::Util> have been fixed: locking a hash
element that is a glob copy no longer causes subsequent assignment to it to
corrupt the glob (5.14.2), and unlocking a hash element that holds a
copy-on-write scalar no longer causes modifications to that scalar to
modify other scalars that were sharing the same string buffer.
(TBT)

=back

=head2 C API fixes

(C API の修正)

=over

=item *

=begin original

The C<newHVhv> XS function now works on tied hashes, instead of crashing or
returning an empty hash.

=end original

The C<newHVhv> XS function now works on tied hashes, instead of crashing or
returning an empty hash.
(TBT)

=item *

=begin original

The C<SvIsCOW> C macro now returns false for read-only copies of typeglobs,
such as those created by:

=end original

The C<SvIsCOW> C macro now returns false for read-only copies of typeglobs,
such as those created by:
(TBT)

  $hash{elem} = *foo;
  Hash::Util::lock_value %hash, 'elem';

=begin original

It used to return true.

=end original

It used to return true.
(TBT)

=item *

=begin original

The C<SvPVutf8> C function no longer tries to modify its argument,
resulting in errors [perl #108994].

=end original

The C<SvPVutf8> C function no longer tries to modify its argument,
resulting in errors [perl #108994].
(TBT)

=item *

=begin original

C<SvPVutf8> now works properly with magical variables.

=end original

C<SvPVutf8> now works properly with magical variables.
(TBT)

=item *

=begin original

C<SvPVbyte> now works properly non-PVs.

=end original

C<SvPVbyte> now works properly non-PVs.
(TBT)

=item *

=begin original

When presented with malformed UTF-8 input, the XS-callable functions
C<is_utf8_string()>, C<is_utf8_string_loc()>, and
C<is_utf8_string_loclen()> could read beyond the end of the input
string by up to 12 bytes.  This no longer happens.  [perl #32080].
However, currently, C<is_utf8_char()> still has this defect, see
L</is_utf8_char()> above.

=end original

When presented with malformed UTF-8 input, the XS-callable functions
C<is_utf8_string()>, C<is_utf8_string_loc()>, and
C<is_utf8_string_loclen()> could read beyond the end of the input
string by up to 12 bytes.  This no longer happens.  [perl #32080].
However, currently, C<is_utf8_char()> still has this defect, see
L</is_utf8_char()> above.
(TBT)

=item *

=begin original

The C-level C<pregcomp> function could become confused as to whether the
pattern was in UTF8 if the pattern was an overloaded, tied, or otherwise
magical scalar [perl #101940].

=end original

The C-level C<pregcomp> function could become confused as to whether the
pattern was in UTF8 if the pattern was an overloaded, tied, or otherwise
magical scalar [perl #101940].
(TBT)

=back

=head2 Compile-time hints

(コンパイル時ヒント)

=over

=item *

=begin original

Tying C<%^H> no longer causes perl to crash or ignore the contents of
C<%^H> when entering a compilation scope [perl #106282].

=end original

Tying C<%^H> no longer causes perl to crash or ignore the contents of
C<%^H> when entering a compilation scope [perl #106282].
(TBT)

=item *

=begin original

C<eval $string> and C<require> used not to
localise C<%^H> during compilation if it
was empty at the time the C<eval> call itself was compiled.  This could
lead to scary side effects, like C<use re "/m"> enabling other flags that
the surrounding code was trying to enable for its caller [perl #68750].

=end original

C<eval $string> and C<require> used not to
localise C<%^H> during compilation if it
was empty at the time the C<eval> call itself was compiled.  This could
lead to scary side effects, like C<use re "/m"> enabling other flags that
the surrounding code was trying to enable for its caller [perl #68750].
(TBT)

=item *

=begin original

C<eval $string> and C<require> no longer localise hints (C<$^H> and C<%^H>)
at run time, but only during compilation of the $string or required file.
This makes C<BEGIN { $^H{foo}=7 }> equivalent to
C<BEGIN { eval '$^H{foo}=7' }> [perl #70151].

=end original

C<eval $string> and C<require> no longer localise hints (C<$^H> and C<%^H>)
at run time, but only during compilation of the $string or required file.
This makes C<BEGIN { $^H{foo}=7 }> equivalent to
C<BEGIN { eval '$^H{foo}=7' }> [perl #70151].
(TBT)

=item *

=begin original

Creating a BEGIN block from XS code (via C<newXS> or C<newATTRSUB>) would,
on completion, make the hints of the current compiling code the current
hints.  This could cause warnings to occur in a non-warning scope.

=end original

Creating a BEGIN block from XS code (via C<newXS> or C<newATTRSUB>) would,
on completion, make the hints of the current compiling code the current
hints.  This could cause warnings to occur in a non-warning scope.
(TBT)

=back

=head2 Copy-on-write scalars

(コピーオンライトスカラ)

=begin original

Copy-on-write or shared hash key scalars
were introduced in 5.8.0, but most Perl code
did not encounter them (they were used mostly internally).  Perl
5.10.0 extended them, such that assigning C<__PACKAGE__> or a
hash key to a scalar would make it copy-on-write.  Several parts
of Perl were not updated to account for them, but have now been fixed.

=end original

Copy-on-write or shared hash key scalars
were introduced in 5.8.0, but most Perl code
did not encounter them (they were used mostly internally).  Perl
5.10.0 extended them, such that assigning C<__PACKAGE__> or a
hash key to a scalar would make it copy-on-write.  Several parts
of Perl were not updated to account for them, but have now been fixed.
(TBT)

=over

=item *

=begin original

C<utf8::decode> had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834]. (5.14.2)

=end original

C<utf8::decode> には、コピーオンライトスカラの文字列バッファをその場で
(つまりコピーせずに)修正するという扱いにくいバグがありました。
これにより、ハッシュ中に同じキーを持つ二つの要素が出来ていました
[perl #91834]。(5.14.2)

=item *

=begin original

Lvalue subroutines were not allowing COW scalars to be returned.  This was
fixed for lvalue scalar context in Perl 5.12.3 and 5.14.0, but list context
was not fixed until this release.

=end original

Lvalue subroutines were not allowing COW scalars to be returned.  This was
fixed for lvalue scalar context in Perl 5.12.3 and 5.14.0, but list context
was not fixed until this release.
(TBT)

=item *

=begin original

Elements of restricted hashes (see the L<fields> pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(C<%hash = ()>). (5.14.2)

=end original

制限ハッシュ (L<fields> プラグマ参照)の要素にコピーオンライトの値が
含まれていると、削除したりクリアしたり (C<%hash = ()>)
出来なくなっていました。(5.14.2)

=item *

=begin original

Localising a tied variable used to make it read-only if it contained a
copy-on-write string. (5.14.2)

=end original

tie された変数をローカル化するときに、コピーオンライト文字列を含んでいると
読み込み専用になっていました。(5.14.2)

=item *

=begin original

Assigning a copy-on-write string to a stash
element no longer causes a double free.  Regardless of this change, the
results of such assignments are still undefined.

=end original

Assigning a copy-on-write string to a stash
element no longer causes a double free.  Regardless of this change, the
results of such assignments are still undefined.
(TBT)

=item *

=begin original

Assigning a copy-on-write string to a tied variable no longer stops that
variable from being tied if it happens to be a PVMG or PVLV internally.

=end original

Assigning a copy-on-write string to a tied variable no longer stops that
variable from being tied if it happens to be a PVMG or PVLV internally.
(TBT)

=item *

=begin original

Doing a substitution on a tied variable returning a copy-on-write
scalar used to cause an assertion failure or an "Attempt to free
nonexistent shared string" warning.

=end original

Doing a substitution on a tied variable returning a copy-on-write
scalar used to cause an assertion failure or an "Attempt to free
nonexistent shared string" warning.
(TBT)

=item *

=begin original

This one is a regression from 5.12: In 5.14.0, the bitwise assignment
operators C<|=>, C<^=> and C<&=> started leaving the left-hand side
undefined if it happened to be a copy-on-write string [perl #108480].

=end original

This one is a regression from 5.12: In 5.14.0, the bitwise assignment
operators C<|=>, C<^=> and C<&=> started leaving the left-hand side
undefined if it happened to be a copy-on-write string [perl #108480].
(TBT)

=item *

=begin original

L<Storable>, L<Devel::Peek> and L<PerlIO::scalar> had similar problems.
See L</Updated Modules and Pragmata>, above.

=end original

L<Storable>, L<Devel::Peek> and L<PerlIO::scalar> had similar problems.
See L</Updated Modules and Pragmata>, above.
(TBT)

=back

=head2 The debugger

(デバッガ)

=over

=item *

=begin original

F<dumpvar.pl>, and consequently the C<x> command in the debugger, have been
fixed to handle objects blessed into classes whose names contain "=".  The
contents of such objects used not to be dumped [perl #101814].

=end original

F<dumpvar.pl>, and consequently the C<x> command in the debugger, have been
fixed to handle objects blessed into classes whose names contain "=".  The
contents of such objects used not to be dumped [perl #101814].
(TBT)

=item *

=begin original

The "R" command for restarting a debugger session has been fixed to work on
Windows, or any other system lacking a C<POSIX::_SC_OPEN_MAX> constant
[perl #87740].

=end original

The "R" command for restarting a debugger session has been fixed to work on
Windows, or any other system lacking a C<POSIX::_SC_OPEN_MAX> constant
[perl #87740].
(TBT)

=item *

=begin original

The C<#line 42 foo> directive used not to update the arrays of lines used
by the debugger if it occurred in a string eval.  This was partially fixed
in 5.14, but it only worked for a single C<#line 42 foo> in each eval.  Now
it works for multiple.

=end original

The C<#line 42 foo> directive used not to update the arrays of lines used
by the debugger if it occurred in a string eval.  This was partially fixed
in 5.14, but it only worked for a single C<#line 42 foo> in each eval.  Now
it works for multiple.
(TBT)

=item *

=begin original

When subroutine calls are intercepted by the debugger, the name of the
subroutine or a reference to it is stored in C<$DB::sub>, for the debugger
to access.  In some cases (such as C<$foo = *bar; undef *bar; &$foo>)
C<$DB::sub> would be set to a name that could not be used to find the
subroutine, and so the debugger's attempt to call it would fail.  Now the
check to see whether a reference is needed is more robust, so those
problems should not happen anymore [rt.cpan.org #69862].

=end original

When subroutine calls are intercepted by the debugger, the name of the
subroutine or a reference to it is stored in C<$DB::sub>, for the debugger
to access.  In some cases (such as C<$foo = *bar; undef *bar; &$foo>)
C<$DB::sub> would be set to a name that could not be used to find the
subroutine, and so the debugger's attempt to call it would fail.  Now the
check to see whether a reference is needed is more robust, so those
problems should not happen anymore [rt.cpan.org #69862].
(TBT)

=item *

=begin original

Every subroutine has a filename associated with it that the debugger uses.
The one associated with constant subroutines used to be misallocated when
cloned under threads.  Consequently, debugging threaded applications could
result in memory corruption [perl #96126].

=end original

Every subroutine has a filename associated with it that the debugger uses.
The one associated with constant subroutines used to be misallocated when
cloned under threads.  Consequently, debugging threaded applications could
result in memory corruption [perl #96126].
(TBT)

=back

=head2 Dereferencing operators

(デリファレンス演算子)

=over

=item *

=begin original

C<defined(${"..."})>, C<defined(*{"..."})>, etc., used to
return true for most, but not all built-in variables, if
they had not been used yet.  This bug affected C<${^GLOBAL_PHASE}> and
C<${^UTF8CACHE}>, among others.  It also used to return false if the
package name was given as well (C<${"::!"}>) [perl #97978, #97492].

=end original

C<defined(${"..."})>, C<defined(*{"..."})>, etc., used to
return true for most, but not all built-in variables, if
they had not been used yet.  This bug affected C<${^GLOBAL_PHASE}> and
C<${^UTF8CACHE}>, among others.  It also used to return false if the
package name was given as well (C<${"::!"}>) [perl #97978, #97492].
(TBT)

=item *

=begin original

Perl 5.10.0 introduced a similar bug: C<defined(*{"foo"})> where "foo"
represents the name of a built-in global variable used to return false if
the variable had never been used before, but only on the I<first> call.
This, too, has been fixed.

=end original

Perl 5.10.0 introduced a similar bug: C<defined(*{"foo"})> where "foo"
represents the name of a built-in global variable used to return false if
the variable had never been used before, but only on the I<first> call.
This, too, has been fixed.
(TBT)

=item *

=begin original

Since 5.6.0, C<*{ ... }> has been inconsistent in how it treats undefined
values.  It would die in strict mode or lvalue context for most undefined
values, but would be treated as the empty string (with a warning) for the
specific scalar return by C<undef()> (C<&PL_sv_undef> internally).  This
has been corrected.  C<undef()> is now treated like other undefined
scalars, as in Perl 5.005.

=end original

Since 5.6.0, C<*{ ... }> has been inconsistent in how it treats undefined
values.  It would die in strict mode or lvalue context for most undefined
values, but would be treated as the empty string (with a warning) for the
specific scalar return by C<undef()> (C<&PL_sv_undef> internally).  This
has been corrected.  C<undef()> is now treated like other undefined
scalars, as in Perl 5.005.
(TBT)

=back

=head2 Filehandle, last-accessed

(ファイルハンドル、最終更新)

=begin original

Perl has an internal variable that stores the last filehandle to be
accessed.  It is used by C<$.> and by C<tell> and C<eof> without
arguments.

=end original

Perl has an internal variable that stores the last filehandle to be
accessed.  It is used by C<$.> and by C<tell> and C<eof> without
arguments.
(TBT)

=over

=item *

=begin original

It used to be possible to set this internal variable to a glob copy and
then modify that glob copy to be something other than a glob, and still
have the last-accessed filehandle associated with the variable after
assigning a glob to it again:

=end original

It used to be possible to set this internal variable to a glob copy and
then modify that glob copy to be something other than a glob, and still
have the last-accessed filehandle associated with the variable after
assigning a glob to it again:
(TBT)

    my $foo = *STDOUT;  # $foo is a glob copy
    <$foo>;             # $foo is now the last-accessed handle
    $foo = 3;           # no longer a glob
    $foo = *STDERR;     # still the last-accessed handle

=begin original

Now the C<$foo = 3> assignment unsets that internal variable, so there
is no last-accessed filehandle, just as if C<< <$foo> >> had never
happened.

=end original

Now the C<$foo = 3> assignment unsets that internal variable, so there
is no last-accessed filehandle, just as if C<< <$foo> >> had never
happened.
(TBT)

=begin original

This also prevents some unrelated handle from becoming the last-accessed
handle if $foo falls out of scope and the same internal SV gets used for
another handle [perl #97988].

=end original

This also prevents some unrelated handle from becoming the last-accessed
handle if $foo falls out of scope and the same internal SV gets used for
another handle [perl #97988].
(TBT)

=item *

=begin original

A regression in 5.14 caused these statements not to set that internal
variable:

=end original

A regression in 5.14 caused these statements not to set that internal
variable:
(TBT)

    my $fh = *STDOUT;
    tell $fh;
    eof  $fh;
    seek $fh, 0,0;
    tell     *$fh;
    eof      *$fh;
    seek     *$fh, 0,0;
    readline *$fh;

=begin original

This is now fixed, but C<tell *{ *$fh }> still has the problem, and it
is not clear how to fix it [perl #106536].

=end original

This is now fixed, but C<tell *{ *$fh }> still has the problem, and it
is not clear how to fix it [perl #106536].
(TBT)

=back

=head2 Filetests and C<stat>

(ファイルテストと C<stat>)

=begin original

The term "filetests" refers to the operators that consist of a hyphen
followed by a single letter: C<-r>, C<-x>, C<-M>, etc.  The term "stacked"
when applied to filetests means followed by another filetest operator
sharing the same operand, as in C<-r -x -w $fooo>.

=end original

The term "filetests" refers to the operators that consist of a hyphen
followed by a single letter: C<-r>, C<-x>, C<-M>, etc.  The term "stacked"
when applied to filetests means followed by another filetest operator
sharing the same operand, as in C<-r -x -w $fooo>.
(TBT)

=over

=item *

=begin original

C<stat> produces more consistent warnings.  It no longer warns for "_"
[perl #71002] and no longer skips the warning at times for other unopened
handles.  It no longer warns about an unopened handle when the operating
system's C<fstat> function fails.

=end original

C<stat> produces more consistent warnings.  It no longer warns for "_"
[perl #71002] and no longer skips the warning at times for other unopened
handles.  It no longer warns about an unopened handle when the operating
system's C<fstat> function fails.
(TBT)

=item *

=begin original

C<stat> would sometimes return negative numbers for large inode numbers,
because it was using the wrong internal C type. [perl #84590]

=end original

C<stat> would sometimes return negative numbers for large inode numbers,
because it was using the wrong internal C type. [perl #84590]
(TBT)

=item *

=begin original

C<lstat> is documented to fall back to C<stat> (with a warning) when given
a filehandle.  When passed an IO reference, it was actually doing the
equivalent of S<C<stat _>> and ignoring the handle.

=end original

C<lstat> is documented to fall back to C<stat> (with a warning) when given
a filehandle.  When passed an IO reference, it was actually doing the
equivalent of S<C<stat _>> and ignoring the handle.
(TBT)

=item *

=begin original

C<-T _> with no preceding C<stat> used to produce a
confusing "uninitialized" warning, even though there
is no visible uninitialized value to speak of.

=end original

C<-T _> with no preceding C<stat> used to produce a
confusing "uninitialized" warning, even though there
is no visible uninitialized value to speak of.
(TBT)

=item *

=begin original

C<-T>, C<-B>, C<-l> and C<-t> now work
when stacked with other filetest operators
[perl #77388].

=end original

C<-T>, C<-B>, C<-l> and C<-t> now work
when stacked with other filetest operators
[perl #77388].
(TBT)

=item *

=begin original

In 5.14.0, filetest ops (C<-r>, C<-x>, etc.) started calling FETCH on a
tied argument belonging to the previous argument to a list operator, if
called with a bareword argument or no argument at all.  This has been
fixed, so C<push @foo, $tied, -r> no longer calls FETCH on C<$tied>.

=end original

In 5.14.0, filetest ops (C<-r>, C<-x>, etc.) started calling FETCH on a
tied argument belonging to the previous argument to a list operator, if
called with a bareword argument or no argument at all.  This has been
fixed, so C<push @foo, $tied, -r> no longer calls FETCH on C<$tied>.
(TBT)

=item *

=begin original

In Perl 5.6, C<-l> followed by anything other than a bareword would treat
its argument as a file name.  That was changed in 5.8 for glob references
(C<\*foo>), but not for globs themselves (C<*foo>).  C<-l> started
returning C<undef> for glob references without setting the last
stat buffer that the "_" handle uses, but only if warnings
were turned on.  With warnings off, it was the same as 5.6.
In other words, it was simply buggy and inconsistent.  Now the 5.6
behaviour has been restored.

=end original

In Perl 5.6, C<-l> followed by anything other than a bareword would treat
its argument as a file name.  That was changed in 5.8 for glob references
(C<\*foo>), but not for globs themselves (C<*foo>).  C<-l> started
returning C<undef> for glob references without setting the last
stat buffer that the "_" handle uses, but only if warnings
were turned on.  With warnings off, it was the same as 5.6.
In other words, it was simply buggy and inconsistent.  Now the 5.6
behaviour has been restored.
(TBT)

=item *

=begin original

C<-l> followed by a bareword no longer "eats" the previous argument to
the list operator in whose argument list it resides.  Hence,
C<print "bar", -l foo> now actually prints "bar", because C<-l>
on longer eats it.

=end original

C<-l> followed by a bareword no longer "eats" the previous argument to
the list operator in whose argument list it resides.  Hence,
C<print "bar", -l foo> now actually prints "bar", because C<-l>
on longer eats it.
(TBT)

=item *

=begin original

Perl keeps several internal variables to keep track of the last stat
buffer, from which file(handle) it originated, what type it was, and
whether the last stat succeeded.

=end original

Perl keeps several internal variables to keep track of the last stat
buffer, from which file(handle) it originated, what type it was, and
whether the last stat succeeded.
(TBT)

=begin original

There were various cases where these could get out of synch, resulting in
inconsistent or erratic behaviour in edge cases (every mention of C<-T>
applies to C<-B> as well):

=end original

There were various cases where these could get out of synch, resulting in
inconsistent or erratic behaviour in edge cases (every mention of C<-T>
applies to C<-B> as well):
(TBT)

=over

=item *

=begin original

C<-T I<HANDLE>>, even though it does a C<stat>, was not resetting the last
stat type, so an C<lstat _> following it would merrily return the wrong
results.  Also, it was not setting the success status.

=end original

C<-T I<HANDLE>>, even though it does a C<stat>, was not resetting the last
stat type, so an C<lstat _> following it would merrily return the wrong
results.  Also, it was not setting the success status.
(TBT)

=item *

=begin original

Freeing the handle last used by C<stat> or a filetest could result in
S<C<-T _>> using an unrelated handle.

=end original

Freeing the handle last used by C<stat> or a filetest could result in
S<C<-T _>> using an unrelated handle.
(TBT)

=item *

=begin original

C<stat> with an IO reference would not reset the stat type or record the
filehandle for S<C<-T _>> to use.

=end original

C<stat> with an IO reference would not reset the stat type or record the
filehandle for S<C<-T _>> to use.
(TBT)

=item *

=begin original

Fatal warnings could cause the stat buffer not to be reset
for a filetest operator on an unopened filehandle or C<-l> on any handle.
Fatal warnings also stopped C<-T> from setting C<$!>.

=end original

Fatal warnings could cause the stat buffer not to be reset
for a filetest operator on an unopened filehandle or C<-l> on any handle.
Fatal warnings also stopped C<-T> from setting C<$!>.
(TBT)

=item *

=begin original

When the last stat was on an unreadable file, C<-T _> is supposed to
return C<undef>, leaving the last stat buffer unchanged.  But it was
setting the stat type, causing C<lstat _> to stop working.

=end original

When the last stat was on an unreadable file, C<-T _> is supposed to
return C<undef>, leaving the last stat buffer unchanged.  But it was
setting the stat type, causing C<lstat _> to stop working.
(TBT)

=item *

=begin original

C<-T I<FILENAME>> was not resetting the internal stat buffers for
unreadable files.

=end original

C<-T I<FILENAME>> was not resetting the internal stat buffers for
unreadable files.
(TBT)

=back

=begin original

These have all been fixed.

=end original

これら全ては修正されました。

=back

=head2 Formats

(フォーマット)

=over

=item *

=begin original

A number of edge cases have been fixed with formats and C<formline>;
in particular, where the format itself is potentially variable (such as
with ties and overloading), and where the format and data differ in their
encoding.  In both these cases, it used to possible for the output to be
corrupted [perl #91032].

=end original

A number of edge cases have been fixed with formats and C<formline>;
in particular, where the format itself is potentially variable (such as
with ties and overloading), and where the format and data differ in their
encoding.  In both these cases, it used to possible for the output to be
corrupted [perl #91032].
(TBT)

=item *

=begin original

C<formline> no longer converts its argument into a string in-place.  So
passing a reference to C<formline> no longer destroys the reference
[perl #79532].

=end original

C<formline> no longer converts its argument into a string in-place.  So
passing a reference to C<formline> no longer destroys the reference
[perl #79532].
(TBT)

=item *

=begin original

Assignment to C<$^A> (the format output accumulator) now recalculates
the number of lines output.

=end original

Assignment to C<$^A> (the format output accumulator) now recalculates
the number of lines output.
(TBT)

=back

=head2 C<given> and C<when>

(C<given> と C<when>)

=over

=item *

=begin original

C<given> was not scoping its implicit $_ properly, resulting in memory
leaks or "Variable is not available" warnings [perl #94682].

=end original

C<given> was not scoping its implicit $_ properly, resulting in memory
leaks or "Variable is not available" warnings [perl #94682].
(TBT)

=item *

=begin original

C<given> was not calling set-magic on the implicit lexical C<$_> that it
uses.  This meant, for example, that C<pos> would be remembered from one
execution of the same C<given> block to the next, even if the input were a
different variable [perl #84526].

=end original

C<given> was not calling set-magic on the implicit lexical C<$_> that it
uses.  This meant, for example, that C<pos> would be remembered from one
execution of the same C<given> block to the next, even if the input were a
different variable [perl #84526].
(TBT)

=item *

=begin original

C<when> blocks are now capable of returning variables declared inside the
enclosing C<given> block [perl #93548].

=end original

C<when> blocks are now capable of returning variables declared inside the
enclosing C<given> block [perl #93548].
(TBT)

=back

=head2 The C<glob> operator

(C<glob> 演算子)

=over

=item *

=begin original

On OSes other than VMS, Perl's C<glob> operator (and the C<< <...> >> form)
use L<File::Glob> underneath.  L<File::Glob> splits the pattern into words,
before feeding each word to its C<bsd_glob> function.

=end original

On OSes other than VMS, Perl's C<glob> operator (and the C<< <...> >> form)
use L<File::Glob> underneath.  L<File::Glob> splits the pattern into words,
before feeding each word to its C<bsd_glob> function.
(TBT)

=begin original

There were several inconsistencies in the way the split was done.  Now
quotation marks (' and ") are always treated as shell-style word delimiters
(that allow whitespace as part of a word) and backslashes are always
preserved, unless they exist to escape quotation marks.  Before, those
would only sometimes be the case, depending on whether the pattern
contained whitespace.  Also, escaped whitespace at the end of the pattern
is no longer stripped [perl #40470].

=end original

There were several inconsistencies in the way the split was done.  Now
quotation marks (' and ") are always treated as shell-style word delimiters
(that allow whitespace as part of a word) and backslashes are always
preserved, unless they exist to escape quotation marks.  Before, those
would only sometimes be the case, depending on whether the pattern
contained whitespace.  Also, escaped whitespace at the end of the pattern
is no longer stripped [perl #40470].
(TBT)

=item *

=begin original

C<CORE::glob> now works as a way to call the default globbing function.  It
used to respect overrides, despite the C<CORE::> prefix.

=end original

C<CORE::glob> now works as a way to call the default globbing function.  It
used to respect overrides, despite the C<CORE::> prefix.
(TBT)

=item *

=begin original

Under miniperl (used to configure modules when perl itself is built),
C<glob> now clears %ENV before calling csh, since the latter croaks on some
systems if it does not like the contents of the LS_COLORS enviroment
variable [perl #98662].

=end original

Under miniperl (used to configure modules when perl itself is built),
C<glob> now clears %ENV before calling csh, since the latter croaks on some
systems if it does not like the contents of the LS_COLORS enviroment
variable [perl #98662].
(TBT)

=back

=head2 Lvalue subroutines

(左辺値サブルーチン)

=over

=item *

=begin original

Explicit return now returns the actual argument passed to return, instead
of copying it [perl #72724, #72706].

=end original

Explicit return now returns the actual argument passed to return, instead
of copying it [perl #72724, #72706].
(TBT)

=item *

=begin original

Lvalue subroutines used to enforce lvalue syntax (i.e., whatever can go on
the left-hand side of C<=>) for the last statement and the arguments to
return.  Since lvalue subroutines are not always called in lvalue context,
this restriction has been lifted.

=end original

Lvalue subroutines used to enforce lvalue syntax (i.e., whatever can go on
the left-hand side of C<=>) for the last statement and the arguments to
return.  Since lvalue subroutines are not always called in lvalue context,
this restriction has been lifted.
(TBT)

=item *

=begin original

Lvalue subroutines are less restrictive as to what values can be returned.
It used to croak on values returned by C<shift> and C<delete> and from
other subroutines, but no longer does so [perl #71172].

=end original

Lvalue subroutines are less restrictive as to what values can be returned.
It used to croak on values returned by C<shift> and C<delete> and from
other subroutines, but no longer does so [perl #71172].
(TBT)

=item *

=begin original

Empty lvalue subroutines (C<sub :lvalue {}>) used to return C<@_> in list
context.  In fact, all subroutines used to, but regular subs were fixed in
Perl 5.8.2.  Now lvalue subroutines have been likewise fixed.

=end original

Empty lvalue subroutines (C<sub :lvalue {}>) used to return C<@_> in list
context.  In fact, all subroutines used to, but regular subs were fixed in
Perl 5.8.2.  Now lvalue subroutines have been likewise fixed.
(TBT)

=item *

=begin original

Autovivification now works on values returned from lvalue subroutines
[perl #7946], as does returning C<keys> in lvalue context.

=end original

Autovivification now works on values returned from lvalue subroutines
[perl #7946], as does returning C<keys> in lvalue context.
(TBT)

=item *

=begin original

Lvalue subroutines used to copy their return values in rvalue context.  Not
only was this a waste of CPU cycles, but it also caused bugs.  A C<($)>
prototype would cause an lvalue sub to copy its return value [perl #51408],
and C<while(lvalue_sub() =~ m/.../g) { ... }> would loop endlessly
[perl #78680].

=end original

Lvalue subroutines used to copy their return values in rvalue context.  Not
only was this a waste of CPU cycles, but it also caused bugs.  A C<($)>
prototype would cause an lvalue sub to copy its return value [perl #51408],
and C<while(lvalue_sub() =~ m/.../g) { ... }> would loop endlessly
[perl #78680].
(TBT)

=item *

=begin original

When called in potential lvalue context
(e.g., subroutine arguments or a list
passed to C<for>), lvalue subroutines used to copy
any read-only value that was returned.  E.g., C< sub :lvalue { $] } >
would not return C<$]>, but a copy of it.

=end original

When called in potential lvalue context
(e.g., subroutine arguments or a list
passed to C<for>), lvalue subroutines used to copy
any read-only value that was returned.  E.g., C< sub :lvalue { $] } >
would not return C<$]>, but a copy of it.
(TBT)

=item *

=begin original

When called in potential lvalue context, an lvalue subroutine returning
arrays or hashes used to bind the arrays or hashes to scalar variables,
resulting in bugs.  This was fixed in 5.14.0 if an array were the first
thing returned from the subroutine (but not for C<$scalar, @array> or
hashes being returned).  Now a more general fix has been applied
[perl #23790].

=end original

When called in potential lvalue context, an lvalue subroutine returning
arrays or hashes used to bind the arrays or hashes to scalar variables,
resulting in bugs.  This was fixed in 5.14.0 if an array were the first
thing returned from the subroutine (but not for C<$scalar, @array> or
hashes being returned).  Now a more general fix has been applied
[perl #23790].
(TBT)

=item *

=begin original

Method calls whose arguments were all surrounded with C<my()> or C<our()>
(as in C<< $object->method(my($a,$b)) >>) used to force lvalue context on
the subroutine.  This would prevent lvalue methods from returning certain
values.

=end original

Method calls whose arguments were all surrounded with C<my()> or C<our()>
(as in C<< $object->method(my($a,$b)) >>) used to force lvalue context on
the subroutine.  This would prevent lvalue methods from returning certain
values.
(TBT)

=item *

=begin original

Lvalue sub calls that are not determined to be such at compile time
(C<&$name> or &{"name"}) are no longer exempt from strict refs if they
occur in the last statement of an lvalue subroutine [perl #102486].

=end original

Lvalue sub calls that are not determined to be such at compile time
(C<&$name> or &{"name"}) are no longer exempt from strict refs if they
occur in the last statement of an lvalue subroutine [perl #102486].
(TBT)

=item *

=begin original

Sub calls whose subs are not visible at compile time, if
they occurred in the last statement of an lvalue subroutine,
would reject non-lvalue subroutines and die with "Can't modify non-lvalue
subroutine call" [perl #102486].

=end original

Sub calls whose subs are not visible at compile time, if
they occurred in the last statement of an lvalue subroutine,
would reject non-lvalue subroutines and die with "Can't modify non-lvalue
subroutine call" [perl #102486].
(TBT)

=begin original

Non-lvalue sub calls whose subs I<are> visible at compile time exhibited
the opposite bug.  If the call occurred in the last statement of an lvalue
subroutine, there would be no error when the lvalue sub was called in
lvalue context.  Perl would blindly assign to the temporary value returned
by the non-lvalue subroutine.

=end original

Non-lvalue sub calls whose subs I<are> visible at compile time exhibited
the opposite bug.  If the call occurred in the last statement of an lvalue
subroutine, there would be no error when the lvalue sub was called in
lvalue context.  Perl would blindly assign to the temporary value returned
by the non-lvalue subroutine.
(TBT)

=item *

=begin original

C<AUTOLOAD> routines used to take precedence over the actual sub being
called (i.e., when autoloading wasn't needed), for sub calls in lvalue or
potential lvalue context, if the subroutine was not visible at compile
time.

=end original

C<AUTOLOAD> routines used to take precedence over the actual sub being
called (i.e., when autoloading wasn't needed), for sub calls in lvalue or
potential lvalue context, if the subroutine was not visible at compile
time.
(TBT)

=item *

=begin original

Applying the C<:lvalue> attribute to an XSUB or to an aliased subroutine
stub with C<< sub foo :lvalue; >> syntax stopped working in Perl 5.12.
This has been fixed.

=end original

Applying the C<:lvalue> attribute to an XSUB or to an aliased subroutine
stub with C<< sub foo :lvalue; >> syntax stopped working in Perl 5.12.
This has been fixed.
(TBT)

=item *

=begin original

Applying the :lvalue attribute to subroutine that is already defined does
not work properly, as the attribute changes the way the sub is compiled.
Hence, Perl 5.12 began warning when an attempt is made to apply the
attribute to an already defined sub.  In such cases, the attribute is
discarded.

=end original

Applying the :lvalue attribute to subroutine that is already defined does
not work properly, as the attribute changes the way the sub is compiled.
Hence, Perl 5.12 began warning when an attempt is made to apply the
attribute to an already defined sub.  In such cases, the attribute is
discarded.
(TBT)

=begin original

But the change in 5.12 missed the case where custom attributes are also
present: that case still silently and ineffectively applied the attribute.
That omission has now been corrected.  C<sub foo :lvalue :Whatever> (when
C<foo> is already defined) now warns about the :lvalue attribute, and does
not apply it.

=end original

But the change in 5.12 missed the case where custom attributes are also
present: that case still silently and ineffectively applied the attribute.
That omission has now been corrected.  C<sub foo :lvalue :Whatever> (when
C<foo> is already defined) now warns about the :lvalue attribute, and does
not apply it.
(TBT)

=item *

=begin original

A bug affecting lvalue context propagation through nested lvalue subroutine
calls has been fixed.  Previously, returning a value in nested rvalue
context would be treated as lvalue context by the inner subroutine call,
resulting in some values (such as read-only values) being rejected.

=end original

A bug affecting lvalue context propagation through nested lvalue subroutine
calls has been fixed.  Previously, returning a value in nested rvalue
context would be treated as lvalue context by the inner subroutine call,
resulting in some values (such as read-only values) being rejected.
(TBT)

=back

=head2 Overloading

(オーバーロード)

=over

=item *

=begin original

Arithmetic assignment (C<$left += $right>) involving overloaded objects
that rely on the 'nomethod' override no longer segfault when the left
operand is not overloaded.

=end original

Arithmetic assignment (C<$left += $right>) involving overloaded objects
that rely on the 'nomethod' override no longer segfault when the left
operand is not overloaded.
(TBT)

=item *

=begin original

Errors that occur when methods cannot be found during overloading now
mention the correct package name, as they did in 5.8.x, instead of
erroneously mentioning the "overload" package, as they have since 5.10.0.

=end original

Errors that occur when methods cannot be found during overloading now
mention the correct package name, as they did in 5.8.x, instead of
erroneously mentioning the "overload" package, as they have since 5.10.0.
(TBT)

=item *

=begin original

Undefining C<%overload::> no longer causes a crash.

=end original

C<%overload::> を未定義にしてもクラッシュしなくなりました。

=back

=head2 Prototypes of built-in keywords

(組み込み関数のプロトタイプ)

=over

=item *

=begin original

The C<prototype> function no longer dies for the C<__FILE__>, C<__LINE__>
and C<__PACKAGE__> directives.  It now returns an empty-string prototype
for them, because they are syntactically indistinguishable from nullary
functions like C<time>.

=end original

The C<prototype> function no longer dies for the C<__FILE__>, C<__LINE__>
and C<__PACKAGE__> directives.  It now returns an empty-string prototype
for them, because they are syntactically indistinguishable from nullary
functions like C<time>.
(TBT)

=item *

=begin original

C<prototype> now returns C<undef> for all overridable infix operators,
such as C<eq>, which are not callable in any way resembling functions.
It used to return incorrect prototypes for some and die for others
[perl #94984].

=end original

C<prototype> now returns C<undef> for all overridable infix operators,
such as C<eq>, which are not callable in any way resembling functions.
It used to return incorrect prototypes for some and die for others
[perl #94984].
(TBT)

=item *

=begin original

The prototypes of several built-in functions--C<getprotobynumber>, C<lock>,
C<not> and C<select>--have been corrected, or at least are now closer to
reality than before.

=end original

The prototypes of several built-in functions--C<getprotobynumber>, C<lock>,
C<not> and C<select>--have been corrected, or at least are now closer to
reality than before.
(TBT)

=back

=head2 Regular expressions

(正規表現)

=for comment Is it possible to merge some of these items?

=over 4

=item *

=begin original

C</[[:ascii:]]/> and C</[[:blank:]]/> now use locale rules under
C<use locale> when the platform supports that.  Previously, they used
the platform's native character set.

=end original

C</[[:ascii:]]/> and C</[[:blank:]]/> now use locale rules under
C<use locale> when the platform supports that.  Previously, they used
the platform's native character set.
(TBT)

=item *

=begin original

C<m/[[:ascii:]]/i> and C</\p{ASCII}/i> now match identically (when not
under a differing locale).  This fixes a regression introduced in 5.14
in which the first expression could match characters outside of ASCII,
such as the KELVIN SIGN.

=end original

C<m/[[:ascii:]]/i> and C</\p{ASCII}/i> now match identically (when not
under a differing locale).  This fixes a regression introduced in 5.14
in which the first expression could match characters outside of ASCII,
such as the KELVIN SIGN.
(TBT)

=item *

=begin original

C</.*/g> would sometimes refuse to match at the end of a string that ends
with "\n".  This has been fixed [perl #109206].

=end original

C</.*/g> would sometimes refuse to match at the end of a string that ends
with "\n".  This has been fixed [perl #109206].
(TBT)

=item *

=begin original

Starting with 5.12.0, Perl used to get its internal bookkeeping muddled up
after assigning C<${ qr// }> to a hash element and locking it with
L<Hash::Util>.  This could result in double frees, crashes or erratic
behaviour.

=end original

Starting with 5.12.0, Perl used to get its internal bookkeeping muddled up
after assigning C<${ qr// }> to a hash element and locking it with
L<Hash::Util>.  This could result in double frees, crashes or erratic
behaviour.
(TBT)

=item *

=begin original

The new (in 5.14.0) regular expression modifier C</a> when repeated like
C</aa> forbids the characters outside the ASCII range that match
characters inside that range from matching under C</i>.  This did not
work under some circumstances, all involving alternation, such as:

=end original

The new (in 5.14.0) regular expression modifier C</a> when repeated like
C</aa> forbids the characters outside the ASCII range that match
characters inside that range from matching under C</i>.  This did not
work under some circumstances, all involving alternation, such as:
(TBT)

 "\N{KELVIN SIGN}" =~ /k|foo/iaa;

=begin original

succeeded inappropriately.  This is now fixed.

=end original

不適切に成功していました。
これは修正されました。

=item *

=begin original

5.14.0 introduced some memory leaks in regular expression character
classes such as C<[\w\s]>, which have now been fixed. (5.14.1)

=end original

5.14.0 では、C<[\w\s]> のような正規表現文字クラスでメモリリークを
起こしていましたが、これは修正されました。 (5.14.1)

=item *

=begin original

An edge case in regular expression matching could potentially loop.
This happened only under C</i> in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.

=end original

正規表現マッチングでのエッジケースではループになる可能性がありました。
これは C</i> が適用されている状況下でのマルチ文字を畳み込んでいる
大かっこの文字クラスで、マッチングするターゲット文字列に畳み込まれる
一つ目の要素に引き続いて畳み込みの残りの部分から始まるようなもう一つの
マルチ文字畳み込み文字が続いている場合にのみ起こります。

 "s\N{U+DF}" =~ /[\x{DF}foo]/i

=begin original

is one such case.  C<\xDF> folds to C<"ss">. (5.14.1)

=end original

はそのようなケースの一つです。
C<\xDF> は C<"ss"> に畳み込みます。(5.14.1)

=item *

=begin original

A few characters in regular expression pattern matches did not
match correctly in some circumstances, all involving C</i>.  The
affected characters are:
COMBINING GREEK YPOGEGRAMMENI,
GREEK CAPITAL LETTER IOTA,
GREEK CAPITAL LETTER UPSILON,
GREEK PROSGEGRAMMENI,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
LATIN SMALL LETTER LONG S,
LATIN SMALL LIGATURE LONG S T,
and
LATIN SMALL LIGATURE ST.

=end original

A few characters in regular expression pattern matches did not
match correctly in some circumstances, all involving C</i>.  The
affected characters are:
COMBINING GREEK YPOGEGRAMMENI,
GREEK CAPITAL LETTER IOTA,
GREEK CAPITAL LETTER UPSILON,
GREEK PROSGEGRAMMENI,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
LATIN SMALL LETTER LONG S,
LATIN SMALL LIGATURE LONG S T,
and
LATIN SMALL LIGATURE ST.
(TBT)

=item *

=begin original

A memory leak regression in regular expression compilation
under threading has been fixed.

=end original

スレッドでの正規表現のコンパイルのメモリリークの退行が修正されました。

=item *

=begin original

A regression introduced in 5.14.0 has
been fixed.  This involved an inverted
bracketed character class in a regular expression that consisted solely
of a Unicode property.  That property wasn't getting inverted outside the
Latin1 range.

=end original

5.14.0 で作り込まれた退行が修正されました。
これは Unicode 特性のみからなる正規表現の反転させた大かっこ文字クラスに
関連しています。
この特性は Latin1 の範囲外では反転できません。

=item *

=begin original

Three problematic Unicode characters now work better in regex pattern matching under C</i>

=end original

Three problematic Unicode characters now work better in regex pattern matching under C</i>
(TBT)

=begin original

In the past, three Unicode characters:
LATIN SMALL LETTER SHARP S,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
and
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
along with the sequences that they fold to
(including "ss" in the case of LATIN SMALL LETTER SHARP S),
did not properly match under C</i>.  5.14.0 fixed some of these cases,
but introduced others, including a panic when one of the characters or
sequences was used in the C<(?(DEFINE)> regular expression predicate.
The known bugs that were introduced in 5.14 have now been fixed; as well
as some other edge cases that have never worked until now.  All these
involve using the characters and sequences outside bracketed character
classes under C</i>.  This closes [perl #98546].

=end original

In the past, three Unicode characters:
LATIN SMALL LETTER SHARP S,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
and
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
along with the sequences that they fold to
(including "ss" in the case of LATIN SMALL LETTER SHARP S),
did not properly match under C</i>.  5.14.0 fixed some of these cases,
but introduced others, including a panic when one of the characters or
sequences was used in the C<(?(DEFINE)> regular expression predicate.
The known bugs that were introduced in 5.14 have now been fixed; as well
as some other edge cases that have never worked until now.  All these
involve using the characters and sequences outside bracketed character
classes under C</i>.  This closes [perl #98546].
(TBT)

=begin original

There remain known problems when using certain characters with
multi-character folds inside bracketed character classes, including such
constructs as C<qr/[\N{LATIN SMALL LETTER SHARP}a-z]/i>.  These
remaining bugs are addressed in [perl #89774].

=end original

There remain known problems when using certain characters with
multi-character folds inside bracketed character classes, including such
constructs as C<qr/[\N{LATIN SMALL LETTER SHARP}a-z]/i>.  These
remaining bugs are addressed in [perl #89774].
(TBT)

=item *

=begin original

RT #78266: The regex engine has been leaking memory when accessing
named captures that weren't matched as part of a regex ever since 5.10
when they were introduced, e.g. this would consume over a hundred MB of
memory:

=end original

RT #78266: The regex engine has been leaking memory when accessing
named captures that weren't matched as part of a regex ever since 5.10
when they were introduced, e.g. this would consume over a hundred MB of
memory:
(TBT)

    for (1..10_000_000) {
        if ("foo" =~ /(foo|(?<capture>bar))?/) {
            my $capture = $+{capture}
        }
    }
    system "ps -o rss $$"'

=item *

=begin original

In 5.14, C</[[:lower:]]/i> and C</[[:upper:]]/i> no longer matched the
opposite case.  This has been fixed [perl #101970].

=end original

In 5.14, C</[[:lower:]]/i> and C</[[:upper:]]/i> no longer matched the
opposite case.  This has been fixed [perl #101970].
(TBT)

=item *

=begin original

A regular expression match with an overloaded object on the right-hand side
would in some cases stringify the object too many times.

=end original

A regular expression match with an overloaded object on the right-hand side
would in some cases stringify the object too many times.
(TBT)

=item *

=begin original

A regression has been fixed that was introduced in 5.14, in C</i>
regular expression matching, in which a match improperly fails if the
pattern is in UTF-8, the target string is not, and a Latin-1 character
precedes a character in the string that should match the pattern.
[perl #101710]

=end original

A regression has been fixed that was introduced in 5.14, in C</i>
regular expression matching, in which a match improperly fails if the
pattern is in UTF-8, the target string is not, and a Latin-1 character
precedes a character in the string that should match the pattern.
[perl #101710]
(TBT)

=item *

=begin original

In case-insensitive regular expression pattern matching, no longer on
UTF-8 encoded strings does the scan for the start of match only look at
the first possible position.  This caused matches such as
C<"f\x{FB00}" =~ /ff/i> to fail.

=end original

In case-insensitive regular expression pattern matching, no longer on
UTF-8 encoded strings does the scan for the start of match only look at
the first possible position.  This caused matches such as
C<"f\x{FB00}" =~ /ff/i> to fail.
(TBT)

=item *

=begin original

The regexp optimiser no longer crashes on debugging builds when merging
fixed-string nodes with inconvenient contents.

=end original

The regexp optimiser no longer crashes on debugging builds when merging
fixed-string nodes with inconvenient contents.
(TBT)

=item *

=begin original

A panic involving the combination of the regular expression modifiers
C</aa> and the C<\b> escape sequence introduced in 5.14.0 has been
fixed [perl #95964]. (5.14.2)

=end original

5.14.0 で導入された正規表現修飾子 C</aa> と C<\b> エスケープシーケンスの
組み合わせによる panic が修正されました [perl #95964]。(5.14.2)

=item *

=begin original

The combination of the regular expression modifiers C</aa> and the C<\b>
and C<\B> escape sequences did not work properly on UTF-8 encoded
strings.  All non-ASCII characters under C</aa> should be treated as
non-word characters, but what was happening was that Unicode rules were
used to determine wordness/non-wordness for non-ASCII characters.  This
is now fixed [perl #95968].

=end original

The combination of the regular expression modifiers C</aa> and the C<\b>
and C<\B> escape sequences did not work properly on UTF-8 encoded
strings.  All non-ASCII characters under C</aa> should be treated as
non-word characters, but what was happening was that Unicode rules were
used to determine wordness/non-wordness for non-ASCII characters.  This
is now fixed [perl #95968].
(TBT)

=item *

=begin original

C<< (?foo: ...) >> no longer loses passed in character set.

=end original

C<< (?foo: ...) >> no longer loses passed in character set.
(TBT)

=item *

=begin original

The trie optimisation used to have problems with alternations containing
an empty C<(?:)>, causing C<< "x" =~ /\A(?>(?:(?:)A|B|C?x))\z/ >> not to
match, whereas it should [perl #111842].

=end original

The trie optimisation used to have problems with alternations containing
an empty C<(?:)>, causing C<< "x" =~ /\A(?>(?:(?:)A|B|C?x))\z/ >> not to
match, whereas it should [perl #111842].
(TBT)

=item *

=begin original

Use of lexical (C<my>) variables in code blocks embedded in regular
expressions will no longer result in memory corruption or crashes.

=end original

Use of lexical (C<my>) variables in code blocks embedded in regular
expressions will no longer result in memory corruption or crashes.
(TBT)

=begin original

Nevertheless, these code blocks are still experimental, as there are still
problems with the wrong variables being closed over (in loops for instance)
and with abnormal exiting (e.g., C<die>) causing memory corruption.

=end original

Nevertheless, these code blocks are still experimental, as there are still
problems with the wrong variables being closed over (in loops for instance)
and with abnormal exiting (e.g., C<die>) causing memory corruption.
(TBT)

=item *

=begin original

The C<\h>, C<\H>, C<\v> and C<\V> regular expression metacharacters used to
cause a panic error message when attempting to match at the end of the
string [perl #96354].

=end original

The C<\h>, C<\H>, C<\v> and C<\V> regular expression metacharacters used to
cause a panic error message when attempting to match at the end of the
string [perl #96354].
(TBT)

=item *

=begin original

The abbreviations for four C1 control characters C<MW> C<PM>, C<RI>, and
C<ST> were previously unrecognized by C<\N{}>, vianame(), and
string_vianame().

=end original

The abbreviations for four C1 control characters C<MW> C<PM>, C<RI>, and
C<ST> were previously unrecognized by C<\N{}>, vianame(), and
string_vianame().
(TBT)

=item *

=begin original

Mentioning a variable named "&" other than C<$&> (i.e., C<@&> or C<%&>) no
longer stops C<$&> from working.  The same applies to variables named "'"
and "`" [perl #24237].

=end original

Mentioning a variable named "&" other than C<$&> (i.e., C<@&> or C<%&>) no
longer stops C<$&> from working.  The same applies to variables named "'"
and "`" [perl #24237].
(TBT)

=item *

=begin original

Creating a C<UNIVERSAL::AUTOLOAD> sub no longer stops C<%+>, C<%-> and
C<%!> from working some of the time [perl #105024].

=end original

Creating a C<UNIVERSAL::AUTOLOAD> sub no longer stops C<%+>, C<%-> and
C<%!> from working some of the time [perl #105024].
(TBT)

=back

=head2 Smartmatching

(スマートマッチング)

=over

=item *

=begin original

C<~~> now correctly handles the precedence of Any~~Object, and is not tricked
by an overloaded object on the left-hand side.

=end original

C<~~> は Any~~Object の優先順位を正しく扱えるようになり、, and is not tricked
by an overloaded object on the left-hand side.
(TBT)

=item *

=begin original

In Perl 5.14.0, C<$tainted ~~ @array> stopped working properly.  Sometimes
it would erroneously fail (when C<$tainted> contained a string that occurs
in the array I<after> the first element) or erroneously succeed (when
C<undef> occurred after the first element) [perl #93590].

=end original

In Perl 5.14.0, C<$tainted ~~ @array> stopped working properly.  Sometimes
it would erroneously fail (when C<$tainted> contained a string that occurs
in the array I<after> the first element) or erroneously succeed (when
C<undef> occurred after the first element) [perl #93590].
(TBT)

=back

=head2 The C<sort> operator

(C<sort> 演算子)

=over

=item *

=begin original

C<sort> was not treating C<sub {}> and C<sub {()}> as equivalent when
such a sub was provided as the comparison routine.  It used to croak on
C<sub {()}>.

=end original

C<sort> was not treating C<sub {}> and C<sub {()}> as equivalent when
such a sub was provided as the comparison routine.  It used to croak on
C<sub {()}>.
(TBT)

=item *

=begin original

C<sort> now works once more with custom sort routines that are XSUBs.  It
stopped working in 5.10.0.

=end original

C<sort> now works once more with custom sort routines that are XSUBs.  It
stopped working in 5.10.0.
(TBT)

=item *

=begin original

C<sort> with a constant for a custom sort routine, although it produces
unsorted results, no longer crashes.  It started crashing in 5.10.0.

=end original

C<sort> with a constant for a custom sort routine, although it produces
unsorted results, no longer crashes.  It started crashing in 5.10.0.
(TBT)

=item *

=begin original

Warnings emitted by C<sort> when a custom comparison routine returns a
non-numeric value now contain "in sort" and show the line number of the
C<sort> operator, rather than the last line of the comparison routine.  The
warnings also occur now only if warnings are enabled in the scope where
C<sort> occurs.  Previously the warnings would occur if enabled in the
comparison routine's scope.

=end original

Warnings emitted by C<sort> when a custom comparison routine returns a
non-numeric value now contain "in sort" and show the line number of the
C<sort> operator, rather than the last line of the comparison routine.  The
warnings also occur now only if warnings are enabled in the scope where
C<sort> occurs.  Previously the warnings would occur if enabled in the
comparison routine's scope.
(TBT)

=item *

=begin original

C<< sort { $a <=> $b } >>, which is optimised internally, now produces
"uninitialized" warnings for NaNs (not-a-number values), since C<< <=> >>
returns C<undef> for those.  This brings it in line with
S<C<< sort { 1; $a <=> $b } >>> and other more complex cases, which are not
optimised [perl #94390].

=end original

C<< sort { $a <=> $b } >>, which is optimised internally, now produces
"uninitialized" warnings for NaNs (not-a-number values), since C<< <=> >>
returns C<undef> for those.  This brings it in line with
S<C<< sort { 1; $a <=> $b } >>> and other more complex cases, which are not
optimised [perl #94390].
(TBT)

=back

=head2 The C<substr> operator

(C<substr> 演算子)

=over

=item *

=begin original

Tied (and otherwise magical) variables are no longer exempt from the
"Attempt to use reference as lvalue in substr" warning.

=end original

Tied (and otherwise magical) variables are no longer exempt from the
"Attempt to use reference as lvalue in substr" warning.
(TBT)

=item *

=begin original

That warning now occurs when the returned lvalue is assigned to, not
when C<substr> itself is called.  This only makes a difference if the
return value of C<substr> is referenced and assigned to later.

=end original

That warning now occurs when the returned lvalue is assigned to, not
when C<substr> itself is called.  This only makes a difference if the
return value of C<substr> is referenced and assigned to later.
(TBT)

=item *

=begin original

Passing a substring of a read-only value or a typeglob to a function
(potential lvalue context) no longer causes an immediate "Can't coerce"
or "Modification of a read-only value" error.  That error only occurs
if and when the value passed is assigned to.

=end original

Passing a substring of a read-only value or a typeglob to a function
(potential lvalue context) no longer causes an immediate "Can't coerce"
or "Modification of a read-only value" error.  That error only occurs
if and when the value passed is assigned to.
(TBT)

=begin original

The same thing happens with the "substr outside of string" error.  If
the lvalue is only read, not written to, it is now just a warning, as
with rvalue C<substr>.

=end original

The same thing happens with the "substr outside of string" error.  If
the lvalue is only read, not written to, it is now just a warning, as
with rvalue C<substr>.
(TBT)

=item *

=begin original

C<substr> assignments no longer call FETCH twice if the first argument
is a tied variable, just once.

=end original

C<substr> assignments no longer call FETCH twice if the first argument
is a tied variable, just once.
(TBT)

=back

=head2 Support for embedded nulls

(組み込みの null の対応)

=begin original

Some parts of Perl did not work correctly with nulls (C<chr 0>) embedded in
strings.  That meant that, for instance, C<< $m = "a\0b"; foo->$m >> would
call the "a" method, instead of the actual method name contained in $m.
These parts of perl have been fixed to support nulls:

=end original

Some parts of Perl did not work correctly with nulls (C<chr 0>) embedded in
strings.  That meant that, for instance, C<< $m = "a\0b"; foo->$m >> would
call the "a" method, instead of the actual method name contained in $m.
These parts of perl have been fixed to support nulls:
(TBT)

=over

=item *

=begin original

Method names

=end original

メソッド名

=item *

=begin original

Typeglob names (including filehandle and subroutine names)

=end original

型グロブ名 (ファイルハンドルとサブルーチン名を含む)

=item *

=begin original

Package names, including the return value of C<ref()>

=end original

C<ref()> の返り値を含むパッケージ名

=item *

=begin original

Typeglob elements (C<*foo{"THING\0stuff"}>)

=end original

型グロブ要素 (C<*foo{"THING\0stuff"}>)

=item *

=begin original

Signal names

=end original

シグナル名

=item *

=begin original

Various warnings and error messages that mention variable names or values,
methods, etc.

=end original

変数名、値、メソッドなどに言及する様々な警告やエラーメッセージ

=back

=begin original

One side effect of these changes is that blessing into "\0" no longer
causes C<ref()> to return false.

=end original

この変更による一つの副作用は、"\0" への bless はもはや C<ref()> が偽を
返さなくなりました。

=head2 Threading bugs

(スレッドのバグ)

=over

=item *

=begin original

Typeglobs returned from threads are no longer cloned if the parent thread
already has a glob with the same name.  This means that returned
subroutines will now assign to the right package variables [perl #107366].

=end original

Typeglobs returned from threads are no longer cloned if the parent thread
already has a glob with the same name.  This means that returned
subroutines will now assign to the right package variables [perl #107366].
(TBT)

=item *

=begin original

Some cases of threads crashing due to memory allocation during cloning have
been fixed [perl #90006].

=end original

Some cases of threads crashing due to memory allocation during cloning have
been fixed [perl #90006].
(TBT)

=item *

=begin original

Thread joining would sometimes emit "Attempt to free unreferenced scalar"
warnings if C<caller> had been used from the C<DB> package prior to thread
creation [perl #98092].

=end original

Thread joining would sometimes emit "Attempt to free unreferenced scalar"
warnings if C<caller> had been used from the C<DB> package prior to thread
creation [perl #98092].
(TBT)

=item *

=begin original

Locking a subroutine (via C<lock &sub>) is no longer a compile-time error
for regular subs.  For lvalue subroutines, it no longer tries to return the
sub as a scalar, resulting in strange side effects like C<ref \$_>
returning "CODE" in some instances.

=end original

Locking a subroutine (via C<lock &sub>) is no longer a compile-time error
for regular subs.  For lvalue subroutines, it no longer tries to return the
sub as a scalar, resulting in strange side effects like C<ref \$_>
returning "CODE" in some instances.
(TBT)

=begin original

C<lock &sub> is now a run-time error if L<threads::shared> is loaded (a
no-op otherwise), but that may be rectified in a future version.

=end original

C<lock &sub> is now a run-time error if L<threads::shared> is loaded (a
no-op otherwise), but that may be rectified in a future version.
(TBT)

=back

=head2 Tied variables

(tie された変数)

=over

=item *

=begin original

Various cases in which FETCH was being ignored or called too many times
have been fixed:

=end original

Various cases in which FETCH was being ignored or called too many times
have been fixed:
(TBT)

=over

=item *

C<PerlIO::get_layers> [perl #97956]

=item *

=begin original

C<$tied =~ y/a/b/>, C<chop $tied> and C<chomp $tied> when $tied holds a
reference.

=end original

$tied がリファレンスを保持しているときの C<$tied =~ y/a/b/>,
C<chop $tied>, C<chomp $tied>。

=item *

=begin original

When calling C<local $_> [perl #105912]

=end original

C<local $_> を呼び出すとき [perl #105912]

=item *

=begin original

Four-argument C<select>

=end original

4 引数の C<select>

=item *

=begin original

A tied buffer passed to C<sysread>

=end original

C<sysread> に渡された tie されたバッファ

=item *

C<< $tied .= <> >>

=item *

=begin original

Three-argument C<open>, the third being a tied file handle
(as in C<< open $fh, ">&", $tied >>)

=end original

(C<< open $fh, ">&", $tied >> のように) 3 引数の C<open> で、
3 番目が tie されたファイルハンドル

=item *

=begin original

C<sort> with a reference to a tied glob for the comparison routine.

=end original

比較ルーチンが tie されたグロブへのリファレンスの C<sort>

=item *

=begin original

C<..> and C<...> in list context [perl #53554].

=end original

リストコンテキストでの C<..> と C<...> [perl #53554]。

=item *

=begin original

C<${$tied}>, C<@{$tied}>, C<%{$tied}> and C<*{$tied}> where the tied
variable returns a string (C<&{}> was unaffected)

=end original

tie された変数が文字列を返すときの C<${$tied}>, C<@{$tied}>, C<%{$tied}>,
C<*{$tied}> (C<&{}> は影響を受けません)

=item *

C<defined ${ $tied_variable }>

=item *

=begin original

Various functions that take a filehandle argument in rvalue context
(C<close>, C<readline>, etc.) [perl #97482]

=end original

右辺値コンテキストでファイルハンドル引数を取る様々な関数
(C<close>, C<readline> など) [perl #97482]。

=item *

=begin original

Some cases of dereferencing a complex expression, such as
C<${ (), $tied } = 1>, used to call C<FETCH> multiple times, but now call
it once.

=end original

Some cases of dereferencing a complex expression, such as
C<${ (), $tied } = 1>, used to call C<FETCH> multiple times, but now call
it once.
(TBT)

=item *

=begin original

C<$tied-E<gt>method> where $tied returns a package name--even resulting in
a failure to call the method, due to memory corruption

=end original

C<$tied-E<gt>method> where $tied returns a package name--even resulting in
a failure to call the method, due to memory corruption
(TBT)

=item *

=begin original

Assignments like C<*$tied = \&{"..."}> and C<*glob = $tied>

=end original

C<*$tied = \&{"..."}> と C<*glob = $tied> のような代入

=item *

=begin original

C<chdir>, C<chmod>, C<chown>, C<utime>, C<truncate>, C<stat>, C<lstat> and
the filetest ops (C<-r>, C<-x>, etc.)

=end original

C<chdir>, C<chmod>, C<chown>, C<utime>, C<truncate>, C<stat>, C<lstat> と
ファイルテスト演算子 (C<-r>, C<-x> など)。

=back

=item *

=begin original

C<caller> sets C<@DB::args> to the subroutine arguments when called from
the DB package.  It used to crash when doing so if C<@DB::args> happened to
be tied.  Now it croaks instead.

=end original

C<caller> sets C<@DB::args> to the subroutine arguments when called from
the DB package.  It used to crash when doing so if C<@DB::args> happened to
be tied.  Now it croaks instead.
(TBT)

=item *

=begin original

Tying an element of %ENV or C<%^H> and then deleting that element would
result in a call to the tie object's DELETE method, even though tying the
element itself is supposed to be equivalent to tying a scalar (the element
is, of course, a scalar) [perl #67490].

=end original

Tying an element of %ENV or C<%^H> and then deleting that element would
result in a call to the tie object's DELETE method, even though tying the
element itself is supposed to be equivalent to tying a scalar (the element
is, of course, a scalar) [perl #67490].
(TBT)

=item *

=begin original

When Perl autovivifies an element of a tied array or hash (which entails
calling STORE with a new reference), it now calls FETCH immediately after
the STORE, instead of assuming that FETCH would have returned the same
reference.  This can make it easier to implement tied objects [perl #35865, #43011].

=end original

When Perl autovivifies an element of a tied array or hash (which entails
calling STORE with a new reference), it now calls FETCH immediately after
the STORE, instead of assuming that FETCH would have returned the same
reference.  This can make it easier to implement tied objects [perl #35865, #43011].
(TBT)

=item *

=begin original

Four-argument C<select> no longer produces its "Non-string passed as
bitmask" warning on tied or tainted variables that are strings.

=end original

Four-argument C<select> no longer produces its "Non-string passed as
bitmask" warning on tied or tainted variables that are strings.
(TBT)

=item *

=begin original

Localising a tied scalar that returns a typeglob no longer stops it from
being tied till the end of the scope.

=end original

Localising a tied scalar that returns a typeglob no longer stops it from
being tied till the end of the scope.
(TBT)

=item *

=begin original

Attempting to C<goto> out of a tied handle method used to cause memory
corruption or crashes.  Now it produces an error message instead
[perl #8611].

=end original

Attempting to C<goto> out of a tied handle method used to cause memory
corruption or crashes.  Now it produces an error message instead
[perl #8611].
(TBT)

=item *

=begin original

A bug has been fixed that occurs when a tied variable is used as a
subroutine reference:  if the last thing assigned to or returned from the
variable was a reference or typeglob, the C<\&$tied> could either crash or
return the wrong subroutine.  The reference case is a regression introduced
in Perl 5.10.0.  For typeglobs, it has probably never worked till now.

=end original

A bug has been fixed that occurs when a tied variable is used as a
subroutine reference:  if the last thing assigned to or returned from the
variable was a reference or typeglob, the C<\&$tied> could either crash or
return the wrong subroutine.  The reference case is a regression introduced
in Perl 5.10.0.  For typeglobs, it has probably never worked till now.
(TBT)

=back

=head2 Version objects and vstrings

(バージョンオブジェクトと v-文字列)

=over

=item *

=begin original

The bitwise complement operator (and possibly other operators, too) when
passed a vstring would leave vstring magic attached to the return value,
even though the string had changed.  This meant that
C<< version->new(~v1.2.3) >> would create a version looking like "v1.2.3"
even though the string passed to C<< version->new >> was actually
"\376\375\374".  This also caused L<B::Deparse> to deparse C<~v1.2.3>
incorrectly, without the C<~> [perl #29070].

=end original

The bitwise complement operator (and possibly other operators, too) when
passed a vstring would leave vstring magic attached to the return value,
even though the string had changed.  This meant that
C<< version->new(~v1.2.3) >> would create a version looking like "v1.2.3"
even though the string passed to C<< version->new >> was actually
"\376\375\374".  This also caused L<B::Deparse> to deparse C<~v1.2.3>
incorrectly, without the C<~> [perl #29070].
(TBT)

=item *

=begin original

Assigning a vstring to a magic (e.g., tied, C<$!>) variable and then
assigning something else used to blow away all the magic.  This meant that
tied variables would come undone, C<$!> would stop getting updated on
failed system calls, C<$|> would stop setting autoflush, and other
mischief would take place.  This has been fixed.

=end original

Assigning a vstring to a magic (e.g., tied, C<$!>) variable and then
assigning something else used to blow away all the magic.  This meant that
tied variables would come undone, C<$!> would stop getting updated on
failed system calls, C<$|> would stop setting autoflush, and other
mischief would take place.  This has been fixed.
(TBT)

=item *

=begin original

C<< version->new("version") >> and C<printf "%vd", "version"> no longer
crash [perl #102586].

=end original

C<< version->new("version") >> and C<printf "%vd", "version"> no longer
crash [perl #102586].
(TBT)

=item *

=begin original

Version comparisons, such as those that happen implicitly with C<use
v5.43>, no longer cause locale settings to change [perl #105784].

=end original

Version comparisons, such as those that happen implicitly with C<use
v5.43>, no longer cause locale settings to change [perl #105784].
(TBT)

=item *

=begin original

Version objects no longer cause memory leaks in boolean context
[perl #109762].

=end original

Version objects no longer cause memory leaks in boolean context
[perl #109762].
(TBT)

=back

=head2 Warnings, redefinition

(警告: 再定義)

=over

=item *

=begin original

Subroutines from the C<autouse> namespace are once more exempt from
redefinition warnings.  This used to work in 5.005, but was broken in
5.6 for most subroutines.  For subs created via XS that redefine
subroutines from the C<autouse> package, this stopped working in 5.10.

=end original

Subroutines from the C<autouse> namespace are once more exempt from
redefinition warnings.  This used to work in 5.005, but was broken in
5.6 for most subroutines.  For subs created via XS that redefine
subroutines from the C<autouse> package, this stopped working in 5.10.
(TBT)

=item *

=begin original

New XSUBs now produce redefinition warnings if they overwrite existing
subs, as they did in 5.8.x.  (The C<autouse> logic was reversed in
5.10-14.  Only subroutines from the C<autouse> namespace would warn
when clobbered.)

=end original

New XSUBs now produce redefinition warnings if they overwrite existing
subs, as they did in 5.8.x.  (The C<autouse> logic was reversed in
5.10-14.  Only subroutines from the C<autouse> namespace would warn
when clobbered.)
(TBT)

=item *

=begin original

C<newCONSTSUB> used to use compile-time warning hints, instead of
run-time hints.  The following code should never produce a redefinition
warning, but it used to, if C<newCONSTSUB> redefined an existing
subroutine:

=end original

C<newCONSTSUB> used to use compile-time warning hints, instead of
run-time hints.  The following code should never produce a redefinition
warning, but it used to, if C<newCONSTSUB> redefined an existing
subroutine:
(TBT)

    use warnings;
    BEGIN {
        no warnings;
        some_XS_function_that_calls_new_CONSTSUB();
    }

=item *

=begin original

Redefinition warnings for constant subroutines are on by default (what
are known as severe warnings in L<perldiag>).  This was only the case
when it was a glob assignment or declaration of a Perl subroutine that
caused the warning.  If the creation of XSUBs triggered the warning, it
was not a default warning.  This has been corrected.

=end original

Redefinition warnings for constant subroutines are on by default (what
are known as severe warnings in L<perldiag>).  This was only the case
when it was a glob assignment or declaration of a Perl subroutine that
caused the warning.  If the creation of XSUBs triggered the warning, it
was not a default warning.  This has been corrected.
(TBT)

=item *

=begin original

The internal check to see whether a redefinition warning should occur
used to emit "uninitialized" warnings in cases like this:

=end original

The internal check to see whether a redefinition warning should occur
used to emit "uninitialized" warnings in cases like this:
(TBT)

    use warnings "uninitialized";
    use constant {u => undef, v => undef};
    sub foo(){u}
    sub foo(){v}

=back

=head2 Warnings, "Uninitialized"

(警告: 「未定義」)

=over

=item *

=begin original

Various functions that take a filehandle argument in rvalue context
(C<close>, C<readline>, etc.) used to warn twice for an undefined handle
[perl #97482].

=end original

Various functions that take a filehandle argument in rvalue context
(C<close>, C<readline>, etc.) used to warn twice for an undefined handle
[perl #97482].
(TBT)

=item *

=begin original

C<dbmopen> now only warns once, rather than three times, if the mode
argument is C<undef> [perl #90064].

=end original

C<dbmopen> now only warns once, rather than three times, if the mode
argument is C<undef> [perl #90064].
(TBT)

=item *

=begin original

The C<+=> operator does not usually warn when the left-hand side is
C<undef>, but it was doing so for tied variables.  This has been fixed
[perl #44895].

=end original

The C<+=> operator does not usually warn when the left-hand side is
C<undef>, but it was doing so for tied variables.  This has been fixed
[perl #44895].
(TBT)

=item *

=begin original

A bug fix in Perl 5.14 introduced a new bug, causing "uninitialized"
warnings to report the wrong variable if the operator in question had
two operands and one was C<%{...}> or C<@{...}>.  This has been fixed
[perl #103766].

=end original

A bug fix in Perl 5.14 introduced a new bug, causing "uninitialized"
warnings to report the wrong variable if the operator in question had
two operands and one was C<%{...}> or C<@{...}>.  This has been fixed
[perl #103766].
(TBT)

=item *

=begin original

C<..> and C<...> in list context now mention the name of the variable in
"uninitialized" warnings for string (as opposed to numeric) ranges.

=end original

C<..> and C<...> in list context now mention the name of the variable in
"uninitialized" warnings for string (as opposed to numeric) ranges.
(TBT)

=back

=head2 Weak references

(弱い参照)

=over

=item *

=begin original

Weakening the first argument to an automatically-invoked C<DESTROY> method
could result in erroneous "DESTROY created new reference" errors or
crashes.  Now it is an error to weaken a read-only reference.

=end original

Weakening the first argument to an automatically-invoked C<DESTROY> method
could result in erroneous "DESTROY created new reference" errors or
crashes.  Now it is an error to weaken a read-only reference.
(TBT)

=item *

=begin original

Weak references to lexical hashes going out of scope were not going stale
(becoming undefined), but continued to point to the hash.

=end original

Weak references to lexical hashes going out of scope were not going stale
(becoming undefined), but continued to point to the hash.
(TBT)

=item *

=begin original

Weak references to lexical variables going out of scope are now broken
before any magical methods (e.g., DESTROY on a tie object) are called.
This prevents such methods from modifying the variable that will be seen
the next time the scope is entered.

=end original

Weak references to lexical variables going out of scope are now broken
before any magical methods (e.g., DESTROY on a tie object) are called.
This prevents such methods from modifying the variable that will be seen
the next time the scope is entered.
(TBT)

=item *

=begin original

Creating a weak reference to an @ISA array or accessing the array index
(C<$#ISA>) could result in confused internal bookkeeping for elements
subsequently added to the @ISA array.  For instance, creating a weak
reference to the element itself could push that weak reference on to @ISA;
and elements added after use of C<$#ISA> would be ignored by method lookup
[perl #85670].

=end original

Creating a weak reference to an @ISA array or accessing the array index
(C<$#ISA>) could result in confused internal bookkeeping for elements
subsequently added to the @ISA array.  For instance, creating a weak
reference to the element itself could push that weak reference on to @ISA;
and elements added after use of C<$#ISA> would be ignored by method lookup
[perl #85670].
(TBT)

=back

=head2 Other notable fixes

(その他の注目するべき修正)

=over

=item *

=begin original

C<quotemeta> now quotes consistently the same non-ASCII characters under
C<use feature 'unicode_strings'>, regardless of whether the string is
encoded in UTF-8 or not, hence fixing the last vestiges (we hope) of the
infamous L<perlunicode/The "Unicode Bug">.  [perl #77654].

=end original

C<quotemeta> now quotes consistently the same non-ASCII characters under
C<use feature 'unicode_strings'>, regardless of whether the string is
encoded in UTF-8 or not, hence fixing the last vestiges (we hope) of the
infamous L<perlunicode/The "Unicode Bug">.  [perl #77654].
(TBT)

=begin original

Which of these code points is quoted has changed, based on Unicode's
recommendations.  See L<perlfunc/quotemeta> for details.

=end original

Which of these code points is quoted has changed, based on Unicode's
recommendations.  See L<perlfunc/quotemeta> for details.
(TBT)

=item *

=begin original

C<study> is now a no-op, presumably fixing all outstanding bugs related to
study causing regex matches to behave incorrectly!

=end original

C<study> is now a no-op, presumably fixing all outstanding bugs related to
study causing regex matches to behave incorrectly!
(TBT)

=item *

=begin original

When one writes C<open foo || die>, which used to work in Perl 4, a
"Precedence problem" warning is produced.  This warning used erroneously to
apply to fully-qualified bareword handle names not followed by C<||>.  This
has been corrected.

=end original

When one writes C<open foo || die>, which used to work in Perl 4, a
"Precedence problem" warning is produced.  This warning used erroneously to
apply to fully-qualified bareword handle names not followed by C<||>.  This
has been corrected.
(TBT)

=item *

=begin original

After package aliasing (C<*foo:: = *bar::>), C<select> with 0 or 1 argument
would sometimes return a name that could not be used to refer to the
filehandle, or sometimes it would return C<undef> even when a filehandle
was selected.  Now it returns a typeglob reference in such cases.

=end original

After package aliasing (C<*foo:: = *bar::>), C<select> with 0 or 1 argument
would sometimes return a name that could not be used to refer to the
filehandle, or sometimes it would return C<undef> even when a filehandle
was selected.  Now it returns a typeglob reference in such cases.
(TBT)

=item *

=begin original

C<PerlIO::get_layers> no longer ignores some arguments that it thinks are
numeric, while treating others as filehandle names.  It is now consistent
for flat scalars (i.e., not references).

=end original

C<PerlIO::get_layers> no longer ignores some arguments that it thinks are
numeric, while treating others as filehandle names.  It is now consistent
for flat scalars (i.e., not references).
(TBT)

=item *

=begin original

Unrecognised switches on C<#!> line

=end original

Unrecognised switches on C<#!> line
(TBT)

=begin original

If a switch, such as B<-x>, that cannot occur on the C<#!> line is used
there, perl dies with "Can't emulate...".

=end original

If a switch, such as B<-x>, that cannot occur on the C<#!> line is used
there, perl dies with "Can't emulate...".
(TBT)

=begin original

It used to produce the same message for switches that perl did not
recognise at all, whether on the command line or the C<#!> line.

=end original

It used to produce the same message for switches that perl did not
recognise at all, whether on the command line or the C<#!> line.
(TBT)

=begin original

Now it produces the "Unrecognized switch" error message [perl #104288].

=end original

Now it produces the "Unrecognized switch" error message [perl #104288].
(TBT)

=item *

=begin original

C<system> now temporarily blocks the SIGCHLD signal handler, to prevent the
signal handler from stealing the exit status [perl #105700].

=end original

C<system> now temporarily blocks the SIGCHLD signal handler, to prevent the
signal handler from stealing the exit status [perl #105700].
(TBT)

=item *

=begin original

The %n formatting code for C<printf> and C<sprintf>, which causes the number
of characters to be assigned to the next argument, now actually
assigns the number of characters, instead of the number of bytes.

=end original

The %n formatting code for C<printf> and C<sprintf>, which causes the number
of characters to be assigned to the next argument, now actually
assigns the number of characters, instead of the number of bytes.
(TBT)

=begin original

It also works now with special lvalue functions like C<substr> and with
nonexistent hash and array elements [perl #3471, #103492].

=end original

It also works now with special lvalue functions like C<substr> and with
nonexistent hash and array elements [perl #3471, #103492].
(TBT)

=item *

=begin original

Perl skips copying values returned from a subroutine, for the sake of
speed, if doing so would make no observable difference.  Due to faulty
logic, this would happen with the
result of C<delete>, C<shift> or C<splice>, even if the result was
referenced elsewhere.  It also did so with tied variables about to be freed
[perl #91844, #95548].

=end original

Perl skips copying values returned from a subroutine, for the sake of
speed, if doing so would make no observable difference.  Due to faulty
logic, this would happen with the
result of C<delete>, C<shift> or C<splice>, even if the result was
referenced elsewhere.  It also did so with tied variables about to be freed
[perl #91844, #95548].
(TBT)

=item *

=begin original

C<utf8::decode> now refuses to modify read-only scalars [perl #91850].

=end original

C<utf8::decode> now refuses to modify read-only scalars [perl #91850].
(TBT)

=item *

=begin original

Freeing $_ inside a C<grep> or C<map> block, a code block embedded in a
regular expression, or an @INC filter (a subroutine returned by a
subroutine in @INC) used to result in double frees or crashes
[perl #91880, #92254, #92256].

=end original

Freeing $_ inside a C<grep> or C<map> block, a code block embedded in a
regular expression, or an @INC filter (a subroutine returned by a
subroutine in @INC) used to result in double frees or crashes
[perl #91880, #92254, #92256].
(TBT)

=item *

=begin original

C<eval> returns C<undef> in scalar context or an empty list in list
context when there is a run-time error.  When C<eval> was passed a
string in list context and a syntax error occurred, it used to return a
list containing a single undefined element.  Now it returns an empty
list in list context for all errors [perl #80630].

=end original

C<eval> returns C<undef> in scalar context or an empty list in list
context when there is a run-time error.  When C<eval> was passed a
string in list context and a syntax error occurred, it used to return a
list containing a single undefined element.  Now it returns an empty
list in list context for all errors [perl #80630].
(TBT)

=item *

=begin original

C<goto &func> no longer crashes, but produces an error message, when
the unwinding of the current subroutine's scope fires a destructor that
undefines the subroutine being "goneto" [perl #99850].

=end original

C<goto &func> no longer crashes, but produces an error message, when
the unwinding of the current subroutine's scope fires a destructor that
undefines the subroutine being "goneto" [perl #99850].
(TBT)

=item *

=begin original

Perl now holds an extra reference count on the package that code is
currently compiling in.  This means that the following code no longer
crashes [perl #101486]:

=end original

Perl now holds an extra reference count on the package that code is
currently compiling in.  This means that the following code no longer
crashes [perl #101486]:
(TBT)

    package Foo;
    BEGIN {*Foo:: = *Bar::}
    sub foo;

=item *

=begin original

The C<x> repetition operator no longer crashes on 64-bit builds with large
repeat counts [perl #94560].

=end original

The C<x> repetition operator no longer crashes on 64-bit builds with large
repeat counts [perl #94560].
(TBT)

=item *

=begin original

Calling C<require> on an implicit C<$_> when C<*CORE::GLOBAL::require> has
been overridden does not segfault anymore, and C<$_> is now passed to the
overriding subroutine [perl #78260].

=end original

Calling C<require> on an implicit C<$_> when C<*CORE::GLOBAL::require> has
been overridden does not segfault anymore, and C<$_> is now passed to the
overriding subroutine [perl #78260].
(TBT)

=item *

=begin original

C<use> and C<require> are no longer affected by the I/O layers active in
the caller's scope (enabled by L<open.pm|open>) [perl #96008].

=end original

C<use> and C<require> are no longer affected by the I/O layers active in
the caller's scope (enabled by L<open.pm|open>) [perl #96008].
(TBT)

=item *

=begin original

C<our $::e; $e> (which is invalid) no longer produces the "Compilation
error at lib/utf8_heavy.pl..." error message, which it started emitting in
5.10.0 [perl #99984].

=end original

C<our $::e; $e> (which is invalid) no longer produces the "Compilation
error at lib/utf8_heavy.pl..." error message, which it started emitting in
5.10.0 [perl #99984].
(TBT)

=item *

=begin original

On 64-bit systems, C<read()> now understands large string offsets beyond
the 32-bit range.

=end original

On 64-bit systems, C<read()> now understands large string offsets beyond
the 32-bit range.
(TBT)

=item *

=begin original

Errors that occur when processing subroutine attributes no longer cause the
subroutine's op tree to leak.

=end original

Errors that occur when processing subroutine attributes no longer cause the
subroutine's op tree to leak.
(TBT)

=item *

=begin original

Passing the same constant subroutine to both C<index> and C<formline> no
longer causes one or the other to fail [perl #89218]. (5.14.1)

=end original

同じ定数サブルーチンを C<index> と C<formline> の両方に渡してもどちらかが
失敗しなくなりました [perl #89218]。(5.14.1)

=item *

=begin original

List assignment to lexical variables declared with attributes in the same
statement (C<my ($x,@y) : blimp = (72,94)>) stopped working in Perl 5.8.0.
It has now been fixed.

=end original

List assignment to lexical variables declared with attributes in the same
statement (C<my ($x,@y) : blimp = (72,94)>) stopped working in Perl 5.8.0.
It has now been fixed.
(TBT)

=item *

=begin original

Perl 5.10.0 introduced some faulty logic that made "U*" in the middle of
a pack template equivalent to "U0" if the input string was empty.  This has
been fixed [perl #90160]. (5.14.2)

=end original

Perl 5.10.0 で間違ったロジックが導入され、入力文字列が空のとき、
pack テンプレートの中間にある "U*" が "U0" と等価になっていました。
これは修正されました [perl #90160]。(5.14.2)

=item *

=begin original

Destructors on objects were not called during global destruction on objects
that were not referenced by any scalars.  This could happen if an array
element were blessed (e.g., C<bless \$a[0]>) or if a closure referenced a
blessed variable (C<bless \my @a; sub foo { @a }>).

=end original

Destructors on objects were not called during global destruction on objects
that were not referenced by any scalars.  This could happen if an array
element were blessed (e.g., C<bless \$a[0]>) or if a closure referenced a
blessed variable (C<bless \my @a; sub foo { @a }>).
(TBT)

=begin original

Now there is an extra pass during global destruction to fire destructors on
any objects that might be left after the usual passes that check for
objects referenced by scalars [perl #36347].

=end original

Now there is an extra pass during global destruction to fire destructors on
any objects that might be left after the usual passes that check for
objects referenced by scalars [perl #36347].
(TBT)

=item *

=begin original

Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document [perl #90128]. (5.14.1)

=end original

ヒヤドキュメントをパースするときに解放されたバッファから読み込めることが
あったケースを修正しました。(5.14.1)

=item *

=begin original

C<each(I<ARRAY>)> is now wrapped in C<defined(...)>, like C<each(I<HASH>)>,
inside a C<while> condition [perl #90888].

=end original

C<each(I<ARRAY>)> is now wrapped in C<defined(...)>, like C<each(I<HASH>)>,
inside a C<while> condition [perl #90888].
(TBT)

=item *

=begin original

A problem with context propagation when a C<do> block is an argument to
C<return> has been fixed.  It used to cause C<undef> to be returned in
some cases of a C<return> inside an C<if> block which itself is followed by
another C<return>.

=end original

A problem with context propagation when a C<do> block is an argument to
C<return> has been fixed.  It used to cause C<undef> to be returned in
some cases of a C<return> inside an C<if> block which itself is followed by
another C<return>.
(TBT)

=item *

=begin original

Calling C<index> with a tainted constant no longer causes constants in
subsequently compiled code to become tainted [perl #64804].

=end original

Calling C<index> with a tainted constant no longer causes constants in
subsequently compiled code to become tainted [perl #64804].
(TBT)

=item *

=begin original

Infinite loops like C<1 while 1> used to stop C<strict 'subs'> mode from
working for the rest of the block.t

=end original

Infinite loops like C<1 while 1> used to stop C<strict 'subs'> mode from
working for the rest of the block.t
(TBT)

=item *

=begin original

For list assignments like C<($a,$b) = ($b,$a)>, Perl has to make a copy of
the items on the right-hand side before assignment them to the left.  For
efficiency's sake, it assigns the values on the right straight to the items
on the left if no one variable is mentioned on both sides, as in C<($a,$b) =
($c,$d)>.  The logic for determining when it can cheat was faulty, in that
C<&&> and C<||> on the right-hand side could fool it.  So C<($a,$b) =
$some_true_value && ($b,$a)> would end up assigning the value of C<$b> to
both scalars.

=end original

For list assignments like C<($a,$b) = ($b,$a)>, Perl has to make a copy of
the items on the right-hand side before assignment them to the left.  For
efficiency's sake, it assigns the values on the right straight to the items
on the left if no one variable is mentioned on both sides, as in C<($a,$b) =
($c,$d)>.  The logic for determining when it can cheat was faulty, in that
C<&&> and C<||> on the right-hand side could fool it.  So C<($a,$b) =
$some_true_value && ($b,$a)> would end up assigning the value of C<$b> to
both scalars.
(TBT)

=item *

=begin original

Perl no longer tries to apply lvalue context to the string in
C<("string", $variable) ||= 1> (which used to be an error).  Since the
left-hand side of C<||=> is evaluated in scalar context, that's a scalar
comma operator, which gives all but the last item void context.  There is
no such thing as void lvalue context, so it was a mistake for Perl to try
to force it [perl #96942].

=end original

Perl no longer tries to apply lvalue context to the string in
C<("string", $variable) ||= 1> (which used to be an error).  Since the
left-hand side of C<||=> is evaluated in scalar context, that's a scalar
comma operator, which gives all but the last item void context.  There is
no such thing as void lvalue context, so it was a mistake for Perl to try
to force it [perl #96942].
(TBT)

=item *

=begin original

C<caller> no longer leaks memory when called from the DB package if
C<@DB::args> was assigned to after the first call to C<caller>.  L<Carp>
was triggering this bug [perl #97010]. (5.14.2)

=end original

C<@DB::args> が最初の C<caller> 呼び出しの後に値が代入されているときに、
C<caller> を DB パッケージから呼び出してもメモリリークしなくなりました。
L<Carp> がこのバグの引き金を引いていました [perl #97010]。(5.14.2)

=item *

=begin original

C<close> and similar filehandle functions, when called on built-in global
variables (like C<$+>), used to die if the variable happened to hold the
undefined value, instead of producing the usual "Use of uninitialized
value" warning.

=end original

C<close> and similar filehandle functions, when called on built-in global
variables (like C<$+>), used to die if the variable happened to hold the
undefined value, instead of producing the usual "Use of uninitialized
value" warning.
(TBT)

=item *

=begin original

When autovivified file handles were introduced in Perl 5.6.0, C<readline>
was inadvertently made to autovivify when called as C<readline($foo)> (but
not as C<E<lt>$fooE<gt>>).  It has now been fixed never to autovivify.

=end original

When autovivified file handles were introduced in Perl 5.6.0, C<readline>
was inadvertently made to autovivify when called as C<readline($foo)> (but
not as C<E<lt>$fooE<gt>>).  It has now been fixed never to autovivify.
(TBT)

=item *

=begin original

Calling an undefined anonymous subroutine (e.g., what $x holds after
C<undef &{$x = sub{}}>) used to cause a "Not a CODE reference" error, which
has been corrected to "Undefined subroutine called" [perl #71154].

=end original

Calling an undefined anonymous subroutine (e.g., what $x holds after
C<undef &{$x = sub{}}>) used to cause a "Not a CODE reference" error, which
has been corrected to "Undefined subroutine called" [perl #71154].
(TBT)

=item *

=begin original

Causing C<@DB::args> to be freed between uses of C<caller> no longer
results in a crash [perl #93320].

=end original

Causing C<@DB::args> to be freed between uses of C<caller> no longer
results in a crash [perl #93320].
(TBT)

=item *

=begin original

C<setpgrp($foo)> used to be equivalent to C<($foo, setpgrp)>, because
C<setpgrp> was ignoring its argument if there was just one.  Now it is
equivalent to C<setpgrp($foo,0)>.

=end original

C<setpgrp($foo)> used to be equivalent to C<($foo, setpgrp)>, because
C<setpgrp> was ignoring its argument if there was just one.  Now it is
equivalent to C<setpgrp($foo,0)>.
(TBT)

=item *

=begin original

C<shmread> was not setting the scalar flags correctly when reading from
shared memory, causing the existing cached numeric representation in the
scalar to persist [perl #98480].

=end original

C<shmread> was not setting the scalar flags correctly when reading from
shared memory, causing the existing cached numeric representation in the
scalar to persist [perl #98480].
(TBT)

=item *

=begin original

C<++> and C<--> now work on copies of globs, instead of dying.

=end original

C<++> and C<--> now work on copies of globs, instead of dying.
(TBT)

=item *

=begin original

C<splice()> doesn't warn when truncating

=end original

C<splice()> doesn't warn when truncating
(TBT)

=begin original

You can now limit the size of an array using C<splice(@a,MAX_LEN)> without
worrying about warnings.

=end original

You can now limit the size of an array using C<splice(@a,MAX_LEN)> without
worrying about warnings.
(TBT)

=item *

=begin original

C<< $$ >> is no longer tainted.  Since this value comes directly from
C<< getpid() >>, it is always safe.

=end original

C<< $$ >> is no longer tainted.  Since this value comes directly from
C<< getpid() >>, it is always safe.
(TBT)

=item *

=begin original

The parser no longer leaks a filehandle if STDIN was closed before parsing
started [perl #37033].

=end original

The parser no longer leaks a filehandle if STDIN was closed before parsing
started [perl #37033].
(TBT)

=item *

=begin original

C<< die; >> with a non-reference, non-string, or magical (e.g., tainted)
value in $@ now properly propagates that value [perl #111654].

=end original

C<< die; >> with a non-reference, non-string, or magical (e.g., tainted)
value in $@ now properly propagates that value [perl #111654].
(TBT)

=back

=head1 Known Problems

(既知の問題)

=over 4

=item *

=begin original

On Solaris, we have two kinds of failure.

=end original

Solaris では、2 種類の問題があります。

=begin original

If F<make> is Sun's F<make≥>, we get an error about a badly formed macro
assignment in the F<Makefile>.  That happens when F<./Configure> tries to
make depends.  F<Configure> then exits  0, but further F<make>-ing fails.

=end original

If F<make> is Sun's F<make≥>, we get an error about a badly formed macro
assignment in the F<Makefile>.  That happens when F<./Configure> tries to
make depends.  F<Configure> then exits  0, but further F<make>-ing fails.
(TBT)

=begin original

If F<make> is F<gmake>, F<Configure> completes, then we get errors related
to F</usr/include/stdbool.h>

=end original

If F<make> is F<gmake>, F<Configure> completes, then we get errors related
to F</usr/include/stdbool.h>
(TBT)

=item *

=begin original

The following CPAN modules have test failures with perl 5.16.  Patches have
been submitted for all of these, so hopefully there will be new releases
soon:

=end original

The following CPAN modules have test failures with perl 5.16.  Patches have
been submitted for all of these, so hopefully there will be new releases
soon:

=over

=item *

=begin original

L<Date::Pcalc> version 6.1

=end original

L<Date::Pcalc> バージョン 6.1

=item *

=begin original

L<Module::CPANTS::Analyse> version 0.85

=end original

L<Module::CPANTS::Analyse> バージョン 0.85

=begin original

This fails due to problems in L<Module::Find> 0.10 and L<File::MMagic>
1.27.

=end original

これは L<Module::Find> 0.10 と L<File::MMagic> 1.27 の問題によって
失敗します。

=item *

=begin original

L<PerlIO::Util> version 0.72

=end original

L<PerlIO::Util> バージョン 0.72

=back

=back

=head1 Acknowledgements

=begin original

Perl 5.16.0 represents approximately 12 months of development since Perl
5.14.0 and contains approximately 590,000 lines of changes across 2,500
files from 137 authors.

=end original

Perl 5.16.0 は、Perl 5.14.0 以降、137 人の作者によって、
2,500 のファイルに約 590,000 行の変更を加えて、
約 12 ヶ月開発されてきました。

=begin original

Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.1:

=end original

Perl は、活気のあるユーザーと開発者のコミュニティのおかげで
20 年を超えて繁栄しています。
以下の人々が、Perl 5.16.0 になるための改良に貢献したことが
分かっています:

Aaron Crane, Abhijit Menon-Sen, Abigail, Alan Haggai Alavi, Alberto
Simões, Alexandr Ciornii, Andreas König, Andy Dougherty, Aristotle
Pagaltzis, Bo Johansson, Bo Lindbergh, brian d foy, Brian Fraser, Brian
Greenfield, Carl Hayter, Chas. Owens, Chia-liang Kao, Chip Salzenberg,
Chris 'BinGOs' Williams, Christian Hansen, Christopher J. Madsen,
chromatic, Claes Jacobsson, Claudio Ramirez, Craig A. Berry, Damian
Conway, Daniel Kahn Gillmor, Darin McBride, Dave Rolsky, David Cantrell,
David Golden, David Leadbeater, David Mitchell, Dee Newcum, Dennis
Kaarsemaker, Dominic Hargreaves, Douglas Christopher Wilson, Eric Brine,
Father Chrysostomos, Florian Ragwitz, Frederic Briere, George Greer,
Gerard Goossen, Gisle Aas, H.Merijn Brand, Hojung Youn, Ian Goodacre,
James E Keenan, Jan Dubois, Jerry D. Hedden, Jesse Luehrs, Jesse
Vincent, Jilles Tjoelker, Jim Cromie, Jim Meyering, Joel Berger, Johan
Vromans, Johannes Plunien, John Hawkinson, John P. Linderman, John
Peacock, Joshua ben Jore, Juerd Waalboer, Karl Williamson, Karthik
Rajagopalan, Keith Thompson, Kevin J.  Woolley, Kevin Ryde, Laurent
Dami, Leo Lapworth, Leon Brocard, Leon Timmermans, Louis Strous, Lukas
Mai, Marc Green, Marcel Grünauer, Mark A. Stratman, Mark Dootson, Mark
Jason Dominus, Martin Hasch, Matthew Horsfall, Max Maischein, Michael G
Schwern, Michael Witten, Mike Sheldrake, Moritz Lenz, Nicholas Clark,
Niko Tyni, Nuno Carvalho, Pau Amma, Paul Evans, Paul Green, Paul
Johnson, Perlover, Peter John Acklam, Peter Martini, Peter Scott, Phil
Monsen, Pino Toscano, Rafael Garcia-Suarez, Rainer Tammer, Reini Urban,
Ricardo Signes, Robin Barker, Rodolfo Carvalho, Salvador Fandiño, Sam
Kimbrel, Samuel Thibault, Shawn M Moore, Shigeya Suzuki, Shlomi Fish,
Sisyphus, Slaven Rezic, Spiros Denaxas, Steffen Müller, Steffen
Schwigon, Stephen Bennett, Stephen Oberholtzer, Stevan Little, Steve
Hay, Steve Peters, Thomas Sibley, Thorsten Glaser, Timothe Litt, Todd
Rinaldo, Tom Christiansen, Tom Hukins, Tony Cook, Vadim Konovalov,
Vincent Pit, Vladimir Timofeev, Walt Mankowski, Yves Orton, Zefram,
Zsbán Ambrus, Ævar Arnfjörð Bjarmason.

=begin original

The list above is almost certainly incomplete as it is automatically
generated from version control history.  In particular, it does not
include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker.

=end original

これはバージョンコントロール履歴から自動的に生成しているので、
ほぼ確実に不完全です。
特に、Perl 5.14.0 をよりよくするための助けとなった、以前のバージョンの
Perl の問題を報告してくれた(とてもありがたい)貢献者の名前を含んでいません。

=begin original

Many of the changes included in this version originated in the CPAN
modules included in Perl's core.  We're grateful to the entire CPAN
community for helping Perl to flourish.

=end original

このバージョンに含まれている変更の多くは、Perl コアに含まれている CPAN
モジュール由来のものです。
私たちは Perl が繁栄するのを助けている CPAN コミュニティ全体に感謝します。

=begin original

For a more complete list of all of Perl's historical contributors,
please see the F<AUTHORS> file in the Perl source distribution.

=end original

全ての Perl の歴史的な貢献者のより完全な一覧はについては、
どうか Perl ソース配布に含まれている F<AUTHORS> を参照してください。

=head1 Reporting Bugs

(バグ報告)

=begin original

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at L<http://rt.perl.org/perlbug/>.  There may also be
information at L<http://www.perl.org/>, the Perl Home Page.

=end original

もしバグと思われるものを見つけたら、comp.lang.perl.misc ニュースグループに
最近投稿された記事や L<http://rt.perl.org/perlbug/> にある perl バグ
データベースを確認してください。
Perl ホームページ、L<http://www.perl.org/> にも情報があります。

=begin original

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

=end original

もしまだ報告されていないバグだと確信したら、そのリリースに含まれている
L<perlbug> プログラムを実行してください。
バグの再現スクリプトを十分小さく、しかし有効なコードに切りつめることを
意識してください。
バグレポートは C<perl -V> の出力と一緒に perlbug@perl.org に送られ
Perl porting チームによって解析されます。

=begin original

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5-security-report@perl.org.  This points to a closed
subscription unarchived mailing list, which includes all the core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported.  Please only use this address for security issues in the Perl
core, not for modules independently distributed on CPAN.

=end original

もし報告しようとしているバグがセキュリティに関するもので、公開されている
メーリングリストに送るのが不適切なものなら、
perl5-security-report@perl.org に送ってください。
このアドレスは、問題の影響を評価し、解決法を見つけ、Perl が対応している
全てのプラットフォームで問題を軽減または解決するパッチをリリースするのを
助けることが出来る、全てのコアコミッタが参加している非公開の
メーリングリストになっています。
このアドレスは、独自に CPAN で配布されているモジュールではなく、
Perl コアのセキュリティ問題だけに使ってください。

=head1 SEE ALSO

=begin original

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

=end original

変更点の完全な詳細を見る方法については F<Changes> ファイル。

=begin original

The F<INSTALL> file for how to build Perl.

=end original

Perl のビルド方法については F<INSTALL> ファイル。

=begin original

The F<README> file for general stuff.

=end original

一般的なことについては F<README> ファイル。

=begin original

The F<Artistic> and F<Copying> files for copyright information.

=end original

著作権情報については F<Artistic> 及び F<Copying> ファイル。

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>

=end meta

=cut
