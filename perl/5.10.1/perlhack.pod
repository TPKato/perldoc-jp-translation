
=encoding euc-jp

=head1 NAME

=begin original

perlhack - How to hack at the Perl internals

=end original

perlhack - Perl の内部をハックする方法

=head1 DESCRIPTION

=begin original

This document attempts to explain how Perl development takes place,
and ends with some suggestions for people wanting to become bona fide
porters.

=end original

この文書は、Perl 開発がどのように行われているかを説明しようと試み、最後に
正真正銘の porters になりたい人々に対する提案が付いています。

=begin original

The perl5-porters mailing list is where the Perl standard distribution
is maintained and developed.  The list can get anywhere from 10 to 150
messages a day, depending on the heatedness of the debate.  Most days
there are two or three patches, extensions, features, or bugs being
discussed at a time.

=end original

The perl5-porters mailing list is where the Perl standard distribution
is maintained and developed.  The list can get anywhere from 10 to 150
messages a day, depending on the heatedness of the debate.  Most days
there are two or three patches, extensions, features, or bugs being
discussed at a time.
(TBT)

=begin original

A searchable archive of the list is at either:

=end original

メーリングリストの検索可能なアーカイブは以下の場所か:

    http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/

=begin original

or

=end original

または

    http://archive.develooper.com/perl5-porters@perl.org/

=begin original

List subscribers (the porters themselves) come in several flavours.
Some are quiet curious lurkers, who rarely pitch in and instead watch
the ongoing development to ensure they're forewarned of new changes or
features in Perl.  Some are representatives of vendors, who are there
to make sure that Perl continues to compile and work on their
platforms.  Some patch any reported bug that they know how to fix,
some are actively patching their pet area (threads, Win32, the regexp
engine), while others seem to do nothing but complain.  In other
words, it's your usual mix of technical people.

=end original

List subscribers (the porters themselves) come in several flavours.
Some are quiet curious lurkers, who rarely pitch in and instead watch
the ongoing development to ensure they're forewarned of new changes or
features in Perl.  Some are representatives of vendors, who are there
to make sure that Perl continues to compile and work on their
platforms.  Some patch any reported bug that they know how to fix,
some are actively patching their pet area (threads, Win32, the regexp
engine), while others seem to do nothing but complain.  In other
words, it's your usual mix of technical people.
(TBT)

=begin original

Over this group of porters presides Larry Wall.  He has the final word
in what does and does not change in the Perl language.  Various
releases of Perl are shepherded by a "pumpking", a porter
responsible for gathering patches, deciding on a patch-by-patch,
feature-by-feature basis what will and will not go into the release.
For instance, Gurusamy Sarathy was the pumpking for the 5.6 release of
Perl, and Jarkko Hietaniemi was the pumpking for the 5.8 release, and
Rafael Garcia-Suarez holds the pumpking crown for the 5.10 release.

=end original

Over this group of porters presides Larry Wall.  He has the final word
in what does and does not change in the Perl language.  Various
releases of Perl are shepherded by a "pumpking", a porter
responsible for gathering patches, deciding on a patch-by-patch,
feature-by-feature basis what will and will not go into the release.
For instance, Gurusamy Sarathy was the pumpking for the 5.6 release of
Perl, and Jarkko Hietaniemi was the pumpking for the 5.8 release, and
Rafael Garcia-Suarez holds the pumpking crown for the 5.10 release.
(TBT)

=begin original

In addition, various people are pumpkings for different things.  For
instance, Andy Dougherty and Jarkko Hietaniemi did a grand job as the
I<Configure> pumpkin up till the 5.8 release. For the 5.10 release
H.Merijn Brand took over.

=end original

In addition, various people are pumpkings for different things.  For
instance, Andy Dougherty and Jarkko Hietaniemi did a grand job as the
I<Configure> pumpkin up till the 5.8 release. For the 5.10 release
H.Merijn Brand took over.
(TBT)

=begin original

Larry sees Perl development along the lines of the US government:
there's the Legislature (the porters), the Executive branch (the
pumpkings), and the Supreme Court (Larry).  The legislature can
discuss and submit patches to the executive branch all they like, but
the executive branch is free to veto them.  Rarely, the Supreme Court
will side with the executive branch over the legislature, or the
legislature over the executive branch.  Mostly, however, the
legislature and the executive branch are supposed to get along and
work out their differences without impeachment or court cases.

=end original

Larry sees Perl development along the lines of the US government:
there's the Legislature (the porters), the Executive branch (the
pumpkings), and the Supreme Court (Larry).  The legislature can
discuss and submit patches to the executive branch all they like, but
the executive branch is free to veto them.  Rarely, the Supreme Court
will side with the executive branch over the legislature, or the
legislature over the executive branch.  Mostly, however, the
legislature and the executive branch are supposed to get along and
work out their differences without impeachment or court cases.
(TBT)

=begin original

You might sometimes see reference to Rule 1 and Rule 2.  Larry's power
as Supreme Court is expressed in The Rules:

=end original

You might sometimes see reference to Rule 1 and Rule 2.  Larry's power
as Supreme Court is expressed in The Rules:
(TBT)

=over 4

=item 1

=begin original

Larry is always by definition right about how Perl should behave.
This means he has final veto power on the core functionality.

=end original

Larry is always by definition right about how Perl should behave.
This means he has final veto power on the core functionality.
(TBT)

=item 2

=begin original

Larry is allowed to change his mind about any matter at a later date,
regardless of whether he previously invoked Rule 1.

=end original

Larry is allowed to change his mind about any matter at a later date,
regardless of whether he previously invoked Rule 1.
(TBT)

=back

=begin original

Got that?  Larry is always right, even when he was wrong.  It's rare
to see either Rule exercised, but they are often alluded to.

=end original

Got that?  Larry is always right, even when he was wrong.  It's rare
to see either Rule exercised, but they are often alluded to.
(TBT)

=begin original

New features and extensions to the language are contentious, because
the criteria used by the pumpkings, Larry, and other porters to decide
which features should be implemented and incorporated are not codified
in a few small design goals as with some other languages.  Instead,
the heuristics are flexible and often difficult to fathom.  Here is
one person's list, roughly in decreasing order of importance, of
heuristics that new features have to be weighed against:

=end original

New features and extensions to the language are contentious, because
the criteria used by the pumpkings, Larry, and other porters to decide
which features should be implemented and incorporated are not codified
in a few small design goals as with some other languages.  Instead,
the heuristics are flexible and often difficult to fathom.  Here is
one person's list, roughly in decreasing order of importance, of
heuristics that new features have to be weighed against:
(TBT)

=over 4

=item Does concept match the general goals of Perl?

=begin original

These haven't been written anywhere in stone, but one approximation
is:

=end original

These haven't been written anywhere in stone, but one approximation
is:
(TBT)

 1. Keep it fast, simple, and useful.
 2. Keep features/concepts as orthogonal as possible.
 3. No arbitrary limits (platforms, data sizes, cultures).
 4. Keep it open and exciting to use/patch/advocate Perl everywhere.
 5. Either assimilate new technologies, or build bridges to them.

=item Where is the implementation?

=begin original

All the talk in the world is useless without an implementation.  In
almost every case, the person or people who argue for a new feature
will be expected to be the ones who implement it.  Porters capable
of coding new features have their own agendas, and are not available
to implement your (possibly good) idea.

=end original

All the talk in the world is useless without an implementation.  In
almost every case, the person or people who argue for a new feature
will be expected to be the ones who implement it.  Porters capable
of coding new features have their own agendas, and are not available
to implement your (possibly good) idea.
(TBT)

=item Backwards compatibility

=begin original

It's a cardinal sin to break existing Perl programs.  New warnings are
contentious--some say that a program that emits warnings is not
broken, while others say it is.  Adding keywords has the potential to
break programs, changing the meaning of existing token sequences or
functions might break programs.

=end original

It's a cardinal sin to break existing Perl programs.  New warnings are
contentious--some say that a program that emits warnings is not
broken, while others say it is.  Adding keywords has the potential to
break programs, changing the meaning of existing token sequences or
functions might break programs.
(TBT)

=item Could it be a module instead?

=begin original

Perl 5 has extension mechanisms, modules and XS, specifically to avoid
the need to keep changing the Perl interpreter.  You can write modules
that export functions, you can give those functions prototypes so they
can be called like built-in functions, you can even write XS code to
mess with the runtime data structures of the Perl interpreter if you
want to implement really complicated things.  If it can be done in a
module instead of in the core, it's highly unlikely to be added.

=end original

Perl 5 has extension mechanisms, modules and XS, specifically to avoid
the need to keep changing the Perl interpreter.  You can write modules
that export functions, you can give those functions prototypes so they
can be called like built-in functions, you can even write XS code to
mess with the runtime data structures of the Perl interpreter if you
want to implement really complicated things.  If it can be done in a
module instead of in the core, it's highly unlikely to be added.
(TBT)

=item Is the feature generic enough?

=begin original

Is this something that only the submitter wants added to the language,
or would it be broadly useful?  Sometimes, instead of adding a feature
with a tight focus, the porters might decide to wait until someone
implements the more generalized feature.  For instance, instead of
implementing a "delayed evaluation" feature, the porters are waiting
for a macro system that would permit delayed evaluation and much more.

=end original

Is this something that only the submitter wants added to the language,
or would it be broadly useful?  Sometimes, instead of adding a feature
with a tight focus, the porters might decide to wait until someone
implements the more generalized feature.  For instance, instead of
implementing a "delayed evaluation" feature, the porters are waiting
for a macro system that would permit delayed evaluation and much more.
(TBT)

=item Does it potentially introduce new bugs?

=begin original

Radical rewrites of large chunks of the Perl interpreter have the
potential to introduce new bugs.  The smaller and more localized the
change, the better.

=end original

Radical rewrites of large chunks of the Perl interpreter have the
potential to introduce new bugs.  The smaller and more localized the
change, the better.
(TBT)

=item Does it preclude other desirable features?

=begin original

A patch is likely to be rejected if it closes off future avenues of
development.  For instance, a patch that placed a true and final
interpretation on prototypes is likely to be rejected because there
are still options for the future of prototypes that haven't been
addressed.

=end original

A patch is likely to be rejected if it closes off future avenues of
development.  For instance, a patch that placed a true and final
interpretation on prototypes is likely to be rejected because there
are still options for the future of prototypes that haven't been
addressed.
(TBT)

=item Is the implementation robust?

=begin original

Good patches (tight code, complete, correct) stand more chance of
going in.  Sloppy or incorrect patches might be placed on the back
burner until the pumpking has time to fix, or might be discarded
altogether without further notice.

=end original

Good patches (tight code, complete, correct) stand more chance of
going in.  Sloppy or incorrect patches might be placed on the back
burner until the pumpking has time to fix, or might be discarded
altogether without further notice.
(TBT)

=item Is the implementation generic enough to be portable?

=begin original

The worst patches make use of a system-specific features.  It's highly
unlikely that non-portable additions to the Perl language will be
accepted.

=end original

The worst patches make use of a system-specific features.  It's highly
unlikely that non-portable additions to the Perl language will be
accepted.
(TBT)

=item Is the implementation tested?

=begin original

Patches which change behaviour (fixing bugs or introducing new features)
must include regression tests to verify that everything works as expected.
Without tests provided by the original author, how can anyone else changing
perl in the future be sure that they haven't unwittingly broken the behaviour
the patch implements? And without tests, how can the patch's author be
confident that his/her hard work put into the patch won't be accidentally
thrown away by someone in the future?

=end original

Patches which change behaviour (fixing bugs or introducing new features)
must include regression tests to verify that everything works as expected.
Without tests provided by the original author, how can anyone else changing
perl in the future be sure that they haven't unwittingly broken the behaviour
the patch implements? And without tests, how can the patch's author be
confident that his/her hard work put into the patch won't be accidentally
thrown away by someone in the future?
(TBT)

=item Is there enough documentation?

=begin original

Patches without documentation are probably ill-thought out or
incomplete.  Nothing can be added without documentation, so submitting
a patch for the appropriate manpages as well as the source code is
always a good idea.

=end original

Patches without documentation are probably ill-thought out or
incomplete.  Nothing can be added without documentation, so submitting
a patch for the appropriate manpages as well as the source code is
always a good idea.
(TBT)

=item Is there another way to do it?

=begin original

Larry said "Although the Perl Slogan is I<There's More Than One Way
to Do It>, I hesitate to make 10 ways to do something".  This is a
tricky heuristic to navigate, though--one man's essential addition is
another man's pointless cruft.

=end original

Larry said "Although the Perl Slogan is I<There's More Than One Way
to Do It>, I hesitate to make 10 ways to do something".  This is a
tricky heuristic to navigate, though--one man's essential addition is
another man's pointless cruft.
(TBT)

=item Does it create too much work?

=begin original

Work for the pumpking, work for Perl programmers, work for module
authors, ...  Perl is supposed to be easy.

=end original

Work for the pumpking, work for Perl programmers, work for module
authors, ...  Perl is supposed to be easy.
(TBT)

=item Patches speak louder than words

=begin original

Working code is always preferred to pie-in-the-sky ideas.  A patch to
add a feature stands a much higher chance of making it to the language
than does a random feature request, no matter how fervently argued the
request might be.  This ties into "Will it be useful?", as the fact
that someone took the time to make the patch demonstrates a strong
desire for the feature.

=end original

Working code is always preferred to pie-in-the-sky ideas.  A patch to
add a feature stands a much higher chance of making it to the language
than does a random feature request, no matter how fervently argued the
request might be.  This ties into "Will it be useful?", as the fact
that someone took the time to make the patch demonstrates a strong
desire for the feature.
(TBT)

=back

=begin original

If you're on the list, you might hear the word "core" bandied
around.  It refers to the standard distribution.  "Hacking on the
core" means you're changing the C source code to the Perl
interpreter.  "A core module" is one that ships with Perl.

=end original

If you're on the list, you might hear the word "core" bandied
around.  It refers to the standard distribution.  "Hacking on the
core" means you're changing the C source code to the Perl
interpreter.  "A core module" is one that ships with Perl.
(TBT)

=head2 Keeping in sync

(同期し続ける)

=begin original

The source code to the Perl interpreter, in its different versions, is
kept in a repository managed by the git revision control system. The
pumpkings and a few others have write access to the repository to check in
changes.

=end original

The source code to the Perl interpreter, in its different versions, is
kept in a repository managed by the git revision control system. The
pumpkings and a few others have write access to the repository to check in
changes.
(TBT)

=begin original

How to clone and use the git perl repository is described in L<perlrepository>.

=end original

How to clone and use the git perl repository is described in L<perlrepository>.
(TBT)

=begin original

You can also choose to use rsync to get a copy of the current source tree
for the bleadperl branch and all maintenance branches :

=end original

You can also choose to use rsync to get a copy of the current source tree
for the bleadperl branch and all maintenance branches :
(TBT)

    $ rsync -avz rsync://perl5.git.perl.org/APC/perl-current .
    $ rsync -avz rsync://perl5.git.perl.org/APC/perl-5.10.x .
    $ rsync -avz rsync://perl5.git.perl.org/APC/perl-5.8.x .
    $ rsync -avz rsync://perl5.git.perl.org/APC/perl-5.6.x .
    $ rsync -avz rsync://perl5.git.perl.org/APC/perl-5.005xx .

=begin original

(Add the C<--delete> option to remove leftover files)

=end original

(Add the C<--delete> option to remove leftover files)
(TBT)

=begin original

You may also want to subscribe to the perl5-changes mailing list to
receive a copy of each patch that gets submitted to the maintenance
and development "branches" of the perl repository.  See
http://lists.perl.org/ for subscription information.

=end original

You may also want to subscribe to the perl5-changes mailing list to
receive a copy of each patch that gets submitted to the maintenance
and development "branches" of the perl repository.  See
http://lists.perl.org/ for subscription information.
(TBT)

=begin original

If you are a member of the perl5-porters mailing list, it is a good
thing to keep in touch with the most recent changes. If not only to
verify if what you would have posted as a bug report isn't already
solved in the most recent available perl development branch, also
known as perl-current, bleading edge perl, bleedperl or bleadperl.

=end original

If you are a member of the perl5-porters mailing list, it is a good
thing to keep in touch with the most recent changes. If not only to
verify if what you would have posted as a bug report isn't already
solved in the most recent available perl development branch, also
known as perl-current, bleading edge perl, bleedperl or bleadperl.
(TBT)

=begin original

Needless to say, the source code in perl-current is usually in a perpetual
state of evolution.  You should expect it to be very buggy.  Do B<not> use
it for any purpose other than testing and development.

=end original

Needless to say, the source code in perl-current is usually in a perpetual
state of evolution.  You should expect it to be very buggy.  Do B<not> use
it for any purpose other than testing and development.
(TBT)

=head2 Perlbug administration

(perlbug 管理)

=begin original

There is a single remote administrative interface for modifying bug status,
category, open issues etc. using the B<RT> bugtracker system, maintained
by Robert Spier.  Become an administrator, and close any bugs you can get
your sticky mitts on:

=end original

There is a single remote administrative interface for modifying bug status,
category, open issues etc. using the B<RT> bugtracker system, maintained
by Robert Spier.  Become an administrator, and close any bugs you can get
your sticky mitts on:
(TBT)

	http://bugs.perl.org/

=begin original

To email the bug system administrators:

=end original

To email the bug system administrators:
(TBT)

	"perlbug-admin" <perlbug-admin@perl.org>

=head2 Submitting patches

(パッチを投稿する)

=begin original

Always submit patches to I<perl5-porters@perl.org>.  If you're
patching a core module and there's an author listed, send the author a
copy (see L<Patching a core module>).  This lets other porters review
your patch, which catches a surprising number of errors in patches.
Please patch against the latest B<development> version. (e.g., even if
you're fixing a bug in the 5.8 track, patch against the C<blead> branch in
the git repository.)

=end original

Always submit patches to I<perl5-porters@perl.org>.  If you're
patching a core module and there's an author listed, send the author a
copy (see L<Patching a core module>).  This lets other porters review
your patch, which catches a surprising number of errors in patches.
Please patch against the latest B<development> version. (e.g., even if
you're fixing a bug in the 5.8 track, patch against the C<blead> branch in
the git repository.)
(TBT)

=begin original

If changes are accepted, they are applied to the development branch. Then
the maintenance pumpking decides which of those patches is to be
backported to the maint branch.  Only patches that survive the heat of the
development branch get applied to maintenance versions.

=end original

If changes are accepted, they are applied to the development branch. Then
the maintenance pumpking decides which of those patches is to be
backported to the maint branch.  Only patches that survive the heat of the
development branch get applied to maintenance versions.
(TBT)

=begin original

Your patch should update the documentation and test suite.  See
L<Writing a test>.  If you have added or removed files in the distribution,
edit the MANIFEST file accordingly, sort the MANIFEST file using
C<make manisort>, and include those changes as part of your patch.

=end original

Your patch should update the documentation and test suite.  See
L<Writing a test>.  If you have added or removed files in the distribution,
edit the MANIFEST file accordingly, sort the MANIFEST file using
C<make manisort>, and include those changes as part of your patch.
(TBT)

=begin original

Patching documentation also follows the same order: if accepted, a patch
is first applied to B<development>, and if relevant then it's backported
to B<maintenance>. (With an exception for some patches that document
behaviour that only appears in the maintenance branch, but which has
changed in the development version.)

=end original

Patching documentation also follows the same order: if accepted, a patch
is first applied to B<development>, and if relevant then it's backported
to B<maintenance>. (With an exception for some patches that document
behaviour that only appears in the maintenance branch, but which has
changed in the development version.)
(TBT)

=begin original

To report a bug in Perl, use the program I<perlbug> which comes with
Perl (if you can't get Perl to work, send mail to the address
I<perlbug@perl.org> or I<perlbug@perl.com>).  Reporting bugs through
I<perlbug> feeds into the automated bug-tracking system, access to
which is provided through the web at http://rt.perl.org/rt3/ .  It
often pays to check the archives of the perl5-porters mailing list to
see whether the bug you're reporting has been reported before, and if
so whether it was considered a bug.  See above for the location of
the searchable archives.

=end original

To report a bug in Perl, use the program I<perlbug> which comes with
Perl (if you can't get Perl to work, send mail to the address
I<perlbug@perl.org> or I<perlbug@perl.com>).  Reporting bugs through
I<perlbug> feeds into the automated bug-tracking system, access to
which is provided through the web at http://rt.perl.org/rt3/ .  It
often pays to check the archives of the perl5-porters mailing list to
see whether the bug you're reporting has been reported before, and if
so whether it was considered a bug.  See above for the location of
the searchable archives.
(TBT)

=begin original

The CPAN testers ( http://testers.cpan.org/ ) are a group of
volunteers who test CPAN modules on a variety of platforms.  Perl
Smokers ( http://www.nntp.perl.org/group/perl.daily-build and
http://www.nntp.perl.org/group/perl.daily-build.reports/ )
automatically test Perl source releases on platforms with various
configurations.  Both efforts welcome volunteers. In order to get
involved in smoke testing of the perl itself visit
L<http://search.cpan.org/dist/Test-Smoke>. In order to start smoke
testing CPAN modules visit L<http://search.cpan.org/dist/CPAN-YACSmoke/>
or L<http://search.cpan.org/dist/POE-Component-CPAN-YACSmoke/> or
L<http://search.cpan.org/dist/CPAN-Reporter/>.

=end original

The CPAN testers ( http://testers.cpan.org/ ) are a group of
volunteers who test CPAN modules on a variety of platforms.  Perl
Smokers ( http://www.nntp.perl.org/group/perl.daily-build and
http://www.nntp.perl.org/group/perl.daily-build.reports/ )
automatically test Perl source releases on platforms with various
configurations.  Both efforts welcome volunteers. In order to get
involved in smoke testing of the perl itself visit
L<http://search.cpan.org/dist/Test-Smoke>. In order to start smoke
testing CPAN modules visit L<http://search.cpan.org/dist/CPAN-YACSmoke/>
or L<http://search.cpan.org/dist/POE-Component-CPAN-YACSmoke/> or
L<http://search.cpan.org/dist/CPAN-Reporter/>.
(TBT)

=begin original

It's a good idea to read and lurk for a while before chipping in.
That way you'll get to see the dynamic of the conversations, learn the
personalities of the players, and hopefully be better prepared to make
a useful contribution when do you speak up.

=end original

It's a good idea to read and lurk for a while before chipping in.
That way you'll get to see the dynamic of the conversations, learn the
personalities of the players, and hopefully be better prepared to make
a useful contribution when do you speak up.
(TBT)

=begin original

If after all this you still think you want to join the perl5-porters
mailing list, send mail to I<perl5-porters-subscribe@perl.org>.  To
unsubscribe, send mail to I<perl5-porters-unsubscribe@perl.org>.

=end original

If after all this you still think you want to join the perl5-porters
mailing list, send mail to I<perl5-porters-subscribe@perl.org>.  To
unsubscribe, send mail to I<perl5-porters-unsubscribe@perl.org>.
(TBT)

=begin original

To hack on the Perl guts, you'll need to read the following things:

=end original

To hack on the Perl guts, you'll need to read the following things:
(TBT)

=over 3

=item L<perlguts>

=begin original

This is of paramount importance, since it's the documentation of what
goes where in the Perl source. Read it over a couple of times and it
might start to make sense - don't worry if it doesn't yet, because the
best way to study it is to read it in conjunction with poking at Perl
source, and we'll do that later on.

=end original

This is of paramount importance, since it's the documentation of what
goes where in the Perl source. Read it over a couple of times and it
might start to make sense - don't worry if it doesn't yet, because the
best way to study it is to read it in conjunction with poking at Perl
source, and we'll do that later on.
(TBT)

=begin original

Gisle Aas's illustrated perlguts (aka: illguts) is wonderful, although
a little out of date wrt some size details; the various SV structures
have since been reworked for smaller memory footprint.  The
fundamentals are right however, and the pictures are very helpful.

=end original

Gisle Aas's illustrated perlguts (aka: illguts) is wonderful, although
a little out of date wrt some size details; the various SV structures
have since been reworked for smaller memory footprint.  The
fundamentals are right however, and the pictures are very helpful.
(TBT)

=begin original

http://www.perl.org/tpc/1998/Perl_Language_and_Modules/Perl%20Illustrated/ 

=end original

http://www.perl.org/tpc/1998/Perl_Language_and_Modules/Perl%20Illustrated/ 
(TBT)

=item L<perlxstut> and L<perlxs>

=begin original

A working knowledge of XSUB programming is incredibly useful for core
hacking; XSUBs use techniques drawn from the PP code, the portion of the
guts that actually executes a Perl program. It's a lot gentler to learn
those techniques from simple examples and explanation than from the core
itself.

=end original

A working knowledge of XSUB programming is incredibly useful for core
hacking; XSUBs use techniques drawn from the PP code, the portion of the
guts that actually executes a Perl program. It's a lot gentler to learn
those techniques from simple examples and explanation than from the core
itself.
(TBT)

=item L<perlapi>

=begin original

The documentation for the Perl API explains what some of the internal
functions do, as well as the many macros used in the source.

=end original

The documentation for the Perl API explains what some of the internal
functions do, as well as the many macros used in the source.
(TBT)

=item F<Porting/pumpkin.pod>

=begin original

This is a collection of words of wisdom for a Perl porter; some of it is
only useful to the pumpkin holder, but most of it applies to anyone
wanting to go about Perl development.

=end original

This is a collection of words of wisdom for a Perl porter; some of it is
only useful to the pumpkin holder, but most of it applies to anyone
wanting to go about Perl development.
(TBT)

=item The perl5-porters FAQ

=begin original

This should be available from http://dev.perl.org/perl5/docs/p5p-faq.html .
It contains hints on reading perl5-porters, information on how
perl5-porters works and how Perl development in general works.

=end original

This should be available from http://dev.perl.org/perl5/docs/p5p-faq.html .
It contains hints on reading perl5-porters, information on how
perl5-porters works and how Perl development in general works.
(TBT)

=back

=head2 Finding Your Way Around

(回避方法を見つける)

=begin original

Perl maintenance can be split into a number of areas, and certain people
(pumpkins) will have responsibility for each area. These areas sometimes
correspond to files or directories in the source kit. Among the areas are:

=end original

Perl maintenance can be split into a number of areas, and certain people
(pumpkins) will have responsibility for each area. These areas sometimes
correspond to files or directories in the source kit. Among the areas are:
(TBT)

=over 3

=item Core modules

=begin original

Modules shipped as part of the Perl core live in the F<lib/> and F<ext/>
subdirectories: F<lib/> is for the pure-Perl modules, and F<ext/>
contains the core XS modules.

=end original

Modules shipped as part of the Perl core live in the F<lib/> and F<ext/>
subdirectories: F<lib/> is for the pure-Perl modules, and F<ext/>
contains the core XS modules.
(TBT)

=item Tests

=begin original

There are tests for nearly all the modules, built-ins and major bits
of functionality.  Test files all have a .t suffix.  Module tests live
in the F<lib/> and F<ext/> directories next to the module being
tested.  Others live in F<t/>.  See L<Writing a test>

=end original

There are tests for nearly all the modules, built-ins and major bits
of functionality.  Test files all have a .t suffix.  Module tests live
in the F<lib/> and F<ext/> directories next to the module being
tested.  Others live in F<t/>.  See L<Writing a test>
(TBT)

=item Documentation

=begin original

Documentation maintenance includes looking after everything in the
F<pod/> directory, (as well as contributing new documentation) and
the documentation to the modules in core.

=end original

Documentation maintenance includes looking after everything in the
F<pod/> directory, (as well as contributing new documentation) and
the documentation to the modules in core.
(TBT)

=item Configure

=begin original

The configure process is the way we make Perl portable across the
myriad of operating systems it supports. Responsibility for the
configure, build and installation process, as well as the overall
portability of the core code rests with the configure pumpkin - others
help out with individual operating systems.

=end original

The configure process is the way we make Perl portable across the
myriad of operating systems it supports. Responsibility for the
configure, build and installation process, as well as the overall
portability of the core code rests with the configure pumpkin - others
help out with individual operating systems.
(TBT)

=begin original

The files involved are the operating system directories, (F<win32/>,
F<os2/>, F<vms/> and so on) the shell scripts which generate F<config.h>
and F<Makefile>, as well as the metaconfig files which generate
F<Configure>. (metaconfig isn't included in the core distribution.)

=end original

The files involved are the operating system directories, (F<win32/>,
F<os2/>, F<vms/> and so on) the shell scripts which generate F<config.h>
and F<Makefile>, as well as the metaconfig files which generate
F<Configure>. (metaconfig isn't included in the core distribution.)
(TBT)

=item Interpreter

=begin original

And of course, there's the core of the Perl interpreter itself. Let's
have a look at that in a little more detail.

=end original

And of course, there's the core of the Perl interpreter itself. Let's
have a look at that in a little more detail.
(TBT)

=back

=begin original

Before we leave looking at the layout, though, don't forget that
F<MANIFEST> contains not only the file names in the Perl distribution,
but short descriptions of what's in them, too. For an overview of the
important files, try this:

=end original

Before we leave looking at the layout, though, don't forget that
F<MANIFEST> contains not only the file names in the Perl distribution,
but short descriptions of what's in them, too. For an overview of the
important files, try this:
(TBT)

    perl -lne 'print if /^[^\/]+\.[ch]\s+/' MANIFEST

=head2 Elements of the interpreter

(インタプリタの要素)

=begin original

The work of the interpreter has two main stages: compiling the code
into the internal representation, or bytecode, and then executing it.
L<perlguts/Compiled code> explains exactly how the compilation stage
happens.

=end original

The work of the interpreter has two main stages: compiling the code
into the internal representation, or bytecode, and then executing it.
L<perlguts/Compiled code> explains exactly how the compilation stage
happens.
(TBT)

=begin original

Here is a short breakdown of perl's operation:

=end original

Here is a short breakdown of perl's operation:
(TBT)

=over 3

=item Startup

=begin original

The action begins in F<perlmain.c>. (or F<miniperlmain.c> for miniperl)
This is very high-level code, enough to fit on a single screen, and it
resembles the code found in L<perlembed>; most of the real action takes
place in F<perl.c>

=end original

The action begins in F<perlmain.c>. (or F<miniperlmain.c> for miniperl)
This is very high-level code, enough to fit on a single screen, and it
resembles the code found in L<perlembed>; most of the real action takes
place in F<perl.c>
(TBT)

=begin original

F<perlmain.c> is generated by L<writemain> from F<miniperlmain.c> at
make time, so you should make perl to follow this along.

=end original

F<perlmain.c> is generated by L<writemain> from F<miniperlmain.c> at
make time, so you should make perl to follow this along.
(TBT)

=begin original

First, F<perlmain.c> allocates some memory and constructs a Perl
interpreter, along these lines:

=end original

First, F<perlmain.c> allocates some memory and constructs a Perl
interpreter, along these lines:
(TBT)

    1 PERL_SYS_INIT3(&argc,&argv,&env);
    2
    3 if (!PL_do_undump) {
    4     my_perl = perl_alloc();
    5     if (!my_perl)
    6         exit(1);
    7     perl_construct(my_perl);
    8     PL_perl_destruct_level = 0;
    9 }

=begin original

Line 1 is a macro, and its definition is dependent on your operating
system. Line 3 references C<PL_do_undump>, a global variable - all
global variables in Perl start with C<PL_>. This tells you whether the
current running program was created with the C<-u> flag to perl and then
F<undump>, which means it's going to be false in any sane context.

=end original

Line 1 is a macro, and its definition is dependent on your operating
system. Line 3 references C<PL_do_undump>, a global variable - all
global variables in Perl start with C<PL_>. This tells you whether the
current running program was created with the C<-u> flag to perl and then
F<undump>, which means it's going to be false in any sane context.
(TBT)

=begin original

Line 4 calls a function in F<perl.c> to allocate memory for a Perl
interpreter. It's quite a simple function, and the guts of it looks like
this:

=end original

Line 4 calls a function in F<perl.c> to allocate memory for a Perl
interpreter. It's quite a simple function, and the guts of it looks like
this:
(TBT)

    my_perl = (PerlInterpreter*)PerlMem_malloc(sizeof(PerlInterpreter));

=begin original

Here you see an example of Perl's system abstraction, which we'll see
later: C<PerlMem_malloc> is either your system's C<malloc>, or Perl's
own C<malloc> as defined in F<malloc.c> if you selected that option at
configure time.

=end original

Here you see an example of Perl's system abstraction, which we'll see
later: C<PerlMem_malloc> is either your system's C<malloc>, or Perl's
own C<malloc> as defined in F<malloc.c> if you selected that option at
configure time.
(TBT)

=begin original

Next, in line 7, we construct the interpreter using perl_construct, 
also in F<perl.c>; this sets up all the special variables that Perl 
needs, the stacks, and so on.

=end original

Next, in line 7, we construct the interpreter using perl_construct, 
also in F<perl.c>; this sets up all the special variables that Perl 
needs, the stacks, and so on.
(TBT)

=begin original

Now we pass Perl the command line options, and tell it to go:

=end original

Now we pass Perl the command line options, and tell it to go:
(TBT)

    exitstatus = perl_parse(my_perl, xs_init, argc, argv, (char **)NULL);
    if (!exitstatus)
        perl_run(my_perl);

    exitstatus = perl_destruct(my_perl);

    perl_free(my_perl);

=begin original

C<perl_parse> is actually a wrapper around C<S_parse_body>, as defined
in F<perl.c>, which processes the command line options, sets up any
statically linked XS modules, opens the program and calls C<yyparse> to
parse it.

=end original

C<perl_parse> is actually a wrapper around C<S_parse_body>, as defined
in F<perl.c>, which processes the command line options, sets up any
statically linked XS modules, opens the program and calls C<yyparse> to
parse it.
(TBT)

=item Parsing

=begin original

The aim of this stage is to take the Perl source, and turn it into an op
tree. We'll see what one of those looks like later. Strictly speaking,
there's three things going on here.

=end original

The aim of this stage is to take the Perl source, and turn it into an op
tree. We'll see what one of those looks like later. Strictly speaking,
there's three things going on here.
(TBT)

=begin original

C<yyparse>, the parser, lives in F<perly.c>, although you're better off
reading the original YACC input in F<perly.y>. (Yes, Virginia, there
B<is> a YACC grammar for Perl!) The job of the parser is to take your
code and "understand" it, splitting it into sentences, deciding which
operands go with which operators and so on.

=end original

C<yyparse>, the parser, lives in F<perly.c>, although you're better off
reading the original YACC input in F<perly.y>. (Yes, Virginia, there
B<is> a YACC grammar for Perl!) The job of the parser is to take your
code and "understand" it, splitting it into sentences, deciding which
operands go with which operators and so on.
(TBT)

=begin original

The parser is nobly assisted by the lexer, which chunks up your input
into tokens, and decides what type of thing each token is: a variable
name, an operator, a bareword, a subroutine, a core function, and so on.
The main point of entry to the lexer is C<yylex>, and that and its
associated routines can be found in F<toke.c>. Perl isn't much like
other computer languages; it's highly context sensitive at times, it can
be tricky to work out what sort of token something is, or where a token
ends. As such, there's a lot of interplay between the tokeniser and the
parser, which can get pretty frightening if you're not used to it.

=end original

The parser is nobly assisted by the lexer, which chunks up your input
into tokens, and decides what type of thing each token is: a variable
name, an operator, a bareword, a subroutine, a core function, and so on.
The main point of entry to the lexer is C<yylex>, and that and its
associated routines can be found in F<toke.c>. Perl isn't much like
other computer languages; it's highly context sensitive at times, it can
be tricky to work out what sort of token something is, or where a token
ends. As such, there's a lot of interplay between the tokeniser and the
parser, which can get pretty frightening if you're not used to it.
(TBT)

=begin original

As the parser understands a Perl program, it builds up a tree of
operations for the interpreter to perform during execution. The routines
which construct and link together the various operations are to be found
in F<op.c>, and will be examined later.

=end original

As the parser understands a Perl program, it builds up a tree of
operations for the interpreter to perform during execution. The routines
which construct and link together the various operations are to be found
in F<op.c>, and will be examined later.
(TBT)

=item Optimization

=begin original

Now the parsing stage is complete, and the finished tree represents
the operations that the Perl interpreter needs to perform to execute our
program. Next, Perl does a dry run over the tree looking for
optimisations: constant expressions such as C<3 + 4> will be computed
now, and the optimizer will also see if any multiple operations can be
replaced with a single one. For instance, to fetch the variable C<$foo>,
instead of grabbing the glob C<*foo> and looking at the scalar
component, the optimizer fiddles the op tree to use a function which
directly looks up the scalar in question. The main optimizer is C<peep>
in F<op.c>, and many ops have their own optimizing functions.

=end original

Now the parsing stage is complete, and the finished tree represents
the operations that the Perl interpreter needs to perform to execute our
program. Next, Perl does a dry run over the tree looking for
optimisations: constant expressions such as C<3 + 4> will be computed
now, and the optimizer will also see if any multiple operations can be
replaced with a single one. For instance, to fetch the variable C<$foo>,
instead of grabbing the glob C<*foo> and looking at the scalar
component, the optimizer fiddles the op tree to use a function which
directly looks up the scalar in question. The main optimizer is C<peep>
in F<op.c>, and many ops have their own optimizing functions.
(TBT)

=item Running

=begin original

Now we're finally ready to go: we have compiled Perl byte code, and all
that's left to do is run it. The actual execution is done by the
C<runops_standard> function in F<run.c>; more specifically, it's done by
these three innocent looking lines:

=end original

Now we're finally ready to go: we have compiled Perl byte code, and all
that's left to do is run it. The actual execution is done by the
C<runops_standard> function in F<run.c>; more specifically, it's done by
these three innocent looking lines:
(TBT)

    while ((PL_op = CALL_FPTR(PL_op->op_ppaddr)(aTHX))) {
        PERL_ASYNC_CHECK();
    }

=begin original

You may be more comfortable with the Perl version of that:

=end original

You may be more comfortable with the Perl version of that:
(TBT)

    PERL_ASYNC_CHECK() while $Perl::op = &{$Perl::op->{function}};

=begin original

Well, maybe not. Anyway, each op contains a function pointer, which
stipulates the function which will actually carry out the operation.
This function will return the next op in the sequence - this allows for
things like C<if> which choose the next op dynamically at run time.
The C<PERL_ASYNC_CHECK> makes sure that things like signals interrupt
execution if required.

=end original

Well, maybe not. Anyway, each op contains a function pointer, which
stipulates the function which will actually carry out the operation.
This function will return the next op in the sequence - this allows for
things like C<if> which choose the next op dynamically at run time.
The C<PERL_ASYNC_CHECK> makes sure that things like signals interrupt
execution if required.
(TBT)

=begin original

The actual functions called are known as PP code, and they're spread
between four files: F<pp_hot.c> contains the "hot" code, which is most
often used and highly optimized, F<pp_sys.c> contains all the
system-specific functions, F<pp_ctl.c> contains the functions which
implement control structures (C<if>, C<while> and the like) and F<pp.c>
contains everything else. These are, if you like, the C code for Perl's
built-in functions and operators.

=end original

The actual functions called are known as PP code, and they're spread
between four files: F<pp_hot.c> contains the "hot" code, which is most
often used and highly optimized, F<pp_sys.c> contains all the
system-specific functions, F<pp_ctl.c> contains the functions which
implement control structures (C<if>, C<while> and the like) and F<pp.c>
contains everything else. These are, if you like, the C code for Perl's
built-in functions and operators.
(TBT)

=begin original

Note that each C<pp_> function is expected to return a pointer to the next
op. Calls to perl subs (and eval blocks) are handled within the same
runops loop, and do not consume extra space on the C stack. For example,
C<pp_entersub> and C<pp_entertry> just push a C<CxSUB> or C<CxEVAL> block
struct onto the context stack which contain the address of the op
following the sub call or eval. They then return the first op of that sub
or eval block, and so execution continues of that sub or block.  Later, a
C<pp_leavesub> or C<pp_leavetry> op pops the C<CxSUB> or C<CxEVAL>,
retrieves the return op from it, and returns it.

=end original

Note that each C<pp_> function is expected to return a pointer to the next
op. Calls to perl subs (and eval blocks) are handled within the same
runops loop, and do not consume extra space on the C stack. For example,
C<pp_entersub> and C<pp_entertry> just push a C<CxSUB> or C<CxEVAL> block
struct onto the context stack which contain the address of the op
following the sub call or eval. They then return the first op of that sub
or eval block, and so execution continues of that sub or block.  Later, a
C<pp_leavesub> or C<pp_leavetry> op pops the C<CxSUB> or C<CxEVAL>,
retrieves the return op from it, and returns it.
(TBT)

=item Exception handing

=begin original

Perl's exception handing (i.e. C<die> etc.) is built on top of the low-level
C<setjmp()>/C<longjmp()> C-library functions. These basically provide a
way to capture the current PC and SP registers and later restore them; i.e.
a C<longjmp()> continues at the point in code where a previous C<setjmp()>
was done, with anything further up on the C stack being lost. This is why
code should always save values using C<SAVE_FOO> rather than in auto
variables.

=end original

Perl's exception handing (i.e. C<die> etc.) is built on top of the low-level
C<setjmp()>/C<longjmp()> C-library functions. These basically provide a
way to capture the current PC and SP registers and later restore them; i.e.
a C<longjmp()> continues at the point in code where a previous C<setjmp()>
was done, with anything further up on the C stack being lost. This is why
code should always save values using C<SAVE_FOO> rather than in auto
variables.
(TBT)

=begin original

The perl core wraps C<setjmp()> etc in the macros C<JMPENV_PUSH> and
C<JMPENV_JUMP>. The basic rule of perl exceptions is that C<exit>, and
C<die> (in the absence of C<eval>) perform a C<JMPENV_JUMP(2)>, while
C<die> within C<eval> does a C<JMPENV_JUMP(3)>.

=end original

The perl core wraps C<setjmp()> etc in the macros C<JMPENV_PUSH> and
C<JMPENV_JUMP>. The basic rule of perl exceptions is that C<exit>, and
C<die> (in the absence of C<eval>) perform a C<JMPENV_JUMP(2)>, while
C<die> within C<eval> does a C<JMPENV_JUMP(3)>.
(TBT)

=begin original

At entry points to perl, such as C<perl_parse()>, C<perl_run()> and
C<call_sv(cv, G_EVAL)> each does a C<JMPENV_PUSH>, then enter a runops
loop or whatever, and handle possible exception returns. For a 2 return,
final cleanup is performed, such as popping stacks and calling C<CHECK> or
C<END> blocks. Amongst other things, this is how scope cleanup still
occurs during an C<exit>.

=end original

At entry points to perl, such as C<perl_parse()>, C<perl_run()> and
C<call_sv(cv, G_EVAL)> each does a C<JMPENV_PUSH>, then enter a runops
loop or whatever, and handle possible exception returns. For a 2 return,
final cleanup is performed, such as popping stacks and calling C<CHECK> or
C<END> blocks. Amongst other things, this is how scope cleanup still
occurs during an C<exit>.
(TBT)

=begin original

If a C<die> can find a C<CxEVAL> block on the context stack, then the
stack is popped to that level and the return op in that block is assigned
to C<PL_restartop>; then a C<JMPENV_JUMP(3)> is performed.  This normally
passes control back to the guard. In the case of C<perl_run> and
C<call_sv>, a non-null C<PL_restartop> triggers re-entry to the runops
loop. The is the normal way that C<die> or C<croak> is handled within an
C<eval>.

=end original

If a C<die> can find a C<CxEVAL> block on the context stack, then the
stack is popped to that level and the return op in that block is assigned
to C<PL_restartop>; then a C<JMPENV_JUMP(3)> is performed.  This normally
passes control back to the guard. In the case of C<perl_run> and
C<call_sv>, a non-null C<PL_restartop> triggers re-entry to the runops
loop. The is the normal way that C<die> or C<croak> is handled within an
C<eval>.
(TBT)

=begin original

Sometimes ops are executed within an inner runops loop, such as tie, sort
or overload code. In this case, something like

=end original

Sometimes ops are executed within an inner runops loop, such as tie, sort
or overload code. In this case, something like
(TBT)

    sub FETCH { eval { die } }

=begin original

would cause a longjmp right back to the guard in C<perl_run>, popping both
runops loops, which is clearly incorrect. One way to avoid this is for the
tie code to do a C<JMPENV_PUSH> before executing C<FETCH> in the inner
runops loop, but for efficiency reasons, perl in fact just sets a flag,
using C<CATCH_SET(TRUE)>. The C<pp_require>, C<pp_entereval> and
C<pp_entertry> ops check this flag, and if true, they call C<docatch>,
which does a C<JMPENV_PUSH> and starts a new runops level to execute the
code, rather than doing it on the current loop.

=end original

would cause a longjmp right back to the guard in C<perl_run>, popping both
runops loops, which is clearly incorrect. One way to avoid this is for the
tie code to do a C<JMPENV_PUSH> before executing C<FETCH> in the inner
runops loop, but for efficiency reasons, perl in fact just sets a flag,
using C<CATCH_SET(TRUE)>. The C<pp_require>, C<pp_entereval> and
C<pp_entertry> ops check this flag, and if true, they call C<docatch>,
which does a C<JMPENV_PUSH> and starts a new runops level to execute the
code, rather than doing it on the current loop.
(TBT)

=begin original

As a further optimisation, on exit from the eval block in the C<FETCH>,
execution of the code following the block is still carried on in the inner
loop.  When an exception is raised, C<docatch> compares the C<JMPENV>
level of the C<CxEVAL> with C<PL_top_env> and if they differ, just
re-throws the exception. In this way any inner loops get popped.

=end original

As a further optimisation, on exit from the eval block in the C<FETCH>,
execution of the code following the block is still carried on in the inner
loop.  When an exception is raised, C<docatch> compares the C<JMPENV>
level of the C<CxEVAL> with C<PL_top_env> and if they differ, just
re-throws the exception. In this way any inner loops get popped.
(TBT)

=begin original

Here's an example.

=end original

Here's an example.
(TBT)

    1: eval { tie @a, 'A' };
    2: sub A::TIEARRAY {
    3:     eval { die };
    4:     die;
    5: }

=begin original

To run this code, C<perl_run> is called, which does a C<JMPENV_PUSH> then
enters a runops loop. This loop executes the eval and tie ops on line 1,
with the eval pushing a C<CxEVAL> onto the context stack.

=end original

To run this code, C<perl_run> is called, which does a C<JMPENV_PUSH> then
enters a runops loop. This loop executes the eval and tie ops on line 1,
with the eval pushing a C<CxEVAL> onto the context stack.
(TBT)

=begin original

The C<pp_tie> does a C<CATCH_SET(TRUE)>, then starts a second runops loop
to execute the body of C<TIEARRAY>. When it executes the entertry op on
line 3, C<CATCH_GET> is true, so C<pp_entertry> calls C<docatch> which
does a C<JMPENV_PUSH> and starts a third runops loop, which then executes
the die op. At this point the C call stack looks like this:

=end original

The C<pp_tie> does a C<CATCH_SET(TRUE)>, then starts a second runops loop
to execute the body of C<TIEARRAY>. When it executes the entertry op on
line 3, C<CATCH_GET> is true, so C<pp_entertry> calls C<docatch> which
does a C<JMPENV_PUSH> and starts a third runops loop, which then executes
the die op. At this point the C call stack looks like this:
(TBT)

    Perl_pp_die
    Perl_runops      # third loop
    S_docatch_body
    S_docatch
    Perl_pp_entertry
    Perl_runops      # second loop
    S_call_body
    Perl_call_sv
    Perl_pp_tie
    Perl_runops      # first loop
    S_run_body
    perl_run
    main

=begin original

and the context and data stacks, as shown by C<-Dstv>, look like:

=end original

and the context and data stacks, as shown by C<-Dstv>, look like:
(TBT)

    STACK 0: MAIN
      CX 0: BLOCK  =>
      CX 1: EVAL   => AV()  PV("A"\0)
      retop=leave
    STACK 1: MAGIC
      CX 0: SUB    =>
      retop=(null)
      CX 1: EVAL   => *
    retop=nextstate

=begin original

The die pops the first C<CxEVAL> off the context stack, sets
C<PL_restartop> from it, does a C<JMPENV_JUMP(3)>, and control returns to
the top C<docatch>. This then starts another third-level runops level,
which executes the nextstate, pushmark and die ops on line 4. At the point
that the second C<pp_die> is called, the C call stack looks exactly like
that above, even though we are no longer within an inner eval; this is
because of the optimization mentioned earlier. However, the context stack
now looks like this, ie with the top CxEVAL popped:

=end original

The die pops the first C<CxEVAL> off the context stack, sets
C<PL_restartop> from it, does a C<JMPENV_JUMP(3)>, and control returns to
the top C<docatch>. This then starts another third-level runops level,
which executes the nextstate, pushmark and die ops on line 4. At the point
that the second C<pp_die> is called, the C call stack looks exactly like
that above, even though we are no longer within an inner eval; this is
because of the optimization mentioned earlier. However, the context stack
now looks like this, ie with the top CxEVAL popped:
(TBT)

    STACK 0: MAIN
      CX 0: BLOCK  =>
      CX 1: EVAL   => AV()  PV("A"\0)
      retop=leave
    STACK 1: MAGIC
      CX 0: SUB    =>
      retop=(null)

=begin original

The die on line 4 pops the context stack back down to the CxEVAL, leaving
it as:

=end original

The die on line 4 pops the context stack back down to the CxEVAL, leaving
it as:
(TBT)

    STACK 0: MAIN
      CX 0: BLOCK  =>

=begin original

As usual, C<PL_restartop> is extracted from the C<CxEVAL>, and a
C<JMPENV_JUMP(3)> done, which pops the C stack back to the docatch:

=end original

As usual, C<PL_restartop> is extracted from the C<CxEVAL>, and a
C<JMPENV_JUMP(3)> done, which pops the C stack back to the docatch:
(TBT)

    S_docatch
    Perl_pp_entertry
    Perl_runops      # second loop
    S_call_body
    Perl_call_sv
    Perl_pp_tie
    Perl_runops      # first loop
    S_run_body
    perl_run
    main

=begin original

In  this case, because the C<JMPENV> level recorded in the C<CxEVAL>
differs from the current one, C<docatch> just does a C<JMPENV_JUMP(3)>
and the C stack unwinds to:

=end original

In  this case, because the C<JMPENV> level recorded in the C<CxEVAL>
differs from the current one, C<docatch> just does a C<JMPENV_JUMP(3)>
and the C stack unwinds to:
(TBT)

    perl_run
    main

=begin original

Because C<PL_restartop> is non-null, C<run_body> starts a new runops loop
and execution continues.

=end original

Because C<PL_restartop> is non-null, C<run_body> starts a new runops loop
and execution continues.
(TBT)

=back

=head2 Internal Variable Types

(内部変数型)

=begin original

You should by now have had a look at L<perlguts>, which tells you about
Perl's internal variable types: SVs, HVs, AVs and the rest. If not, do
that now.

=end original

You should by now have had a look at L<perlguts>, which tells you about
Perl's internal variable types: SVs, HVs, AVs and the rest. If not, do
that now.
(TBT)

=begin original

These variables are used not only to represent Perl-space variables, but
also any constants in the code, as well as some structures completely
internal to Perl. The symbol table, for instance, is an ordinary Perl
hash. Your code is represented by an SV as it's read into the parser;
any program files you call are opened via ordinary Perl filehandles, and
so on.

=end original

These variables are used not only to represent Perl-space variables, but
also any constants in the code, as well as some structures completely
internal to Perl. The symbol table, for instance, is an ordinary Perl
hash. Your code is represented by an SV as it's read into the parser;
any program files you call are opened via ordinary Perl filehandles, and
so on.
(TBT)

=begin original

The core L<Devel::Peek|Devel::Peek> module lets us examine SVs from a
Perl program. Let's see, for instance, how Perl treats the constant
C<"hello">.

=end original

The core L<Devel::Peek|Devel::Peek> module lets us examine SVs from a
Perl program. Let's see, for instance, how Perl treats the constant
C<"hello">.
(TBT)

      % perl -MDevel::Peek -e 'Dump("hello")'
    1 SV = PV(0xa041450) at 0xa04ecbc
    2   REFCNT = 1
    3   FLAGS = (POK,READONLY,pPOK)
    4   PV = 0xa0484e0 "hello"\0
    5   CUR = 5
    6   LEN = 6

=begin original

Reading C<Devel::Peek> output takes a bit of practise, so let's go
through it line by line.

=end original

Reading C<Devel::Peek> output takes a bit of practise, so let's go
through it line by line.
(TBT)

=begin original

Line 1 tells us we're looking at an SV which lives at C<0xa04ecbc> in
memory. SVs themselves are very simple structures, but they contain a
pointer to a more complex structure. In this case, it's a PV, a
structure which holds a string value, at location C<0xa041450>.  Line 2
is the reference count; there are no other references to this data, so
it's 1.

=end original

Line 1 tells us we're looking at an SV which lives at C<0xa04ecbc> in
memory. SVs themselves are very simple structures, but they contain a
pointer to a more complex structure. In this case, it's a PV, a
structure which holds a string value, at location C<0xa041450>.  Line 2
is the reference count; there are no other references to this data, so
it's 1.
(TBT)

=begin original

Line 3 are the flags for this SV - it's OK to use it as a PV, it's a
read-only SV (because it's a constant) and the data is a PV internally.
Next we've got the contents of the string, starting at location
C<0xa0484e0>.

=end original

Line 3 are the flags for this SV - it's OK to use it as a PV, it's a
read-only SV (because it's a constant) and the data is a PV internally.
Next we've got the contents of the string, starting at location
C<0xa0484e0>.
(TBT)

=begin original

Line 5 gives us the current length of the string - note that this does
B<not> include the null terminator. Line 6 is not the length of the
string, but the length of the currently allocated buffer; as the string
grows, Perl automatically extends the available storage via a routine
called C<SvGROW>.

=end original

Line 5 gives us the current length of the string - note that this does
B<not> include the null terminator. Line 6 is not the length of the
string, but the length of the currently allocated buffer; as the string
grows, Perl automatically extends the available storage via a routine
called C<SvGROW>.
(TBT)

=begin original

You can get at any of these quantities from C very easily; just add
C<Sv> to the name of the field shown in the snippet, and you've got a
macro which will return the value: C<SvCUR(sv)> returns the current
length of the string, C<SvREFCOUNT(sv)> returns the reference count,
C<SvPV(sv, len)> returns the string itself with its length, and so on.
More macros to manipulate these properties can be found in L<perlguts>.

=end original

You can get at any of these quantities from C very easily; just add
C<Sv> to the name of the field shown in the snippet, and you've got a
macro which will return the value: C<SvCUR(sv)> returns the current
length of the string, C<SvREFCOUNT(sv)> returns the reference count,
C<SvPV(sv, len)> returns the string itself with its length, and so on.
More macros to manipulate these properties can be found in L<perlguts>.
(TBT)

=begin original

Let's take an example of manipulating a PV, from C<sv_catpvn>, in F<sv.c>

=end original

Let's take an example of manipulating a PV, from C<sv_catpvn>, in F<sv.c>
(TBT)

     1  void
     2  Perl_sv_catpvn(pTHX_ register SV *sv, register const char *ptr, register STRLEN len)
     3  {
     4      STRLEN tlen;
     5      char *junk;

     6      junk = SvPV_force(sv, tlen);
     7      SvGROW(sv, tlen + len + 1);
     8      if (ptr == junk)
     9          ptr = SvPVX(sv);
    10      Move(ptr,SvPVX(sv)+tlen,len,char);
    11      SvCUR(sv) += len;
    12      *SvEND(sv) = '\0';
    13      (void)SvPOK_only_UTF8(sv);          /* validate pointer */
    14      SvTAINT(sv);
    15  }

=begin original

This is a function which adds a string, C<ptr>, of length C<len> onto
the end of the PV stored in C<sv>. The first thing we do in line 6 is
make sure that the SV B<has> a valid PV, by calling the C<SvPV_force>
macro to force a PV. As a side effect, C<tlen> gets set to the current
value of the PV, and the PV itself is returned to C<junk>.

=end original

This is a function which adds a string, C<ptr>, of length C<len> onto
the end of the PV stored in C<sv>. The first thing we do in line 6 is
make sure that the SV B<has> a valid PV, by calling the C<SvPV_force>
macro to force a PV. As a side effect, C<tlen> gets set to the current
value of the PV, and the PV itself is returned to C<junk>.
(TBT)

=begin original

In line 7, we make sure that the SV will have enough room to accommodate
the old string, the new string and the null terminator. If C<LEN> isn't
big enough, C<SvGROW> will reallocate space for us.

=end original

In line 7, we make sure that the SV will have enough room to accommodate
the old string, the new string and the null terminator. If C<LEN> isn't
big enough, C<SvGROW> will reallocate space for us.
(TBT)

=begin original

Now, if C<junk> is the same as the string we're trying to add, we can
grab the string directly from the SV; C<SvPVX> is the address of the PV
in the SV.

=end original

Now, if C<junk> is the same as the string we're trying to add, we can
grab the string directly from the SV; C<SvPVX> is the address of the PV
in the SV.
(TBT)

=begin original

Line 10 does the actual catenation: the C<Move> macro moves a chunk of
memory around: we move the string C<ptr> to the end of the PV - that's
the start of the PV plus its current length. We're moving C<len> bytes
of type C<char>. After doing so, we need to tell Perl we've extended the
string, by altering C<CUR> to reflect the new length. C<SvEND> is a
macro which gives us the end of the string, so that needs to be a
C<"\0">.

=end original

Line 10 does the actual catenation: the C<Move> macro moves a chunk of
memory around: we move the string C<ptr> to the end of the PV - that's
the start of the PV plus its current length. We're moving C<len> bytes
of type C<char>. After doing so, we need to tell Perl we've extended the
string, by altering C<CUR> to reflect the new length. C<SvEND> is a
macro which gives us the end of the string, so that needs to be a
C<"\0">.
(TBT)

=begin original

Line 13 manipulates the flags; since we've changed the PV, any IV or NV
values will no longer be valid: if we have C<$a=10; $a.="6";> we don't
want to use the old IV of 10. C<SvPOK_only_utf8> is a special UTF-8-aware
version of C<SvPOK_only>, a macro which turns off the IOK and NOK flags
and turns on POK. The final C<SvTAINT> is a macro which launders tainted
data if taint mode is turned on.

=end original

Line 13 manipulates the flags; since we've changed the PV, any IV or NV
values will no longer be valid: if we have C<$a=10; $a.="6";> we don't
want to use the old IV of 10. C<SvPOK_only_utf8> is a special UTF-8-aware
version of C<SvPOK_only>, a macro which turns off the IOK and NOK flags
and turns on POK. The final C<SvTAINT> is a macro which launders tainted
data if taint mode is turned on.
(TBT)

=begin original

AVs and HVs are more complicated, but SVs are by far the most common
variable type being thrown around. Having seen something of how we
manipulate these, let's go on and look at how the op tree is
constructed.

=end original

AVs and HVs are more complicated, but SVs are by far the most common
variable type being thrown around. Having seen something of how we
manipulate these, let's go on and look at how the op tree is
constructed.
(TBT)

=head2 Op Trees

(op 木)

=begin original

First, what is the op tree, anyway? The op tree is the parsed
representation of your program, as we saw in our section on parsing, and
it's the sequence of operations that Perl goes through to execute your
program, as we saw in L</Running>.

=end original

First, what is the op tree, anyway? The op tree is the parsed
representation of your program, as we saw in our section on parsing, and
it's the sequence of operations that Perl goes through to execute your
program, as we saw in L</Running>.
(TBT)

=begin original

An op is a fundamental operation that Perl can perform: all the built-in
functions and operators are ops, and there are a series of ops which
deal with concepts the interpreter needs internally - entering and
leaving a block, ending a statement, fetching a variable, and so on.

=end original

An op is a fundamental operation that Perl can perform: all the built-in
functions and operators are ops, and there are a series of ops which
deal with concepts the interpreter needs internally - entering and
leaving a block, ending a statement, fetching a variable, and so on.
(TBT)

=begin original

The op tree is connected in two ways: you can imagine that there are two
"routes" through it, two orders in which you can traverse the tree.
First, parse order reflects how the parser understood the code, and
secondly, execution order tells perl what order to perform the
operations in.

=end original

The op tree is connected in two ways: you can imagine that there are two
"routes" through it, two orders in which you can traverse the tree.
First, parse order reflects how the parser understood the code, and
secondly, execution order tells perl what order to perform the
operations in.
(TBT)

=begin original

The easiest way to examine the op tree is to stop Perl after it has
finished parsing, and get it to dump out the tree. This is exactly what
the compiler backends L<B::Terse|B::Terse>, L<B::Concise|B::Concise>
and L<B::Debug|B::Debug> do.

=end original

The easiest way to examine the op tree is to stop Perl after it has
finished parsing, and get it to dump out the tree. This is exactly what
the compiler backends L<B::Terse|B::Terse>, L<B::Concise|B::Concise>
and L<B::Debug|B::Debug> do.
(TBT)

=begin original

Let's have a look at how Perl sees C<$a = $b + $c>:

=end original

Let's have a look at how Perl sees C<$a = $b + $c>:
(TBT)

     % perl -MO=Terse -e '$a=$b+$c'
     1  LISTOP (0x8179888) leave
     2      OP (0x81798b0) enter
     3      COP (0x8179850) nextstate
     4      BINOP (0x8179828) sassign
     5          BINOP (0x8179800) add [1]
     6              UNOP (0x81796e0) null [15]
     7                  SVOP (0x80fafe0) gvsv  GV (0x80fa4cc) *b
     8              UNOP (0x81797e0) null [15]
     9                  SVOP (0x8179700) gvsv  GV (0x80efeb0) *c
    10          UNOP (0x816b4f0) null [15]
    11              SVOP (0x816dcf0) gvsv  GV (0x80fa460) *a

=begin original

Let's start in the middle, at line 4. This is a BINOP, a binary
operator, which is at location C<0x8179828>. The specific operator in
question is C<sassign> - scalar assignment - and you can find the code
which implements it in the function C<pp_sassign> in F<pp_hot.c>. As a
binary operator, it has two children: the add operator, providing the
result of C<$b+$c>, is uppermost on line 5, and the left hand side is on
line 10.

=end original

Let's start in the middle, at line 4. This is a BINOP, a binary
operator, which is at location C<0x8179828>. The specific operator in
question is C<sassign> - scalar assignment - and you can find the code
which implements it in the function C<pp_sassign> in F<pp_hot.c>. As a
binary operator, it has two children: the add operator, providing the
result of C<$b+$c>, is uppermost on line 5, and the left hand side is on
line 10.
(TBT)

=begin original

Line 10 is the null op: this does exactly nothing. What is that doing
there? If you see the null op, it's a sign that something has been
optimized away after parsing. As we mentioned in L</Optimization>,
the optimization stage sometimes converts two operations into one, for
example when fetching a scalar variable. When this happens, instead of
rewriting the op tree and cleaning up the dangling pointers, it's easier
just to replace the redundant operation with the null op. Originally,
the tree would have looked like this:

=end original

Line 10 is the null op: this does exactly nothing. What is that doing
there? If you see the null op, it's a sign that something has been
optimized away after parsing. As we mentioned in L</Optimization>,
the optimization stage sometimes converts two operations into one, for
example when fetching a scalar variable. When this happens, instead of
rewriting the op tree and cleaning up the dangling pointers, it's easier
just to replace the redundant operation with the null op. Originally,
the tree would have looked like this:
(TBT)

    10          SVOP (0x816b4f0) rv2sv [15]
    11              SVOP (0x816dcf0) gv  GV (0x80fa460) *a

=begin original

That is, fetch the C<a> entry from the main symbol table, and then look
at the scalar component of it: C<gvsv> (C<pp_gvsv> into F<pp_hot.c>)
happens to do both these things.

=end original

That is, fetch the C<a> entry from the main symbol table, and then look
at the scalar component of it: C<gvsv> (C<pp_gvsv> into F<pp_hot.c>)
happens to do both these things.
(TBT)

=begin original

The right hand side, starting at line 5 is similar to what we've just
seen: we have the C<add> op (C<pp_add> also in F<pp_hot.c>) add together
two C<gvsv>s.

=end original

The right hand side, starting at line 5 is similar to what we've just
seen: we have the C<add> op (C<pp_add> also in F<pp_hot.c>) add together
two C<gvsv>s.
(TBT)

=begin original

Now, what's this about?

=end original

Now, what's this about?
(TBT)

     1  LISTOP (0x8179888) leave
     2      OP (0x81798b0) enter
     3      COP (0x8179850) nextstate

=begin original

C<enter> and C<leave> are scoping ops, and their job is to perform any
housekeeping every time you enter and leave a block: lexical variables
are tidied up, unreferenced variables are destroyed, and so on. Every
program will have those first three lines: C<leave> is a list, and its
children are all the statements in the block. Statements are delimited
by C<nextstate>, so a block is a collection of C<nextstate> ops, with
the ops to be performed for each statement being the children of
C<nextstate>. C<enter> is a single op which functions as a marker.

=end original

C<enter> and C<leave> are scoping ops, and their job is to perform any
housekeeping every time you enter and leave a block: lexical variables
are tidied up, unreferenced variables are destroyed, and so on. Every
program will have those first three lines: C<leave> is a list, and its
children are all the statements in the block. Statements are delimited
by C<nextstate>, so a block is a collection of C<nextstate> ops, with
the ops to be performed for each statement being the children of
C<nextstate>. C<enter> is a single op which functions as a marker.
(TBT)

=begin original

That's how Perl parsed the program, from top to bottom:

=end original

That's how Perl parsed the program, from top to bottom:
(TBT)

                        Program
                           |
                       Statement
                           |
                           =
                          / \
                         /   \
                        $a   +
                            / \
                          $b   $c

=begin original

However, it's impossible to B<perform> the operations in this order:
you have to find the values of C<$b> and C<$c> before you add them
together, for instance. So, the other thread that runs through the op
tree is the execution order: each op has a field C<op_next> which points
to the next op to be run, so following these pointers tells us how perl
executes the code. We can traverse the tree in this order using
the C<exec> option to C<B::Terse>:

=end original

However, it's impossible to B<perform> the operations in this order:
you have to find the values of C<$b> and C<$c> before you add them
together, for instance. So, the other thread that runs through the op
tree is the execution order: each op has a field C<op_next> which points
to the next op to be run, so following these pointers tells us how perl
executes the code. We can traverse the tree in this order using
the C<exec> option to C<B::Terse>:
(TBT)

     % perl -MO=Terse,exec -e '$a=$b+$c'
     1  OP (0x8179928) enter
     2  COP (0x81798c8) nextstate
     3  SVOP (0x81796c8) gvsv  GV (0x80fa4d4) *b
     4  SVOP (0x8179798) gvsv  GV (0x80efeb0) *c
     5  BINOP (0x8179878) add [1]
     6  SVOP (0x816dd38) gvsv  GV (0x80fa468) *a
     7  BINOP (0x81798a0) sassign
     8  LISTOP (0x8179900) leave

=begin original

This probably makes more sense for a human: enter a block, start a
statement. Get the values of C<$b> and C<$c>, and add them together.
Find C<$a>, and assign one to the other. Then leave.

=end original

This probably makes more sense for a human: enter a block, start a
statement. Get the values of C<$b> and C<$c>, and add them together.
Find C<$a>, and assign one to the other. Then leave.
(TBT)

=begin original

The way Perl builds up these op trees in the parsing process can be
unravelled by examining F<perly.y>, the YACC grammar. Let's take the
piece we need to construct the tree for C<$a = $b + $c>

=end original

The way Perl builds up these op trees in the parsing process can be
unravelled by examining F<perly.y>, the YACC grammar. Let's take the
piece we need to construct the tree for C<$a = $b + $c>
(TBT)

    1 term    :   term ASSIGNOP term
    2                { $$ = newASSIGNOP(OPf_STACKED, $1, $2, $3); }
    3         |   term ADDOP term
    4                { $$ = newBINOP($2, 0, scalar($1), scalar($3)); }

=begin original

If you're not used to reading BNF grammars, this is how it works: You're
fed certain things by the tokeniser, which generally end up in upper
case. Here, C<ADDOP>, is provided when the tokeniser sees C<+> in your
code. C<ASSIGNOP> is provided when C<=> is used for assigning. These are
"terminal symbols", because you can't get any simpler than them.

=end original

If you're not used to reading BNF grammars, this is how it works: You're
fed certain things by the tokeniser, which generally end up in upper
case. Here, C<ADDOP>, is provided when the tokeniser sees C<+> in your
code. C<ASSIGNOP> is provided when C<=> is used for assigning. These are
"terminal symbols", because you can't get any simpler than them.
(TBT)

=begin original

The grammar, lines one and three of the snippet above, tells you how to
build up more complex forms. These complex forms, "non-terminal symbols"
are generally placed in lower case. C<term> here is a non-terminal
symbol, representing a single expression.

=end original

The grammar, lines one and three of the snippet above, tells you how to
build up more complex forms. These complex forms, "non-terminal symbols"
are generally placed in lower case. C<term> here is a non-terminal
symbol, representing a single expression.
(TBT)

=begin original

The grammar gives you the following rule: you can make the thing on the
left of the colon if you see all the things on the right in sequence.
This is called a "reduction", and the aim of parsing is to completely
reduce the input. There are several different ways you can perform a
reduction, separated by vertical bars: so, C<term> followed by C<=>
followed by C<term> makes a C<term>, and C<term> followed by C<+>
followed by C<term> can also make a C<term>.

=end original

The grammar gives you the following rule: you can make the thing on the
left of the colon if you see all the things on the right in sequence.
This is called a "reduction", and the aim of parsing is to completely
reduce the input. There are several different ways you can perform a
reduction, separated by vertical bars: so, C<term> followed by C<=>
followed by C<term> makes a C<term>, and C<term> followed by C<+>
followed by C<term> can also make a C<term>.
(TBT)

=begin original

So, if you see two terms with an C<=> or C<+>, between them, you can
turn them into a single expression. When you do this, you execute the
code in the block on the next line: if you see C<=>, you'll do the code
in line 2. If you see C<+>, you'll do the code in line 4. It's this code
which contributes to the op tree.

=end original

So, if you see two terms with an C<=> or C<+>, between them, you can
turn them into a single expression. When you do this, you execute the
code in the block on the next line: if you see C<=>, you'll do the code
in line 2. If you see C<+>, you'll do the code in line 4. It's this code
which contributes to the op tree.
(TBT)

            |   term ADDOP term
            { $$ = newBINOP($2, 0, scalar($1), scalar($3)); }

=begin original

What this does is creates a new binary op, and feeds it a number of
variables. The variables refer to the tokens: C<$1> is the first token in
the input, C<$2> the second, and so on - think regular expression
backreferences. C<$$> is the op returned from this reduction. So, we
call C<newBINOP> to create a new binary operator. The first parameter to
C<newBINOP>, a function in F<op.c>, is the op type. It's an addition
operator, so we want the type to be C<ADDOP>. We could specify this
directly, but it's right there as the second token in the input, so we
use C<$2>. The second parameter is the op's flags: 0 means "nothing
special". Then the things to add: the left and right hand side of our
expression, in scalar context.

=end original

What this does is creates a new binary op, and feeds it a number of
variables. The variables refer to the tokens: C<$1> is the first token in
the input, C<$2> the second, and so on - think regular expression
backreferences. C<$$> is the op returned from this reduction. So, we
call C<newBINOP> to create a new binary operator. The first parameter to
C<newBINOP>, a function in F<op.c>, is the op type. It's an addition
operator, so we want the type to be C<ADDOP>. We could specify this
directly, but it's right there as the second token in the input, so we
use C<$2>. The second parameter is the op's flags: 0 means "nothing
special". Then the things to add: the left and right hand side of our
expression, in scalar context.
(TBT)

=head2 Stacks

(スタック)

=begin original

When perl executes something like C<addop>, how does it pass on its
results to the next op? The answer is, through the use of stacks. Perl
has a number of stacks to store things it's currently working on, and
we'll look at the three most important ones here.

=end original

When perl executes something like C<addop>, how does it pass on its
results to the next op? The answer is, through the use of stacks. Perl
has a number of stacks to store things it's currently working on, and
we'll look at the three most important ones here.
(TBT)

=over 3

=item Argument stack

=begin original

Arguments are passed to PP code and returned from PP code using the
argument stack, C<ST>. The typical way to handle arguments is to pop
them off the stack, deal with them how you wish, and then push the result
back onto the stack. This is how, for instance, the cosine operator
works:

=end original

Arguments are passed to PP code and returned from PP code using the
argument stack, C<ST>. The typical way to handle arguments is to pop
them off the stack, deal with them how you wish, and then push the result
back onto the stack. This is how, for instance, the cosine operator
works:
(TBT)

      NV value;
      value = POPn;
      value = Perl_cos(value);
      XPUSHn(value);

=begin original

We'll see a more tricky example of this when we consider Perl's macros
below. C<POPn> gives you the NV (floating point value) of the top SV on
the stack: the C<$x> in C<cos($x)>. Then we compute the cosine, and push
the result back as an NV. The C<X> in C<XPUSHn> means that the stack
should be extended if necessary - it can't be necessary here, because we
know there's room for one more item on the stack, since we've just
removed one! The C<XPUSH*> macros at least guarantee safety.

=end original

We'll see a more tricky example of this when we consider Perl's macros
below. C<POPn> gives you the NV (floating point value) of the top SV on
the stack: the C<$x> in C<cos($x)>. Then we compute the cosine, and push
the result back as an NV. The C<X> in C<XPUSHn> means that the stack
should be extended if necessary - it can't be necessary here, because we
know there's room for one more item on the stack, since we've just
removed one! The C<XPUSH*> macros at least guarantee safety.
(TBT)

=begin original

Alternatively, you can fiddle with the stack directly: C<SP> gives you
the first element in your portion of the stack, and C<TOP*> gives you
the top SV/IV/NV/etc. on the stack. So, for instance, to do unary
negation of an integer:

=end original

Alternatively, you can fiddle with the stack directly: C<SP> gives you
the first element in your portion of the stack, and C<TOP*> gives you
the top SV/IV/NV/etc. on the stack. So, for instance, to do unary
negation of an integer:
(TBT)

     SETi(-TOPi);

=begin original

Just set the integer value of the top stack entry to its negation.

=end original

Just set the integer value of the top stack entry to its negation.
(TBT)

=begin original

Argument stack manipulation in the core is exactly the same as it is in
XSUBs - see L<perlxstut>, L<perlxs> and L<perlguts> for a longer
description of the macros used in stack manipulation.

=end original

Argument stack manipulation in the core is exactly the same as it is in
XSUBs - see L<perlxstut>, L<perlxs> and L<perlguts> for a longer
description of the macros used in stack manipulation.
(TBT)

=item Mark stack

=begin original

I say "your portion of the stack" above because PP code doesn't
necessarily get the whole stack to itself: if your function calls
another function, you'll only want to expose the arguments aimed for the
called function, and not (necessarily) let it get at your own data. The
way we do this is to have a "virtual" bottom-of-stack, exposed to each
function. The mark stack keeps bookmarks to locations in the argument
stack usable by each function. For instance, when dealing with a tied
variable, (internally, something with "P" magic) Perl has to call
methods for accesses to the tied variables. However, we need to separate
the arguments exposed to the method to the argument exposed to the
original function - the store or fetch or whatever it may be. Here's
roughly how the tied C<push> is implemented; see C<av_push> in F<av.c>:

=end original

I say "your portion of the stack" above because PP code doesn't
necessarily get the whole stack to itself: if your function calls
another function, you'll only want to expose the arguments aimed for the
called function, and not (necessarily) let it get at your own data. The
way we do this is to have a "virtual" bottom-of-stack, exposed to each
function. The mark stack keeps bookmarks to locations in the argument
stack usable by each function. For instance, when dealing with a tied
variable, (internally, something with "P" magic) Perl has to call
methods for accesses to the tied variables. However, we need to separate
the arguments exposed to the method to the argument exposed to the
original function - the store or fetch or whatever it may be. Here's
roughly how the tied C<push> is implemented; see C<av_push> in F<av.c>:
(TBT)

     1	PUSHMARK(SP);
     2	EXTEND(SP,2);
     3	PUSHs(SvTIED_obj((SV*)av, mg));
     4	PUSHs(val);
     5	PUTBACK;
     6	ENTER;
     7	call_method("PUSH", G_SCALAR|G_DISCARD);
     8	LEAVE;

=begin original

Let's examine the whole implementation, for practice:

=end original

Let's examine the whole implementation, for practice:
(TBT)

     1	PUSHMARK(SP);

=begin original

Push the current state of the stack pointer onto the mark stack. This is
so that when we've finished adding items to the argument stack, Perl
knows how many things we've added recently.

=end original

Push the current state of the stack pointer onto the mark stack. This is
so that when we've finished adding items to the argument stack, Perl
knows how many things we've added recently.
(TBT)

     2	EXTEND(SP,2);
     3	PUSHs(SvTIED_obj((SV*)av, mg));
     4	PUSHs(val);

=begin original

We're going to add two more items onto the argument stack: when you have
a tied array, the C<PUSH> subroutine receives the object and the value
to be pushed, and that's exactly what we have here - the tied object,
retrieved with C<SvTIED_obj>, and the value, the SV C<val>.

=end original

We're going to add two more items onto the argument stack: when you have
a tied array, the C<PUSH> subroutine receives the object and the value
to be pushed, and that's exactly what we have here - the tied object,
retrieved with C<SvTIED_obj>, and the value, the SV C<val>.
(TBT)

     5	PUTBACK;

=begin original

Next we tell Perl to update the global stack pointer from our internal
variable: C<dSP> only gave us a local copy, not a reference to the global.

=end original

Next we tell Perl to update the global stack pointer from our internal
variable: C<dSP> only gave us a local copy, not a reference to the global.
(TBT)

     6	ENTER;
     7	call_method("PUSH", G_SCALAR|G_DISCARD);
     8	LEAVE;

=begin original

C<ENTER> and C<LEAVE> localise a block of code - they make sure that all
variables are tidied up, everything that has been localised gets
its previous value returned, and so on. Think of them as the C<{> and
C<}> of a Perl block.

=end original

C<ENTER> and C<LEAVE> localise a block of code - they make sure that all
variables are tidied up, everything that has been localised gets
its previous value returned, and so on. Think of them as the C<{> and
C<}> of a Perl block.
(TBT)

=begin original

To actually do the magic method call, we have to call a subroutine in
Perl space: C<call_method> takes care of that, and it's described in
L<perlcall>. We call the C<PUSH> method in scalar context, and we're
going to discard its return value.  The call_method() function
removes the top element of the mark stack, so there is nothing for
the caller to clean up.

=end original

To actually do the magic method call, we have to call a subroutine in
Perl space: C<call_method> takes care of that, and it's described in
L<perlcall>. We call the C<PUSH> method in scalar context, and we're
going to discard its return value.  The call_method() function
removes the top element of the mark stack, so there is nothing for
the caller to clean up.
(TBT)

=item Save stack

=begin original

C doesn't have a concept of local scope, so perl provides one. We've
seen that C<ENTER> and C<LEAVE> are used as scoping braces; the save
stack implements the C equivalent of, for example:

=end original

C doesn't have a concept of local scope, so perl provides one. We've
seen that C<ENTER> and C<LEAVE> are used as scoping braces; the save
stack implements the C equivalent of, for example:
(TBT)

    {
        local $foo = 42;
        ...
    }

=begin original

See L<perlguts/Localising Changes> for how to use the save stack.

=end original

See L<perlguts/Localising Changes> for how to use the save stack.
(TBT)

=back

=head2 Millions of Macros

(大量のマクロ)

=begin original

One thing you'll notice about the Perl source is that it's full of
macros. Some have called the pervasive use of macros the hardest thing
to understand, others find it adds to clarity. Let's take an example,
the code which implements the addition operator:

=end original

One thing you'll notice about the Perl source is that it's full of
macros. Some have called the pervasive use of macros the hardest thing
to understand, others find it adds to clarity. Let's take an example,
the code which implements the addition operator:
(TBT)

   1  PP(pp_add)
   2  {
   3      dSP; dATARGET; tryAMAGICbin(add,opASSIGN);
   4      {
   5        dPOPTOPnnrl_ul;
   6        SETn( left + right );
   7        RETURN;
   8      }
   9  }

=begin original

Every line here (apart from the braces, of course) contains a macro. The
first line sets up the function declaration as Perl expects for PP code;
line 3 sets up variable declarations for the argument stack and the
target, the return value of the operation. Finally, it tries to see if
the addition operation is overloaded; if so, the appropriate subroutine
is called.

=end original

Every line here (apart from the braces, of course) contains a macro. The
first line sets up the function declaration as Perl expects for PP code;
line 3 sets up variable declarations for the argument stack and the
target, the return value of the operation. Finally, it tries to see if
the addition operation is overloaded; if so, the appropriate subroutine
is called.
(TBT)

=begin original

Line 5 is another variable declaration - all variable declarations start
with C<d> - which pops from the top of the argument stack two NVs (hence
C<nn>) and puts them into the variables C<right> and C<left>, hence the
C<rl>. These are the two operands to the addition operator. Next, we
call C<SETn> to set the NV of the return value to the result of adding
the two values. This done, we return - the C<RETURN> macro makes sure
that our return value is properly handled, and we pass the next operator
to run back to the main run loop.

=end original

Line 5 is another variable declaration - all variable declarations start
with C<d> - which pops from the top of the argument stack two NVs (hence
C<nn>) and puts them into the variables C<right> and C<left>, hence the
C<rl>. These are the two operands to the addition operator. Next, we
call C<SETn> to set the NV of the return value to the result of adding
the two values. This done, we return - the C<RETURN> macro makes sure
that our return value is properly handled, and we pass the next operator
to run back to the main run loop.
(TBT)

=begin original

Most of these macros are explained in L<perlapi>, and some of the more
important ones are explained in L<perlxs> as well. Pay special attention
to L<perlguts/Background and PERL_IMPLICIT_CONTEXT> for information on
the C<[pad]THX_?> macros.

=end original

Most of these macros are explained in L<perlapi>, and some of the more
important ones are explained in L<perlxs> as well. Pay special attention
to L<perlguts/Background and PERL_IMPLICIT_CONTEXT> for information on
the C<[pad]THX_?> macros.
(TBT)

=head2 The .i Targets

(.i ターゲット)

=begin original

You can expand the macros in a F<foo.c> file by saying

=end original

You can expand the macros in a F<foo.c> file by saying
(TBT)

    make foo.i

=begin original

which will expand the macros using cpp.  Don't be scared by the results.

=end original

which will expand the macros using cpp.  Don't be scared by the results.
(TBT)

=head1 SOURCE CODE STATIC ANALYSIS

(ソースコード静的解析)

=begin original

Various tools exist for analysing C source code B<statically>, as
opposed to B<dynamically>, that is, without executing the code.
It is possible to detect resource leaks, undefined behaviour, type
mismatches, portability problems, code paths that would cause illegal
memory accesses, and other similar problems by just parsing the C code
and looking at the resulting graph, what does it tell about the
execution and data flows.  As a matter of fact, this is exactly
how C compilers know to give warnings about dubious code.

=end original

Various tools exist for analysing C source code B<statically>, as
opposed to B<dynamically>, that is, without executing the code.
It is possible to detect resource leaks, undefined behaviour, type
mismatches, portability problems, code paths that would cause illegal
memory accesses, and other similar problems by just parsing the C code
and looking at the resulting graph, what does it tell about the
execution and data flows.  As a matter of fact, this is exactly
how C compilers know to give warnings about dubious code.
(TBT)

=head2 lint, splint

=begin original

The good old C code quality inspector, C<lint>, is available in
several platforms, but please be aware that there are several
different implementations of it by different vendors, which means that
the flags are not identical across different platforms.

=end original

The good old C code quality inspector, C<lint>, is available in
several platforms, but please be aware that there are several
different implementations of it by different vendors, which means that
the flags are not identical across different platforms.
(TBT)

=begin original

There is a lint variant called C<splint> (Secure Programming Lint)
available from http://www.splint.org/ that should compile on any
Unix-like platform.

=end original

There is a lint variant called C<splint> (Secure Programming Lint)
available from http://www.splint.org/ that should compile on any
Unix-like platform.
(TBT)

=begin original

There are C<lint> and <splint> targets in Makefile, but you may have
to diddle with the flags (see above).

=end original

There are C<lint> and <splint> targets in Makefile, but you may have
to diddle with the flags (see above).
(TBT)

=head2 Coverity

=begin original

Coverity (http://www.coverity.com/) is a product similar to lint and
as a testbed for their product they periodically check several open
source projects, and they give out accounts to open source developers
to the defect databases.

=end original

Coverity (http://www.coverity.com/) is a product similar to lint and
as a testbed for their product they periodically check several open
source projects, and they give out accounts to open source developers
to the defect databases.
(TBT)

=head2 cpd (cut-and-paste detector)

(cpd (コピペ検出器))

=begin original

The cpd tool detects cut-and-paste coding.  If one instance of the
cut-and-pasted code changes, all the other spots should probably be
changed, too.  Therefore such code should probably be turned into a
subroutine or a macro.

=end original

The cpd tool detects cut-and-paste coding.  If one instance of the
cut-and-pasted code changes, all the other spots should probably be
changed, too.  Therefore such code should probably be turned into a
subroutine or a macro.
(TBT)

=begin original

cpd (http://pmd.sourceforge.net/cpd.html) is part of the pmd project
(http://pmd.sourceforge.net/).  pmd was originally written for static
analysis of Java code, but later the cpd part of it was extended to
parse also C and C++.

=end original

cpd (http://pmd.sourceforge.net/cpd.html) is part of the pmd project
(http://pmd.sourceforge.net/).  pmd was originally written for static
analysis of Java code, but later the cpd part of it was extended to
parse also C and C++.
(TBT)

=begin original

Download the pmd-bin-X.Y.zip () from the SourceForge site, extract the
pmd-X.Y.jar from it, and then run that on source code thusly:

=end original

Download the pmd-bin-X.Y.zip () from the SourceForge site, extract the
pmd-X.Y.jar from it, and then run that on source code thusly:
(TBT)

  java -cp pmd-X.Y.jar net.sourceforge.pmd.cpd.CPD --minimum-tokens 100 --files /some/where/src --language c > cpd.txt

=begin original

You may run into memory limits, in which case you should use the -Xmx option:

=end original

You may run into memory limits, in which case you should use the -Xmx option:
(TBT)

  java -Xmx512M ...

=head2 gcc warnings

(gcc の警告)

=begin original

Though much can be written about the inconsistency and coverage
problems of gcc warnings (like C<-Wall> not meaning "all the
warnings", or some common portability problems not being covered by
C<-Wall>, or C<-ansi> and C<-pedantic> both being a poorly defined
collection of warnings, and so forth), gcc is still a useful tool in
keeping our coding nose clean.

=end original

Though much can be written about the inconsistency and coverage
problems of gcc warnings (like C<-Wall> not meaning "all the
warnings", or some common portability problems not being covered by
C<-Wall>, or C<-ansi> and C<-pedantic> both being a poorly defined
collection of warnings, and so forth), gcc is still a useful tool in
keeping our coding nose clean.
(TBT)

=begin original

The C<-Wall> is by default on.

=end original

The C<-Wall> is by default on.
(TBT)

=begin original

The C<-ansi> (and its sidekick, C<-pedantic>) would be nice to be on
always, but unfortunately they are not safe on all platforms, they can
for example cause fatal conflicts with the system headers (Solaris
being a prime example).  If Configure C<-Dgccansipedantic> is used,
the C<cflags> frontend selects C<-ansi -pedantic> for the platforms
where they are known to be safe.

=end original

The C<-ansi> (and its sidekick, C<-pedantic>) would be nice to be on
always, but unfortunately they are not safe on all platforms, they can
for example cause fatal conflicts with the system headers (Solaris
being a prime example).  If Configure C<-Dgccansipedantic> is used,
the C<cflags> frontend selects C<-ansi -pedantic> for the platforms
where they are known to be safe.
(TBT)

=begin original

Starting from Perl 5.9.4 the following extra flags are added:

=end original

Starting from Perl 5.9.4 the following extra flags are added:
(TBT)

=over 4

=item *

=begin original

C<-Wendif-labels>

=end original

C<-Wendif-labels>
(TBT)

=item *

=begin original

C<-Wextra>

=end original

C<-Wextra>
(TBT)

=item *

=begin original

C<-Wdeclaration-after-statement>

=end original

C<-Wdeclaration-after-statement>
(TBT)

=back

=begin original

The following flags would be nice to have but they would first need
their own Augean stablemaster:

=end original

The following flags would be nice to have but they would first need
their own Augean stablemaster:
(TBT)

=over 4

=item *

=begin original

C<-Wpointer-arith>

=end original

C<-Wpointer-arith>
(TBT)

=item *

=begin original

C<-Wshadow>

=end original

C<-Wshadow>
(TBT)

=item *

=begin original

C<-Wstrict-prototypes>

=end original

C<-Wstrict-prototypes>
(TBT)

=back

=begin original

The C<-Wtraditional> is another example of the annoying tendency of
gcc to bundle a lot of warnings under one switch -- it would be
impossible to deploy in practice because it would complain a lot -- but
it does contain some warnings that would be beneficial to have available
on their own, such as the warning about string constants inside macros
containing the macro arguments: this behaved differently pre-ANSI
than it does in ANSI, and some C compilers are still in transition,
AIX being an example.

=end original

The C<-Wtraditional> is another example of the annoying tendency of
gcc to bundle a lot of warnings under one switch -- it would be
impossible to deploy in practice because it would complain a lot -- but
it does contain some warnings that would be beneficial to have available
on their own, such as the warning about string constants inside macros
containing the macro arguments: this behaved differently pre-ANSI
than it does in ANSI, and some C compilers are still in transition,
AIX being an example.
(TBT)

=head2 Warnings of other C compilers

(その他の C コンパイラの警告)

=begin original

Other C compilers (yes, there B<are> other C compilers than gcc) often
have their "strict ANSI" or "strict ANSI with some portability extensions"
modes on, like for example the Sun Workshop has its C<-Xa> mode on
(though implicitly), or the DEC (these days, HP...) has its C<-std1>
mode on.

=end original

Other C compilers (yes, there B<are> other C compilers than gcc) often
have their "strict ANSI" or "strict ANSI with some portability extensions"
modes on, like for example the Sun Workshop has its C<-Xa> mode on
(though implicitly), or the DEC (these days, HP...) has its C<-std1>
mode on.
(TBT)

=head2 DEBUGGING

(デバッグ)

=begin original

You can compile a special debugging version of Perl, which allows you
to use the C<-D> option of Perl to tell more about what Perl is doing.
But sometimes there is no alternative than to dive in with a debugger,
either to see the stack trace of a core dump (very useful in a bug
report), or trying to figure out what went wrong before the core dump
happened, or how did we end up having wrong or unexpected results.

=end original

You can compile a special debugging version of Perl, which allows you
to use the C<-D> option of Perl to tell more about what Perl is doing.
But sometimes there is no alternative than to dive in with a debugger,
either to see the stack trace of a core dump (very useful in a bug
report), or trying to figure out what went wrong before the core dump
happened, or how did we end up having wrong or unexpected results.
(TBT)

=head2 Poking at Perl

(Perl をつつく)

=begin original

To really poke around with Perl, you'll probably want to build Perl for
debugging, like this:

=end original

To really poke around with Perl, you'll probably want to build Perl for
debugging, like this:
(TBT)

    ./Configure -d -D optimize=-g
    make

=begin original

C<-g> is a flag to the C compiler to have it produce debugging
information which will allow us to step through a running program,
and to see in which C function we are at (without the debugging
information we might see only the numerical addresses of the functions,
which is not very helpful).

=end original

C<-g> is a flag to the C compiler to have it produce debugging
information which will allow us to step through a running program,
and to see in which C function we are at (without the debugging
information we might see only the numerical addresses of the functions,
which is not very helpful).
(TBT)

=begin original

F<Configure> will also turn on the C<DEBUGGING> compilation symbol which
enables all the internal debugging code in Perl. There are a whole bunch
of things you can debug with this: L<perlrun> lists them all, and the
best way to find out about them is to play about with them. The most
useful options are probably

=end original

F<Configure> will also turn on the C<DEBUGGING> compilation symbol which
enables all the internal debugging code in Perl. There are a whole bunch
of things you can debug with this: L<perlrun> lists them all, and the
best way to find out about them is to play about with them. The most
useful options are probably
(TBT)

    l  Context (loop) stack processing
    t  Trace execution
    o  Method and overloading resolution
    c  String/numeric conversions

=begin original

Some of the functionality of the debugging code can be achieved using XS
modules.

=end original

Some of the functionality of the debugging code can be achieved using XS
modules.
(TBT)

    -Dr => use re 'debug'
    -Dx => use O 'Debug'

=head2 Using a source-level debugger

(ソースレベルデバッガを使う)

=begin original

If the debugging output of C<-D> doesn't help you, it's time to step
through perl's execution with a source-level debugger.

=end original

If the debugging output of C<-D> doesn't help you, it's time to step
through perl's execution with a source-level debugger.
(TBT)

=over 3

=item *

=begin original

We'll use C<gdb> for our examples here; the principles will apply to
any debugger (many vendors call their debugger C<dbx>), but check the
manual of the one you're using.

=end original

We'll use C<gdb> for our examples here; the principles will apply to
any debugger (many vendors call their debugger C<dbx>), but check the
manual of the one you're using.
(TBT)

=back

=begin original

To fire up the debugger, type

=end original

To fire up the debugger, type
(TBT)

    gdb ./perl

=begin original

Or if you have a core dump:

=end original

Or if you have a core dump:
(TBT)

    gdb ./perl core

=begin original

You'll want to do that in your Perl source tree so the debugger can read
the source code. You should see the copyright message, followed by the
prompt.

=end original

You'll want to do that in your Perl source tree so the debugger can read
the source code. You should see the copyright message, followed by the
prompt.
(TBT)

    (gdb)

=begin original

C<help> will get you into the documentation, but here are the most
useful commands:

=end original

C<help> will get you into the documentation, but here are the most
useful commands:
(TBT)

=over 3

=item run [args]

=begin original

Run the program with the given arguments.

=end original

Run the program with the given arguments.
(TBT)

=item break function_name

=item break source.c:xxx

=begin original

Tells the debugger that we'll want to pause execution when we reach
either the named function (but see L<perlguts/Internal Functions>!) or the given
line in the named source file.

=end original

Tells the debugger that we'll want to pause execution when we reach
either the named function (but see L<perlguts/Internal Functions>!) or the given
line in the named source file.
(TBT)

=item step

=begin original

Steps through the program a line at a time.

=end original

Steps through the program a line at a time.
(TBT)

=item next

=begin original

Steps through the program a line at a time, without descending into
functions.

=end original

Steps through the program a line at a time, without descending into
functions.
(TBT)

=item continue

=begin original

Run until the next breakpoint.

=end original

Run until the next breakpoint.
(TBT)

=item finish

=begin original

Run until the end of the current function, then stop again.

=end original

Run until the end of the current function, then stop again.
(TBT)

=item 'enter'

=begin original

Just pressing Enter will do the most recent operation again - it's a
blessing when stepping through miles of source code.

=end original

Just pressing Enter will do the most recent operation again - it's a
blessing when stepping through miles of source code.
(TBT)

=item print

=begin original

Execute the given C code and print its results. B<WARNING>: Perl makes
heavy use of macros, and F<gdb> does not necessarily support macros
(see later L</"gdb macro support">).  You'll have to substitute them
yourself, or to invoke cpp on the source code files
(see L</"The .i Targets">)
So, for instance, you can't say

=end original

Execute the given C code and print its results. B<WARNING>: Perl makes
heavy use of macros, and F<gdb> does not necessarily support macros
(see later L</"gdb macro support">).  You'll have to substitute them
yourself, or to invoke cpp on the source code files
(see L</"The .i Targets">)
So, for instance, you can't say
(TBT)

    print SvPV_nolen(sv)

=begin original

but you have to say

=end original

but you have to say
(TBT)

    print Perl_sv_2pv_nolen(sv)

=back

=begin original

You may find it helpful to have a "macro dictionary", which you can
produce by saying C<cpp -dM perl.c | sort>. Even then, F<cpp> won't
recursively apply those macros for you.

=end original

You may find it helpful to have a "macro dictionary", which you can
produce by saying C<cpp -dM perl.c | sort>. Even then, F<cpp> won't
recursively apply those macros for you.
(TBT)

=head2 gdb macro support

(gdb マクロ対応)

=begin original

Recent versions of F<gdb> have fairly good macro support, but
in order to use it you'll need to compile perl with macro definitions
included in the debugging information.  Using F<gcc> version 3.1, this
means configuring with C<-Doptimize=-g3>.  Other compilers might use a
different switch (if they support debugging macros at all).

=end original

Recent versions of F<gdb> have fairly good macro support, but
in order to use it you'll need to compile perl with macro definitions
included in the debugging information.  Using F<gcc> version 3.1, this
means configuring with C<-Doptimize=-g3>.  Other compilers might use a
different switch (if they support debugging macros at all).
(TBT)

=head2 Dumping Perl Data Structures

(Perl データ構造体をダンプする)

=begin original

One way to get around this macro hell is to use the dumping functions in
F<dump.c>; these work a little like an internal
L<Devel::Peek|Devel::Peek>, but they also cover OPs and other structures
that you can't get at from Perl. Let's take an example. We'll use the
C<$a = $b + $c> we used before, but give it a bit of context:
C<$b = "6XXXX"; $c = 2.3;>. Where's a good place to stop and poke around?

=end original

One way to get around this macro hell is to use the dumping functions in
F<dump.c>; these work a little like an internal
L<Devel::Peek|Devel::Peek>, but they also cover OPs and other structures
that you can't get at from Perl. Let's take an example. We'll use the
C<$a = $b + $c> we used before, but give it a bit of context:
C<$b = "6XXXX"; $c = 2.3;>. Where's a good place to stop and poke around?
(TBT)

=begin original

What about C<pp_add>, the function we examined earlier to implement the
C<+> operator:

=end original

What about C<pp_add>, the function we examined earlier to implement the
C<+> operator:
(TBT)

    (gdb) break Perl_pp_add
    Breakpoint 1 at 0x46249f: file pp_hot.c, line 309.

=begin original

Notice we use C<Perl_pp_add> and not C<pp_add> - see L<perlguts/Internal Functions>.
With the breakpoint in place, we can run our program:

=end original

Notice we use C<Perl_pp_add> and not C<pp_add> - see L<perlguts/Internal Functions>.
With the breakpoint in place, we can run our program:
(TBT)

    (gdb) run -e '$b = "6XXXX"; $c = 2.3; $a = $b + $c'

=begin original

Lots of junk will go past as gdb reads in the relevant source files and
libraries, and then:

=end original

Lots of junk will go past as gdb reads in the relevant source files and
libraries, and then:
(TBT)

    Breakpoint 1, Perl_pp_add () at pp_hot.c:309
    309         dSP; dATARGET; tryAMAGICbin(add,opASSIGN);
    (gdb) step
    311           dPOPTOPnnrl_ul;
    (gdb)

=begin original

We looked at this bit of code before, and we said that C<dPOPTOPnnrl_ul>
arranges for two C<NV>s to be placed into C<left> and C<right> - let's
slightly expand it:

=end original

We looked at this bit of code before, and we said that C<dPOPTOPnnrl_ul>
arranges for two C<NV>s to be placed into C<left> and C<right> - let's
slightly expand it:
(TBT)

    #define dPOPTOPnnrl_ul  NV right = POPn; \
                            SV *leftsv = TOPs; \
                            NV left = USE_LEFT(leftsv) ? SvNV(leftsv) : 0.0

=begin original

C<POPn> takes the SV from the top of the stack and obtains its NV either
directly (if C<SvNOK> is set) or by calling the C<sv_2nv> function.
C<TOPs> takes the next SV from the top of the stack - yes, C<POPn> uses
C<TOPs> - but doesn't remove it. We then use C<SvNV> to get the NV from
C<leftsv> in the same way as before - yes, C<POPn> uses C<SvNV>.

=end original

C<POPn> takes the SV from the top of the stack and obtains its NV either
directly (if C<SvNOK> is set) or by calling the C<sv_2nv> function.
C<TOPs> takes the next SV from the top of the stack - yes, C<POPn> uses
C<TOPs> - but doesn't remove it. We then use C<SvNV> to get the NV from
C<leftsv> in the same way as before - yes, C<POPn> uses C<SvNV>.
(TBT)

=begin original

Since we don't have an NV for C<$b>, we'll have to use C<sv_2nv> to
convert it. If we step again, we'll find ourselves there:

=end original

Since we don't have an NV for C<$b>, we'll have to use C<sv_2nv> to
convert it. If we step again, we'll find ourselves there:
(TBT)

    Perl_sv_2nv (sv=0xa0675d0) at sv.c:1669
    1669        if (!sv)
    (gdb)

=begin original

We can now use C<Perl_sv_dump> to investigate the SV:

=end original

We can now use C<Perl_sv_dump> to investigate the SV:
(TBT)

    SV = PV(0xa057cc0) at 0xa0675d0
    REFCNT = 1
    FLAGS = (POK,pPOK)
    PV = 0xa06a510 "6XXXX"\0
    CUR = 5
    LEN = 6
    $1 = void

=begin original

We know we're going to get C<6> from this, so let's finish the
subroutine:

=end original

We know we're going to get C<6> from this, so let's finish the
subroutine:
(TBT)

    (gdb) finish
    Run till exit from #0  Perl_sv_2nv (sv=0xa0675d0) at sv.c:1671
    0x462669 in Perl_pp_add () at pp_hot.c:311
    311           dPOPTOPnnrl_ul;

=begin original

We can also dump out this op: the current op is always stored in
C<PL_op>, and we can dump it with C<Perl_op_dump>. This'll give us
similar output to L<B::Debug|B::Debug>.

=end original

We can also dump out this op: the current op is always stored in
C<PL_op>, and we can dump it with C<Perl_op_dump>. This'll give us
similar output to L<B::Debug|B::Debug>.
(TBT)

    {
    13  TYPE = add  ===> 14
        TARG = 1
        FLAGS = (SCALAR,KIDS)
        {
            TYPE = null  ===> (12)
              (was rv2sv)
            FLAGS = (SCALAR,KIDS)
            {
    11          TYPE = gvsv  ===> 12
                FLAGS = (SCALAR)
                GV = main::b
            }
        }

=begin original

# finish this later #

=end original

# finish this later #
(TBT)

=head2 Patching

(パッチ)

=begin original

All right, we've now had a look at how to navigate the Perl sources and
some things you'll need to know when fiddling with them. Let's now get
on and create a simple patch. Here's something Larry suggested: if a
C<U> is the first active format during a C<pack>, (for example,
C<pack "U3C8", @stuff>) then the resulting string should be treated as
UTF-8 encoded.

=end original

All right, we've now had a look at how to navigate the Perl sources and
some things you'll need to know when fiddling with them. Let's now get
on and create a simple patch. Here's something Larry suggested: if a
C<U> is the first active format during a C<pack>, (for example,
C<pack "U3C8", @stuff>) then the resulting string should be treated as
UTF-8 encoded.
(TBT)

=begin original

How do we prepare to fix this up? First we locate the code in question -
the C<pack> happens at runtime, so it's going to be in one of the F<pp>
files. Sure enough, C<pp_pack> is in F<pp.c>. Since we're going to be
altering this file, let's copy it to F<pp.c~>.

=end original

How do we prepare to fix this up? First we locate the code in question -
the C<pack> happens at runtime, so it's going to be in one of the F<pp>
files. Sure enough, C<pp_pack> is in F<pp.c>. Since we're going to be
altering this file, let's copy it to F<pp.c~>.
(TBT)

=begin original

[Well, it was in F<pp.c> when this tutorial was written. It has now been
split off with C<pp_unpack> to its own file, F<pp_pack.c>]

=end original

[Well, it was in F<pp.c> when this tutorial was written. It has now been
split off with C<pp_unpack> to its own file, F<pp_pack.c>]
(TBT)

=begin original

Now let's look over C<pp_pack>: we take a pattern into C<pat>, and then
loop over the pattern, taking each format character in turn into
C<datum_type>. Then for each possible format character, we swallow up
the other arguments in the pattern (a field width, an asterisk, and so
on) and convert the next chunk input into the specified format, adding
it onto the output SV C<cat>.

=end original

Now let's look over C<pp_pack>: we take a pattern into C<pat>, and then
loop over the pattern, taking each format character in turn into
C<datum_type>. Then for each possible format character, we swallow up
the other arguments in the pattern (a field width, an asterisk, and so
on) and convert the next chunk input into the specified format, adding
it onto the output SV C<cat>.
(TBT)

=begin original

How do we know if the C<U> is the first format in the C<pat>? Well, if
we have a pointer to the start of C<pat> then, if we see a C<U> we can
test whether we're still at the start of the string. So, here's where
C<pat> is set up:

=end original

How do we know if the C<U> is the first format in the C<pat>? Well, if
we have a pointer to the start of C<pat> then, if we see a C<U> we can
test whether we're still at the start of the string. So, here's where
C<pat> is set up:
(TBT)

    STRLEN fromlen;
    register char *pat = SvPVx(*++MARK, fromlen);
    register char *patend = pat + fromlen;
    register I32 len;
    I32 datumtype;
    SV *fromstr;

=begin original

We'll have another string pointer in there:

=end original

We'll have another string pointer in there:
(TBT)

    STRLEN fromlen;
    register char *pat = SvPVx(*++MARK, fromlen);
    register char *patend = pat + fromlen;
 +  char *patcopy;
    register I32 len;
    I32 datumtype;
    SV *fromstr;

=begin original

And just before we start the loop, we'll set C<patcopy> to be the start
of C<pat>:

=end original

And just before we start the loop, we'll set C<patcopy> to be the start
of C<pat>:
(TBT)

    items = SP - MARK;
    MARK++;
    sv_setpvn(cat, "", 0);
 +  patcopy = pat;
    while (pat < patend) {

=begin original

Now if we see a C<U> which was at the start of the string, we turn on
the C<UTF8> flag for the output SV, C<cat>:

=end original

Now if we see a C<U> which was at the start of the string, we turn on
the C<UTF8> flag for the output SV, C<cat>:
(TBT)

 +  if (datumtype == 'U' && pat==patcopy+1)
 +      SvUTF8_on(cat);
    if (datumtype == '#') {
        while (pat < patend && *pat != '\n')
            pat++;

=begin original

Remember that it has to be C<patcopy+1> because the first character of
the string is the C<U> which has been swallowed into C<datumtype!>

=end original

Remember that it has to be C<patcopy+1> because the first character of
the string is the C<U> which has been swallowed into C<datumtype!>
(TBT)

=begin original

Oops, we forgot one thing: what if there are spaces at the start of the
pattern? C<pack("  U*", @stuff)> will have C<U> as the first active
character, even though it's not the first thing in the pattern. In this
case, we have to advance C<patcopy> along with C<pat> when we see spaces:

=end original

Oops, we forgot one thing: what if there are spaces at the start of the
pattern? C<pack("  U*", @stuff)> will have C<U> as the first active
character, even though it's not the first thing in the pattern. In this
case, we have to advance C<patcopy> along with C<pat> when we see spaces:
(TBT)

    if (isSPACE(datumtype))
        continue;

=begin original

needs to become

=end original

needs to become
(TBT)

    if (isSPACE(datumtype)) {
        patcopy++;
        continue;
    }

=begin original

OK. That's the C part done. Now we must do two additional things before
this patch is ready to go: we've changed the behaviour of Perl, and so
we must document that change. We must also provide some more regression
tests to make sure our patch works and doesn't create a bug somewhere
else along the line.

=end original

OK. That's the C part done. Now we must do two additional things before
this patch is ready to go: we've changed the behaviour of Perl, and so
we must document that change. We must also provide some more regression
tests to make sure our patch works and doesn't create a bug somewhere
else along the line.
(TBT)

=begin original

The regression tests for each operator live in F<t/op/>, and so we
make a copy of F<t/op/pack.t> to F<t/op/pack.t~>. Now we can add our
tests to the end. First, we'll test that the C<U> does indeed create
Unicode strings.

=end original

The regression tests for each operator live in F<t/op/>, and so we
make a copy of F<t/op/pack.t> to F<t/op/pack.t~>. Now we can add our
tests to the end. First, we'll test that the C<U> does indeed create
Unicode strings.
(TBT)

=begin original

t/op/pack.t has a sensible ok() function, but if it didn't we could
use the one from t/test.pl.

=end original

t/op/pack.t has a sensible ok() function, but if it didn't we could
use the one from t/test.pl.
(TBT)

 require './test.pl';
 plan( tests => 159 );

=begin original

so instead of this:

=end original

so instead of this:
(TBT)

 print 'not ' unless "1.20.300.4000" eq sprintf "%vd", pack("U*",1,20,300,4000);
 print "ok $test\n"; $test++;

=begin original

we can write the more sensible (see L<Test::More> for a full
explanation of is() and other testing functions).

=end original

we can write the more sensible (see L<Test::More> for a full
explanation of is() and other testing functions).
(TBT)

 is( "1.20.300.4000", sprintf "%vd", pack("U*",1,20,300,4000),
                                       "U* produces Unicode" );

=begin original

Now we'll test that we got that space-at-the-beginning business right:

=end original

Now we'll test that we got that space-at-the-beginning business right:
(TBT)

 is( "1.20.300.4000", sprintf "%vd", pack("  U*",1,20,300,4000),
                                       "  with spaces at the beginning" );

=begin original

And finally we'll test that we don't make Unicode strings if C<U> is B<not>
the first active format:

=end original

And finally we'll test that we don't make Unicode strings if C<U> is B<not>
the first active format:
(TBT)

 isnt( v1.20.300.4000, sprintf "%vd", pack("C0U*",1,20,300,4000),
                                       "U* not first isn't Unicode" );

=begin original

Mustn't forget to change the number of tests which appears at the top,
or else the automated tester will get confused.  This will either look
like this:

=end original

Mustn't forget to change the number of tests which appears at the top,
or else the automated tester will get confused.  This will either look
like this:
(TBT)

 print "1..156\n";

=begin original

or this:

=end original

or this:
(TBT)

 plan( tests => 156 );

=begin original

We now compile up Perl, and run it through the test suite. Our new
tests pass, hooray!

=end original

We now compile up Perl, and run it through the test suite. Our new
tests pass, hooray!
(TBT)

=begin original

Finally, the documentation. The job is never done until the paperwork is
over, so let's describe the change we've just made. The relevant place
is F<pod/perlfunc.pod>; again, we make a copy, and then we'll insert
this text in the description of C<pack>:

=end original

Finally, the documentation. The job is never done until the paperwork is
over, so let's describe the change we've just made. The relevant place
is F<pod/perlfunc.pod>; again, we make a copy, and then we'll insert
this text in the description of C<pack>:
(TBT)

 =item *

 If the pattern begins with a C<U>, the resulting string will be treated
 as UTF-8-encoded Unicode. You can force UTF-8 encoding on in a string
 with an initial C<U0>, and the bytes that follow will be interpreted as
 Unicode characters. If you don't want this to happen, you can begin your
 pattern with C<C0> (or anything else) to force Perl not to UTF-8 encode your
 string, and then follow this with a C<U*> somewhere in your pattern.

=begin original

All done. Now let's create the patch. F<Porting/patching.pod> tells us
that if we're making major changes, we should copy the entire directory
to somewhere safe before we begin fiddling, and then do

=end original

All done. Now let's create the patch. F<Porting/patching.pod> tells us
that if we're making major changes, we should copy the entire directory
to somewhere safe before we begin fiddling, and then do
(TBT)

    diff -ruN old new > patch

=begin original

However, we know which files we've changed, and we can simply do this:

=end original

However, we know which files we've changed, and we can simply do this:
(TBT)

    diff -u pp.c~             pp.c             >  patch
    diff -u t/op/pack.t~      t/op/pack.t      >> patch
    diff -u pod/perlfunc.pod~ pod/perlfunc.pod >> patch

=begin original

We end up with a patch looking a little like this:

=end original

We end up with a patch looking a little like this:
(TBT)

    --- pp.c~       Fri Jun 02 04:34:10 2000
    +++ pp.c        Fri Jun 16 11:37:25 2000
    @@ -4375,6 +4375,7 @@
         register I32 items;
         STRLEN fromlen;
         register char *pat = SvPVx(*++MARK, fromlen);
    +    char *patcopy;
         register char *patend = pat + fromlen;
         register I32 len;
         I32 datumtype;
    @@ -4405,6 +4406,7 @@
    ...

=begin original

And finally, we submit it, with our rationale, to perl5-porters. Job
done!

=end original

And finally, we submit it, with our rationale, to perl5-porters. Job
done!
(TBT)

=head2 Patching a core module

(コアモジュールにパッチを当てる)

=begin original

This works just like patching anything else, with an extra
consideration.  Many core modules also live on CPAN.  If this is so,
patch the CPAN version instead of the core and send the patch off to
the module maintainer (with a copy to p5p).  This will help the module
maintainer keep the CPAN version in sync with the core version without
constantly scanning p5p.

=end original

This works just like patching anything else, with an extra
consideration.  Many core modules also live on CPAN.  If this is so,
patch the CPAN version instead of the core and send the patch off to
the module maintainer (with a copy to p5p).  This will help the module
maintainer keep the CPAN version in sync with the core version without
constantly scanning p5p.
(TBT)

=begin original

The list of maintainers of core modules is usefully documented in
F<Porting/Maintainers.pl>.

=end original

The list of maintainers of core modules is usefully documented in
F<Porting/Maintainers.pl>.
(TBT)

=head2 Adding a new function to the core

(コアに新しい関数を追加する)

=begin original

If, as part of a patch to fix a bug, or just because you have an
especially good idea, you decide to add a new function to the core,
discuss your ideas on p5p well before you start work.  It may be that
someone else has already attempted to do what you are considering and
can give lots of good advice or even provide you with bits of code
that they already started (but never finished).

=end original

If, as part of a patch to fix a bug, or just because you have an
especially good idea, you decide to add a new function to the core,
discuss your ideas on p5p well before you start work.  It may be that
someone else has already attempted to do what you are considering and
can give lots of good advice or even provide you with bits of code
that they already started (but never finished).
(TBT)

=begin original

You have to follow all of the advice given above for patching.  It is
extremely important to test any addition thoroughly and add new tests
to explore all boundary conditions that your new function is expected
to handle.  If your new function is used only by one module (e.g. toke),
then it should probably be named S_your_function (for static); on the
other hand, if you expect it to accessible from other functions in
Perl, you should name it Perl_your_function.  See L<perlguts/Internal Functions>
for more details.

=end original

You have to follow all of the advice given above for patching.  It is
extremely important to test any addition thoroughly and add new tests
to explore all boundary conditions that your new function is expected
to handle.  If your new function is used only by one module (e.g. toke),
then it should probably be named S_your_function (for static); on the
other hand, if you expect it to accessible from other functions in
Perl, you should name it Perl_your_function.  See L<perlguts/Internal Functions>
for more details.
(TBT)

=begin original

The location of any new code is also an important consideration.  Don't
just create a new top level .c file and put your code there; you would
have to make changes to Configure (so the Makefile is created properly),
as well as possibly lots of include files.  This is strictly pumpking
business.

=end original

The location of any new code is also an important consideration.  Don't
just create a new top level .c file and put your code there; you would
have to make changes to Configure (so the Makefile is created properly),
as well as possibly lots of include files.  This is strictly pumpking
business.
(TBT)

=begin original

It is better to add your function to one of the existing top level
source code files, but your choice is complicated by the nature of
the Perl distribution.  Only the files that are marked as compiled
static are located in the perl executable.  Everything else is located
in the shared library (or DLL if you are running under WIN32).  So,
for example, if a function was only used by functions located in
toke.c, then your code can go in toke.c.  If, however, you want to call
the function from universal.c, then you should put your code in another
location, for example util.c.

=end original

It is better to add your function to one of the existing top level
source code files, but your choice is complicated by the nature of
the Perl distribution.  Only the files that are marked as compiled
static are located in the perl executable.  Everything else is located
in the shared library (or DLL if you are running under WIN32).  So,
for example, if a function was only used by functions located in
toke.c, then your code can go in toke.c.  If, however, you want to call
the function from universal.c, then you should put your code in another
location, for example util.c.
(TBT)

=begin original

In addition to writing your c-code, you will need to create an
appropriate entry in embed.pl describing your function, then run
'make regen_headers' to create the entries in the numerous header
files that perl needs to compile correctly.  See L<perlguts/Internal Functions>
for information on the various options that you can set in embed.pl.
You will forget to do this a few (or many) times and you will get
warnings during the compilation phase.  Make sure that you mention
this when you post your patch to P5P; the pumpking needs to know this.

=end original

In addition to writing your c-code, you will need to create an
appropriate entry in embed.pl describing your function, then run
'make regen_headers' to create the entries in the numerous header
files that perl needs to compile correctly.  See L<perlguts/Internal Functions>
for information on the various options that you can set in embed.pl.
You will forget to do this a few (or many) times and you will get
warnings during the compilation phase.  Make sure that you mention
this when you post your patch to P5P; the pumpking needs to know this.
(TBT)

=begin original

When you write your new code, please be conscious of existing code
conventions used in the perl source files.  See L<perlstyle> for
details.  Although most of the guidelines discussed seem to focus on
Perl code, rather than c, they all apply (except when they don't ;).
See also I<Porting/patching.pod> file in the Perl source distribution
for lots of details about both formatting and submitting patches of
your changes.

=end original

When you write your new code, please be conscious of existing code
conventions used in the perl source files.  See L<perlstyle> for
details.  Although most of the guidelines discussed seem to focus on
Perl code, rather than c, they all apply (except when they don't ;).
See also I<Porting/patching.pod> file in the Perl source distribution
for lots of details about both formatting and submitting patches of
your changes.
(TBT)

=begin original

Lastly, TEST TEST TEST TEST TEST any code before posting to p5p.
Test on as many platforms as you can find.  Test as many perl
Configure options as you can (e.g. MULTIPLICITY).  If you have
profiling or memory tools, see L<EXTERNAL TOOLS FOR DEBUGGING PERL>
below for how to use them to further test your code.  Remember that
most of the people on P5P are doing this on their own time and
don't have the time to debug your code.

=end original

Lastly, TEST TEST TEST TEST TEST any code before posting to p5p.
Test on as many platforms as you can find.  Test as many perl
Configure options as you can (e.g. MULTIPLICITY).  If you have
profiling or memory tools, see L<EXTERNAL TOOLS FOR DEBUGGING PERL>
below for how to use them to further test your code.  Remember that
most of the people on P5P are doing this on their own time and
don't have the time to debug your code.
(TBT)

=head2 Writing a test

(テストを書く)

=begin original

Every module and built-in function has an associated test file (or
should...).  If you add or change functionality, you have to write a
test.  If you fix a bug, you have to write a test so that bug never
comes back.  If you alter the docs, it would be nice to test what the
new documentation says.

=end original

Every module and built-in function has an associated test file (or
should...).  If you add or change functionality, you have to write a
test.  If you fix a bug, you have to write a test so that bug never
comes back.  If you alter the docs, it would be nice to test what the
new documentation says.
(TBT)

=begin original

In short, if you submit a patch you probably also have to patch the
tests.

=end original

In short, if you submit a patch you probably also have to patch the
tests.
(TBT)

=begin original

For modules, the test file is right next to the module itself.
F<lib/strict.t> tests F<lib/strict.pm>.  This is a recent innovation,
so there are some snags (and it would be wonderful for you to brush
them out), but it basically works that way.  Everything else lives in
F<t/>.

=end original

For modules, the test file is right next to the module itself.
F<lib/strict.t> tests F<lib/strict.pm>.  This is a recent innovation,
so there are some snags (and it would be wonderful for you to brush
them out), but it basically works that way.  Everything else lives in
F<t/>.
(TBT)

=begin original

If you add a new test directory under F<t/>, it is imperative that you 
add that directory to F<t/HARNESS> and F<t/TEST>.

=end original

If you add a new test directory under F<t/>, it is imperative that you 
add that directory to F<t/HARNESS> and F<t/TEST>.
(TBT)

=over 3

=item F<t/base/>

=begin original

Testing of the absolute basic functionality of Perl.  Things like
C<if>, basic file reads and writes, simple regexes, etc.  These are
run first in the test suite and if any of them fail, something is
I<really> broken.

=end original

Testing of the absolute basic functionality of Perl.  Things like
C<if>, basic file reads and writes, simple regexes, etc.  These are
run first in the test suite and if any of them fail, something is
I<really> broken.
(TBT)

=item F<t/cmd/>

=begin original

These test the basic control structures, C<if/else>, C<while>,
subroutines, etc.

=end original

These test the basic control structures, C<if/else>, C<while>,
subroutines, etc.
(TBT)

=item F<t/comp/>

=begin original

Tests basic issues of how Perl parses and compiles itself.

=end original

Tests basic issues of how Perl parses and compiles itself.
(TBT)

=item F<t/io/>

=begin original

Tests for built-in IO functions, including command line arguments.

=end original

Tests for built-in IO functions, including command line arguments.
(TBT)

=item F<t/lib/>

=begin original

The old home for the module tests, you shouldn't put anything new in
here.  There are still some bits and pieces hanging around in here
that need to be moved.  Perhaps you could move them?  Thanks!

=end original

The old home for the module tests, you shouldn't put anything new in
here.  There are still some bits and pieces hanging around in here
that need to be moved.  Perhaps you could move them?  Thanks!
(TBT)

=item F<t/mro/>

=begin original

Tests for perl's method resolution order implementations
(see L<mro>).

=end original

Tests for perl's method resolution order implementations
(see L<mro>).
(TBT)

=item F<t/op/>

=begin original

Tests for perl's built in functions that don't fit into any of the
other directories.

=end original

Tests for perl's built in functions that don't fit into any of the
other directories.
(TBT)

=item F<t/pod/>

=begin original

Tests for POD directives.  There are still some tests for the Pod
modules hanging around in here that need to be moved out into F<lib/>.

=end original

Tests for POD directives.  There are still some tests for the Pod
modules hanging around in here that need to be moved out into F<lib/>.
(TBT)

=item F<t/run/>

=begin original

Testing features of how perl actually runs, including exit codes and
handling of PERL* environment variables.

=end original

Testing features of how perl actually runs, including exit codes and
handling of PERL* environment variables.
(TBT)

=item F<t/uni/>

=begin original

Tests for the core support of Unicode.

=end original

Tests for the core support of Unicode.
(TBT)

=item F<t/win32/>

=begin original

Windows-specific tests.

=end original

Windows-specific tests.
(TBT)

=item F<t/x2p>

=begin original

A test suite for the s2p converter.

=end original

A test suite for the s2p converter.
(TBT)

=back

=begin original

The core uses the same testing style as the rest of Perl, a simple
"ok/not ok" run through Test::Harness, but there are a few special
considerations.

=end original

The core uses the same testing style as the rest of Perl, a simple
"ok/not ok" run through Test::Harness, but there are a few special
considerations.
(TBT)

=begin original

There are three ways to write a test in the core.  Test::More,
t/test.pl and ad hoc C<print $test ? "ok 42\n" : "not ok 42\n">.  The
decision of which to use depends on what part of the test suite you're
working on.  This is a measure to prevent a high-level failure (such
as Config.pm breaking) from causing basic functionality tests to fail.

=end original

There are three ways to write a test in the core.  Test::More,
t/test.pl and ad hoc C<print $test ? "ok 42\n" : "not ok 42\n">.  The
decision of which to use depends on what part of the test suite you're
working on.  This is a measure to prevent a high-level failure (such
as Config.pm breaking) from causing basic functionality tests to fail.
(TBT)

=over 4

=item t/base t/comp

=begin original

Since we don't know if require works, or even subroutines, use ad hoc
tests for these two.  Step carefully to avoid using the feature being
tested.

=end original

Since we don't know if require works, or even subroutines, use ad hoc
tests for these two.  Step carefully to avoid using the feature being
tested.
(TBT)

=item t/cmd t/run t/io t/op

=begin original

Now that basic require() and subroutines are tested, you can use the
t/test.pl library which emulates the important features of Test::More
while using a minimum of core features.

=end original

Now that basic require() and subroutines are tested, you can use the
t/test.pl library which emulates the important features of Test::More
while using a minimum of core features.
(TBT)

=begin original

You can also conditionally use certain libraries like Config, but be
sure to skip the test gracefully if it's not there.

=end original

You can also conditionally use certain libraries like Config, but be
sure to skip the test gracefully if it's not there.
(TBT)

=item t/lib ext lib

=begin original

Now that the core of Perl is tested, Test::More can be used.  You can
also use the full suite of core modules in the tests.

=end original

Now that the core of Perl is tested, Test::More can be used.  You can
also use the full suite of core modules in the tests.
(TBT)

=back

=begin original

When you say "make test" Perl uses the F<t/TEST> program to run the
test suite (except under Win32 where it uses F<t/harness> instead.)
All tests are run from the F<t/> directory, B<not> the directory
which contains the test.  This causes some problems with the tests
in F<lib/>, so here's some opportunity for some patching.

=end original

When you say "make test" Perl uses the F<t/TEST> program to run the
test suite (except under Win32 where it uses F<t/harness> instead.)
All tests are run from the F<t/> directory, B<not> the directory
which contains the test.  This causes some problems with the tests
in F<lib/>, so here's some opportunity for some patching.
(TBT)

=begin original

You must be triply conscious of cross-platform concerns.  This usually
boils down to using File::Spec and avoiding things like C<fork()> and
C<system()> unless absolutely necessary.

=end original

You must be triply conscious of cross-platform concerns.  This usually
boils down to using File::Spec and avoiding things like C<fork()> and
C<system()> unless absolutely necessary.
(TBT)

=head2 Special Make Test Targets

(特殊 make test ターゲット)

=begin original

There are various special make targets that can be used to test Perl
slightly differently than the standard "test" target.  Not all them
are expected to give a 100% success rate.  Many of them have several
aliases, and many of them are not available on certain operating
systems.

=end original

There are various special make targets that can be used to test Perl
slightly differently than the standard "test" target.  Not all them
are expected to give a 100% success rate.  Many of them have several
aliases, and many of them are not available on certain operating
systems.
(TBT)

=over 4

=item coretest

=begin original

Run F<perl> on all core tests (F<t/*> and F<lib/[a-z]*> pragma tests).

=end original

Run F<perl> on all core tests (F<t/*> and F<lib/[a-z]*> pragma tests).
(TBT)

=begin original

(Not available on Win32)

=end original

(Not available on Win32)
(TBT)

=item test.deparse

=begin original

Run all the tests through B::Deparse.  Not all tests will succeed.

=end original

Run all the tests through B::Deparse.  Not all tests will succeed.
(TBT)

=begin original

(Not available on Win32)

=end original

(Not available on Win32)
(TBT)

=item test.taintwarn

=begin original

Run all tests with the B<-t> command-line switch.  Not all tests
are expected to succeed (until they're specifically fixed, of course).

=end original

Run all tests with the B<-t> command-line switch.  Not all tests
are expected to succeed (until they're specifically fixed, of course).
(TBT)

=begin original

(Not available on Win32)

=end original

(Not available on Win32)
(TBT)

=item minitest

=begin original

Run F<miniperl> on F<t/base>, F<t/comp>, F<t/cmd>, F<t/run>, F<t/io>,
F<t/op>, F<t/uni> and F<t/mro> tests.

=end original

Run F<miniperl> on F<t/base>, F<t/comp>, F<t/cmd>, F<t/run>, F<t/io>,
F<t/op>, F<t/uni> and F<t/mro> tests.
(TBT)

=item test.valgrind check.valgrind utest.valgrind ucheck.valgrind

=begin original

(Only in Linux) Run all the tests using the memory leak + naughty
memory access tool "valgrind".  The log files will be named
F<testname.valgrind>.

=end original

(Only in Linux) Run all the tests using the memory leak + naughty
memory access tool "valgrind".  The log files will be named
F<testname.valgrind>.
(TBT)

=item test.third check.third utest.third ucheck.third

=begin original

(Only in Tru64)  Run all the tests using the memory leak + naughty
memory access tool "Third Degree".  The log files will be named
F<perl.3log.testname>.

=end original

(Only in Tru64)  Run all the tests using the memory leak + naughty
memory access tool "Third Degree".  The log files will be named
F<perl.3log.testname>.
(TBT)

=item test.torture torturetest

=begin original

Run all the usual tests and some extra tests.  As of Perl 5.8.0 the
only extra tests are Abigail's JAPHs, F<t/japh/abigail.t>.

=end original

Run all the usual tests and some extra tests.  As of Perl 5.8.0 the
only extra tests are Abigail's JAPHs, F<t/japh/abigail.t>.
(TBT)

=begin original

You can also run the torture test with F<t/harness> by giving
C<-torture> argument to F<t/harness>.

=end original

You can also run the torture test with F<t/harness> by giving
C<-torture> argument to F<t/harness>.
(TBT)

=item utest ucheck test.utf8 check.utf8

=begin original

Run all the tests with -Mutf8.  Not all tests will succeed.

=end original

Run all the tests with -Mutf8.  Not all tests will succeed.
(TBT)

=begin original

(Not available on Win32)

=end original

(Not available on Win32)
(TBT)

=item minitest.utf16 test.utf16

=begin original

Runs the tests with UTF-16 encoded scripts, encoded with different
versions of this encoding.

=end original

Runs the tests with UTF-16 encoded scripts, encoded with different
versions of this encoding.
(TBT)

=begin original

C<make utest.utf16> runs the test suite with a combination of C<-utf8> and
C<-utf16> arguments to F<t/TEST>.

=end original

C<make utest.utf16> runs the test suite with a combination of C<-utf8> and
C<-utf16> arguments to F<t/TEST>.
(TBT)

=begin original

(Not available on Win32)

=end original

(Not available on Win32)
(TBT)

=item test_harness

=begin original

Run the test suite with the F<t/harness> controlling program, instead of
F<t/TEST>. F<t/harness> is more sophisticated, and uses the
L<Test::Harness> module, thus using this test target supposes that perl
mostly works. The main advantage for our purposes is that it prints a
detailed summary of failed tests at the end. Also, unlike F<t/TEST>, it
doesn't redirect stderr to stdout.

=end original

Run the test suite with the F<t/harness> controlling program, instead of
F<t/TEST>. F<t/harness> is more sophisticated, and uses the
L<Test::Harness> module, thus using this test target supposes that perl
mostly works. The main advantage for our purposes is that it prints a
detailed summary of failed tests at the end. Also, unlike F<t/TEST>, it
doesn't redirect stderr to stdout.
(TBT)

=begin original

Note that under Win32 F<t/harness> is always used instead of F<t/TEST>, so
there is no special "test_harness" target.

=end original

Note that under Win32 F<t/harness> is always used instead of F<t/TEST>, so
there is no special "test_harness" target.
(TBT)

=begin original

Under Win32's "test" target you may use the TEST_SWITCHES and TEST_FILES
environment variables to control the behaviour of F<t/harness>.  This means
you can say

=end original

Under Win32's "test" target you may use the TEST_SWITCHES and TEST_FILES
environment variables to control the behaviour of F<t/harness>.  This means
you can say
(TBT)

    nmake test TEST_FILES="op/*.t"
    nmake test TEST_SWITCHES="-torture" TEST_FILES="op/*.t"

=item test-notty test_notty

=begin original

Sets PERL_SKIP_TTY_TEST to true before running normal test.

=end original

Sets PERL_SKIP_TTY_TEST to true before running normal test.
(TBT)

=back

=head2 Running tests by hand

(手動でテストを実行する)

=begin original

You can run part of the test suite by hand by using one the following
commands from the F<t/> directory :

=end original

You can run part of the test suite by hand by using one the following
commands from the F<t/> directory :
(TBT)

    ./perl -I../lib TEST list-of-.t-files

=begin original

or

=end original

or
(TBT)

    ./perl -I../lib harness list-of-.t-files

=begin original

(if you don't specify test scripts, the whole test suite will be run.)

=end original

(if you don't specify test scripts, the whole test suite will be run.)
(TBT)

=head3 Using t/harness for testing

=begin original

If you use C<harness> for testing you have several command line options
available to you. The arguments are as follows, and are in the order
that they must appear if used together.

=end original

If you use C<harness> for testing you have several command line options
available to you. The arguments are as follows, and are in the order
that they must appear if used together.
(TBT)

    harness -v -torture -re=pattern LIST OF FILES TO TEST
    harness -v -torture -re LIST OF PATTERNS TO MATCH

=begin original

If C<LIST OF FILES TO TEST> is omitted the file list is obtained from
the manifest. The file list may include shell wildcards which will be
expanded out.

=end original

If C<LIST OF FILES TO TEST> is omitted the file list is obtained from
the manifest. The file list may include shell wildcards which will be
expanded out.
(TBT)

=over 4

=item -v

=begin original

Run the tests under verbose mode so you can see what tests were run,
and debug output.

=end original

Run the tests under verbose mode so you can see what tests were run,
and debug output.
(TBT)

=item -torture

=begin original

Run the torture tests as well as the normal set.

=end original

Run the torture tests as well as the normal set.
(TBT)

=item -re=PATTERN

=begin original

Filter the file list so that all the test files run match PATTERN.
Note that this form is distinct from the B<-re LIST OF PATTERNS> form below
in that it allows the file list to be provided as well.

=end original

Filter the file list so that all the test files run match PATTERN.
Note that this form is distinct from the B<-re LIST OF PATTERNS> form below
in that it allows the file list to be provided as well.
(TBT)

=item -re LIST OF PATTERNS

=begin original

Filter the file list so that all the test files run match
/(LIST|OF|PATTERNS)/. Note that with this form the patterns
are joined by '|' and you cannot supply a list of files, instead
the test files are obtained from the MANIFEST.

=end original

Filter the file list so that all the test files run match
/(LIST|OF|PATTERNS)/. Note that with this form the patterns
are joined by '|' and you cannot supply a list of files, instead
the test files are obtained from the MANIFEST.
(TBT)

=back

=begin original

You can run an individual test by a command similar to

=end original

You can run an individual test by a command similar to
(TBT)

    ./perl -I../lib patho/to/foo.t

=begin original

except that the harnesses set up some environment variables that may
affect the execution of the test :

=end original

except that the harnesses set up some environment variables that may
affect the execution of the test :
(TBT)

=over 4

=item PERL_CORE=1

=begin original

indicates that we're running this test part of the perl core test suite.
This is useful for modules that have a dual life on CPAN.

=end original

indicates that we're running this test part of the perl core test suite.
This is useful for modules that have a dual life on CPAN.
(TBT)

=item PERL_DESTRUCT_LEVEL=2

=begin original

is set to 2 if it isn't set already (see L</PERL_DESTRUCT_LEVEL>)

=end original

is set to 2 if it isn't set already (see L</PERL_DESTRUCT_LEVEL>)
(TBT)

=item PERL

=begin original

(used only by F<t/TEST>) if set, overrides the path to the perl executable
that should be used to run the tests (the default being F<./perl>).

=end original

(used only by F<t/TEST>) if set, overrides the path to the perl executable
that should be used to run the tests (the default being F<./perl>).
(TBT)

=item PERL_SKIP_TTY_TEST

=begin original

if set, tells to skip the tests that need a terminal. It's actually set
automatically by the Makefile, but can also be forced artificially by
running 'make test_notty'.

=end original

if set, tells to skip the tests that need a terminal. It's actually set
automatically by the Makefile, but can also be forced artificially by
running 'make test_notty'.
(TBT)

=back

=head3 Other environment variables that may influence tests

=over 4

=item PERL_TEST_Net_Ping

=begin original

Setting this variable runs all the Net::Ping modules tests,
otherwise some tests that interact with the outside world are skipped.
See L<perl58delta>.

=end original

Setting this variable runs all the Net::Ping modules tests,
otherwise some tests that interact with the outside world are skipped.
See L<perl58delta>.
(TBT)

=item PERL_TEST_NOVREXX

=begin original

Setting this variable skips the vrexx.t tests for OS2::REXX.

=end original

Setting this variable skips the vrexx.t tests for OS2::REXX.
(TBT)

=item PERL_TEST_NUMCONVERTS

=begin original

This sets a variable in op/numconvert.t.

=end original

This sets a variable in op/numconvert.t.
(TBT)

=back

=begin original

See also the documentation for the Test and Test::Harness modules,
for more environment variables that affect testing.

=end original

See also the documentation for the Test and Test::Harness modules,
for more environment variables that affect testing.
(TBT)

=head2 Common problems when patching Perl source code

(Perl ソースコードにパッチを当てるときに良くある問題)

=begin original

Perl source plays by ANSI C89 rules: no C99 (or C++) extensions.  In
some cases we have to take pre-ANSI requirements into consideration.
You don't care about some particular platform having broken Perl?
I hear there is still a strong demand for J2EE programmers.

=end original

Perl source plays by ANSI C89 rules: no C99 (or C++) extensions.  In
some cases we have to take pre-ANSI requirements into consideration.
You don't care about some particular platform having broken Perl?
I hear there is still a strong demand for J2EE programmers.
(TBT)

=head2 Perl environment problems

(Perl 環境の問題)

=over 4

=item *

=begin original

Not compiling with threading

=end original

Not compiling with threading
(TBT)

=begin original

Compiling with threading (-Duseithreads) completely rewrites
the function prototypes of Perl.  You better try your changes
with that.  Related to this is the difference between "Perl_-less"
and "Perl_-ly" APIs, for example:

=end original

Compiling with threading (-Duseithreads) completely rewrites
the function prototypes of Perl.  You better try your changes
with that.  Related to this is the difference between "Perl_-less"
and "Perl_-ly" APIs, for example:
(TBT)

  Perl_sv_setiv(aTHX_ ...);
  sv_setiv(...);

=begin original

The first one explicitly passes in the context, which is needed for e.g.
threaded builds.  The second one does that implicitly; do not get them
mixed.  If you are not passing in a aTHX_, you will need to do a dTHX
(or a dVAR) as the first thing in the function.

=end original

The first one explicitly passes in the context, which is needed for e.g.
threaded builds.  The second one does that implicitly; do not get them
mixed.  If you are not passing in a aTHX_, you will need to do a dTHX
(or a dVAR) as the first thing in the function.
(TBT)

=begin original

See L<perlguts/"How multiple interpreters and concurrency are supported">
for further discussion about context.

=end original

See L<perlguts/"How multiple interpreters and concurrency are supported">
for further discussion about context.
(TBT)

=item *

=begin original

Not compiling with -DDEBUGGING

=end original

Not compiling with -DDEBUGGING
(TBT)

=begin original

The DEBUGGING define exposes more code to the compiler,
therefore more ways for things to go wrong.  You should try it.

=end original

The DEBUGGING define exposes more code to the compiler,
therefore more ways for things to go wrong.  You should try it.
(TBT)

=item *

=begin original

Introducing (non-read-only) globals

=end original

Introducing (non-read-only) globals
(TBT)

=begin original

Do not introduce any modifiable globals, truly global or file static.
They are bad form and complicate multithreading and other forms of
concurrency.  The right way is to introduce them as new interpreter
variables, see F<intrpvar.h> (at the very end for binary compatibility).

=end original

Do not introduce any modifiable globals, truly global or file static.
They are bad form and complicate multithreading and other forms of
concurrency.  The right way is to introduce them as new interpreter
variables, see F<intrpvar.h> (at the very end for binary compatibility).
(TBT)

=begin original

Introducing read-only (const) globals is okay, as long as you verify
with e.g. C<nm libperl.a|egrep -v ' [TURtr] '> (if your C<nm> has
BSD-style output) that the data you added really is read-only.
(If it is, it shouldn't show up in the output of that command.)

=end original

Introducing read-only (const) globals is okay, as long as you verify
with e.g. C<nm libperl.a|egrep -v ' [TURtr] '> (if your C<nm> has
BSD-style output) that the data you added really is read-only.
(If it is, it shouldn't show up in the output of that command.)
(TBT)

=begin original

If you want to have static strings, make them constant:

=end original

If you want to have static strings, make them constant:
(TBT)

  static const char etc[] = "...";

=begin original

If you want to have arrays of constant strings, note carefully
the right combination of C<const>s:

=end original

If you want to have arrays of constant strings, note carefully
the right combination of C<const>s:
(TBT)

    static const char * const yippee[] =
	{"hi", "ho", "silver"};

=begin original

There is a way to completely hide any modifiable globals (they are all
moved to heap), the compilation setting C<-DPERL_GLOBAL_STRUCT_PRIVATE>.
It is not normally used, but can be used for testing, read more
about it in L<perlguts/"Background and PERL_IMPLICIT_CONTEXT">.

=end original

There is a way to completely hide any modifiable globals (they are all
moved to heap), the compilation setting C<-DPERL_GLOBAL_STRUCT_PRIVATE>.
It is not normally used, but can be used for testing, read more
about it in L<perlguts/"Background and PERL_IMPLICIT_CONTEXT">.
(TBT)

=item *

=begin original

Not exporting your new function

=end original

Not exporting your new function
(TBT)

=begin original

Some platforms (Win32, AIX, VMS, OS/2, to name a few) require any
function that is part of the public API (the shared Perl library)
to be explicitly marked as exported.  See the discussion about
F<embed.pl> in L<perlguts>.

=end original

Some platforms (Win32, AIX, VMS, OS/2, to name a few) require any
function that is part of the public API (the shared Perl library)
to be explicitly marked as exported.  See the discussion about
F<embed.pl> in L<perlguts>.
(TBT)

=item *

=begin original

Exporting your new function

=end original

Exporting your new function
(TBT)

=begin original

The new shiny result of either genuine new functionality or your
arduous refactoring is now ready and correctly exported.  So what
could possibly go wrong?

=end original

The new shiny result of either genuine new functionality or your
arduous refactoring is now ready and correctly exported.  So what
could possibly go wrong?
(TBT)

=begin original

Maybe simply that your function did not need to be exported in the
first place.  Perl has a long and not so glorious history of exporting
functions that it should not have.

=end original

Maybe simply that your function did not need to be exported in the
first place.  Perl has a long and not so glorious history of exporting
functions that it should not have.
(TBT)

=begin original

If the function is used only inside one source code file, make it
static.  See the discussion about F<embed.pl> in L<perlguts>.

=end original

If the function is used only inside one source code file, make it
static.  See the discussion about F<embed.pl> in L<perlguts>.
(TBT)

=begin original

If the function is used across several files, but intended only for
Perl's internal use (and this should be the common case), do not
export it to the public API.  See the discussion about F<embed.pl>
in L<perlguts>.

=end original

If the function is used across several files, but intended only for
Perl's internal use (and this should be the common case), do not
export it to the public API.  See the discussion about F<embed.pl>
in L<perlguts>.
(TBT)

=back

=head2 Portability problems

(移植性の問題)

=begin original

The following are common causes of compilation and/or execution
failures, not common to Perl as such.  The C FAQ is good bedtime
reading.  Please test your changes with as many C compilers and
platforms as possible -- we will, anyway, and it's nice to save
oneself from public embarrassment.

=end original

The following are common causes of compilation and/or execution
failures, not common to Perl as such.  The C FAQ is good bedtime
reading.  Please test your changes with as many C compilers and
platforms as possible -- we will, anyway, and it's nice to save
oneself from public embarrassment.
(TBT)

=begin original

If using gcc, you can add the C<-std=c89> option which will hopefully
catch most of these unportabilities. (However it might also catch
incompatibilities in your system's header files.)

=end original

If using gcc, you can add the C<-std=c89> option which will hopefully
catch most of these unportabilities. (However it might also catch
incompatibilities in your system's header files.)
(TBT)

=begin original

Use the Configure C<-Dgccansipedantic> flag to enable the gcc
C<-ansi -pedantic> flags which enforce stricter ANSI rules.

=end original

Use the Configure C<-Dgccansipedantic> flag to enable the gcc
C<-ansi -pedantic> flags which enforce stricter ANSI rules.
(TBT)

=begin original

If using the C<gcc -Wall> note that not all the possible warnings
(like C<-Wunitialized>) are given unless you also compile with C<-O>.

=end original

If using the C<gcc -Wall> note that not all the possible warnings
(like C<-Wunitialized>) are given unless you also compile with C<-O>.
(TBT)

=begin original

Note that if using gcc, starting from Perl 5.9.5 the Perl core source
code files (the ones at the top level of the source code distribution,
but not e.g. the extensions under ext/) are automatically compiled
with as many as possible of the C<-std=c89>, C<-ansi>, C<-pedantic>,
and a selection of C<-W> flags (see cflags.SH).

=end original

Note that if using gcc, starting from Perl 5.9.5 the Perl core source
code files (the ones at the top level of the source code distribution,
but not e.g. the extensions under ext/) are automatically compiled
with as many as possible of the C<-std=c89>, C<-ansi>, C<-pedantic>,
and a selection of C<-W> flags (see cflags.SH).
(TBT)

=begin original

Also study L<perlport> carefully to avoid any bad assumptions
about the operating system, filesystems, and so forth.

=end original

Also study L<perlport> carefully to avoid any bad assumptions
about the operating system, filesystems, and so forth.
(TBT)

=begin original

You may once in a while try a "make microperl" to see whether we
can still compile Perl with just the bare minimum of interfaces.
(See README.micro.)

=end original

You may once in a while try a "make microperl" to see whether we
can still compile Perl with just the bare minimum of interfaces.
(See README.micro.)
(TBT)

=begin original

Do not assume an operating system indicates a certain compiler.

=end original

Do not assume an operating system indicates a certain compiler.
(TBT)

=over 4

=item *

=begin original

Casting pointers to integers or casting integers to pointers

=end original

Casting pointers to integers or casting integers to pointers
(TBT)

    void castaway(U8* p)
    {
      IV i = p;

=begin original

or

=end original

or
(TBT)

    void castaway(U8* p)
    {
      IV i = (IV)p;

=begin original

Both are bad, and broken, and unportable.  Use the PTR2IV()
macro that does it right.  (Likewise, there are PTR2UV(), PTR2NV(),
INT2PTR(), and NUM2PTR().)

=end original

Both are bad, and broken, and unportable.  Use the PTR2IV()
macro that does it right.  (Likewise, there are PTR2UV(), PTR2NV(),
INT2PTR(), and NUM2PTR().)
(TBT)

=item *

=begin original

Casting between data function pointers and data pointers

=end original

Casting between data function pointers and data pointers
(TBT)

=begin original

Technically speaking casting between function pointers and data
pointers is unportable and undefined, but practically speaking
it seems to work, but you should use the FPTR2DPTR() and DPTR2FPTR()
macros.  Sometimes you can also play games with unions.

=end original

Technically speaking casting between function pointers and data
pointers is unportable and undefined, but practically speaking
it seems to work, but you should use the FPTR2DPTR() and DPTR2FPTR()
macros.  Sometimes you can also play games with unions.
(TBT)

=item *

=begin original

Assuming sizeof(int) == sizeof(long)

=end original

Assuming sizeof(int) == sizeof(long)
(TBT)

=begin original

There are platforms where longs are 64 bits, and platforms where ints
are 64 bits, and while we are out to shock you, even platforms where
shorts are 64 bits.  This is all legal according to the C standard.
(In other words, "long long" is not a portable way to specify 64 bits,
and "long long" is not even guaranteed to be any wider than "long".)

=end original

There are platforms where longs are 64 bits, and platforms where ints
are 64 bits, and while we are out to shock you, even platforms where
shorts are 64 bits.  This is all legal according to the C standard.
(In other words, "long long" is not a portable way to specify 64 bits,
and "long long" is not even guaranteed to be any wider than "long".)
(TBT)

=begin original

Instead, use the definitions IV, UV, IVSIZE, I32SIZE, and so forth.
Avoid things like I32 because they are B<not> guaranteed to be
I<exactly> 32 bits, they are I<at least> 32 bits, nor are they
guaranteed to be B<int> or B<long>.  If you really explicitly need
64-bit variables, use I64 and U64, but only if guarded by HAS_QUAD.

=end original

Instead, use the definitions IV, UV, IVSIZE, I32SIZE, and so forth.
Avoid things like I32 because they are B<not> guaranteed to be
I<exactly> 32 bits, they are I<at least> 32 bits, nor are they
guaranteed to be B<int> or B<long>.  If you really explicitly need
64-bit variables, use I64 and U64, but only if guarded by HAS_QUAD.
(TBT)

=item *

=begin original

Assuming one can dereference any type of pointer for any type of data

=end original

Assuming one can dereference any type of pointer for any type of data
(TBT)

  char *p = ...;
  long pony = *p;    /* BAD */

=begin original

Many platforms, quite rightly so, will give you a core dump instead
of a pony if the p happens not be correctly aligned.

=end original

Many platforms, quite rightly so, will give you a core dump instead
of a pony if the p happens not be correctly aligned.
(TBT)

=item *

=begin original

Lvalue casts

=end original

Lvalue casts
(TBT)

  (int)*p = ...;    /* BAD */

=begin original

Simply not portable.  Get your lvalue to be of the right type,
or maybe use temporary variables, or dirty tricks with unions.

=end original

Simply not portable.  Get your lvalue to be of the right type,
or maybe use temporary variables, or dirty tricks with unions.
(TBT)

=item *

=begin original

Assume B<anything> about structs (especially the ones you
don't control, like the ones coming from the system headers)

=end original

Assume B<anything> about structs (especially the ones you
don't control, like the ones coming from the system headers)
(TBT)

=over 8

=item *

=begin original

That a certain field exists in a struct

=end original

That a certain field exists in a struct
(TBT)

=item *

=begin original

That no other fields exist besides the ones you know of

=end original

That no other fields exist besides the ones you know of
(TBT)

=item *

=begin original

That a field is of certain signedness, sizeof, or type

=end original

That a field is of certain signedness, sizeof, or type
(TBT)

=item *

=begin original

That the fields are in a certain order

=end original

That the fields are in a certain order
(TBT)

=over 8

=item *

=begin original

While C guarantees the ordering specified in the struct definition,
between different platforms the definitions might differ

=end original

While C guarantees the ordering specified in the struct definition,
between different platforms the definitions might differ
(TBT)

=back

=item *

=begin original

That the sizeof(struct) or the alignments are the same everywhere

=end original

That the sizeof(struct) or the alignments are the same everywhere
(TBT)

=over 8

=item *

=begin original

There might be padding bytes between the fields to align the fields -
the bytes can be anything

=end original

There might be padding bytes between the fields to align the fields -
the bytes can be anything
(TBT)

=item *

=begin original

Structs are required to be aligned to the maximum alignment required
by the fields - which for native types is for usually equivalent to
sizeof() of the field

=end original

Structs are required to be aligned to the maximum alignment required
by the fields - which for native types is for usually equivalent to
sizeof() of the field
(TBT)

=back

=back

=item *

=begin original

Assuming the character set is ASCIIish

=end original

Assuming the character set is ASCIIish
(TBT)

=begin original

Perl can compile and run under EBCDIC platforms.  See L<perlebcdic>.
This is transparent for the most part, but because the character sets
differ, you shouldn't use numeric (decimal, octal, nor hex) constants
to refer to characters.  You can safely say 'A', but not 0x41.
You can safely say '\n', but not \012.
If a character doesn't have a trivial input form, you can
create a #define for it in both C<utfebcdic.h> and C<utf8.h>, so that
it resolves to different values depending on the character set being used.
(There are three different EBCDIC character sets defined in C<utfebcdic.h>,
so it might be best to insert the #define three times in that file.)

=end original

Perl can compile and run under EBCDIC platforms.  See L<perlebcdic>.
This is transparent for the most part, but because the character sets
differ, you shouldn't use numeric (decimal, octal, nor hex) constants
to refer to characters.  You can safely say 'A', but not 0x41.
You can safely say '\n', but not \012.
If a character doesn't have a trivial input form, you can
create a #define for it in both C<utfebcdic.h> and C<utf8.h>, so that
it resolves to different values depending on the character set being used.
(There are three different EBCDIC character sets defined in C<utfebcdic.h>,
so it might be best to insert the #define three times in that file.)
(TBT)

=begin original

Also, the range 'A' - 'Z' in ASCII is an unbroken sequence of 26 upper case
alphabetic characters.  That is not true in EBCDIC.  Nor for 'a' to 'z'.
But '0' - '9' is an unbroken range in both systems.  Don't assume anything
about other ranges.

=end original

Also, the range 'A' - 'Z' in ASCII is an unbroken sequence of 26 upper case
alphabetic characters.  That is not true in EBCDIC.  Nor for 'a' to 'z'.
But '0' - '9' is an unbroken range in both systems.  Don't assume anything
about other ranges.
(TBT)

=begin original

Many of the comments in the existing code ignore the possibility of EBCDIC,
and may be wrong therefore, even if the code works.
This is actually a tribute to the successful transparent insertion of being
able to handle EBCDIC without having to change pre-existing code.

=end original

Many of the comments in the existing code ignore the possibility of EBCDIC,
and may be wrong therefore, even if the code works.
This is actually a tribute to the successful transparent insertion of being
able to handle EBCDIC without having to change pre-existing code.
(TBT)

=begin original

UTF-8 and UTF-EBCDIC are two different encodings used to represent Unicode
code points as sequences of bytes.  Macros 
with the same names (but different definitions)
in C<utf8.h> and C<utfebcdic.h>
are used to allow the calling code to think that there is only one such
encoding.
This is almost always referred to as C<utf8>, but it means the EBCDIC version
as well.  Again, comments in the code may well be wrong even if the code itself
is right.
For example, the concept of C<invariant characters> differs between ASCII and
EBCDIC.
On ASCII platforms, only characters that do not have the high-order
bit set (i.e. whose ordinals are strict ASCII, 0 - 127)
are invariant, and the documentation and comments in the code
may assume that,
often referring to something like, say, C<hibit>.
The situation differs and is not so simple on EBCDIC machines, but as long as
the code itself uses the C<NATIVE_IS_INVARIANT()> macro appropriately, it
works, even if the comments are wrong.

=end original

UTF-8 and UTF-EBCDIC are two different encodings used to represent Unicode
code points as sequences of bytes.  Macros 
with the same names (but different definitions)
in C<utf8.h> and C<utfebcdic.h>
are used to allow the calling code to think that there is only one such
encoding.
This is almost always referred to as C<utf8>, but it means the EBCDIC version
as well.  Again, comments in the code may well be wrong even if the code itself
is right.
For example, the concept of C<invariant characters> differs between ASCII and
EBCDIC.
On ASCII platforms, only characters that do not have the high-order
bit set (i.e. whose ordinals are strict ASCII, 0 - 127)
are invariant, and the documentation and comments in the code
may assume that,
often referring to something like, say, C<hibit>.
The situation differs and is not so simple on EBCDIC machines, but as long as
the code itself uses the C<NATIVE_IS_INVARIANT()> macro appropriately, it
works, even if the comments are wrong.
(TBT)

=item *

=begin original

Assuming the character set is just ASCII

=end original

Assuming the character set is just ASCII
(TBT)

=begin original

ASCII is a 7 bit encoding, but bytes have 8 bits in them.  The 128 extra
characters have different meanings depending on the locale.  Absent a locale,
currently these extra characters are generally considered to be unassigned,
and this has presented some problems.
This is scheduled to be changed in 5.12 so that these characters will
be considered to be Latin-1 (ISO-8859-1).

=end original

ASCII is a 7 bit encoding, but bytes have 8 bits in them.  The 128 extra
characters have different meanings depending on the locale.  Absent a locale,
currently these extra characters are generally considered to be unassigned,
and this has presented some problems.
This is scheduled to be changed in 5.12 so that these characters will
be considered to be Latin-1 (ISO-8859-1).
(TBT)

=item *

=begin original

Mixing #define and #ifdef

=end original

Mixing #define and #ifdef
(TBT)

  #define BURGLE(x) ... \
  #ifdef BURGLE_OLD_STYLE        /* BAD */
  ... do it the old way ... \
  #else
  ... do it the new way ... \
  #endif

=begin original

You cannot portably "stack" cpp directives.  For example in the above
you need two separate BURGLE() #defines, one for each #ifdef branch.

=end original

You cannot portably "stack" cpp directives.  For example in the above
you need two separate BURGLE() #defines, one for each #ifdef branch.
(TBT)

=item *

=begin original

Adding non-comment stuff after #endif or #else

=end original

Adding non-comment stuff after #endif or #else
(TBT)

  #ifdef SNOSH
  ...
  #else !SNOSH    /* BAD */
  ...
  #endif SNOSH    /* BAD */

=begin original

The #endif and #else cannot portably have anything non-comment after
them.  If you want to document what is going (which is a good idea
especially if the branches are long), use (C) comments:

=end original

The #endif and #else cannot portably have anything non-comment after
them.  If you want to document what is going (which is a good idea
especially if the branches are long), use (C) comments:
(TBT)

  #ifdef SNOSH
  ...
  #else /* !SNOSH */
  ...
  #endif /* SNOSH */

=begin original

The gcc option C<-Wendif-labels> warns about the bad variant
(by default on starting from Perl 5.9.4).

=end original

The gcc option C<-Wendif-labels> warns about the bad variant
(by default on starting from Perl 5.9.4).
(TBT)

=item *

=begin original

Having a comma after the last element of an enum list

=end original

Having a comma after the last element of an enum list
(TBT)

  enum color {
    CERULEAN,
    CHARTREUSE,
    CINNABAR,     /* BAD */
  };

=begin original

is not portable.  Leave out the last comma.

=end original

is not portable.  Leave out the last comma.
(TBT)

=begin original

Also note that whether enums are implicitly morphable to ints
varies between compilers, you might need to (int).

=end original

Also note that whether enums are implicitly morphable to ints
varies between compilers, you might need to (int).
(TBT)

=item *

=begin original

Using //-comments

=end original

Using //-comments
(TBT)

  // This function bamfoodles the zorklator.    /* BAD */

=begin original

That is C99 or C++.  Perl is C89.  Using the //-comments is silently
allowed by many C compilers but cranking up the ANSI C89 strictness
(which we like to do) causes the compilation to fail.

=end original

That is C99 or C++.  Perl is C89.  Using the //-comments is silently
allowed by many C compilers but cranking up the ANSI C89 strictness
(which we like to do) causes the compilation to fail.
(TBT)

=item *

=begin original

Mixing declarations and code

=end original

Mixing declarations and code
(TBT)

  void zorklator()
  {
    int n = 3;
    set_zorkmids(n);    /* BAD */
    int q = 4;

=begin original

That is C99 or C++.  Some C compilers allow that, but you shouldn't.

=end original

That is C99 or C++.  Some C compilers allow that, but you shouldn't.
(TBT)

=begin original

The gcc option C<-Wdeclaration-after-statements> scans for such problems
(by default on starting from Perl 5.9.4).

=end original

The gcc option C<-Wdeclaration-after-statements> scans for such problems
(by default on starting from Perl 5.9.4).
(TBT)

=item *

=begin original

Introducing variables inside for()

=end original

Introducing variables inside for()
(TBT)

  for(int i = ...; ...; ...) {    /* BAD */

=begin original

That is C99 or C++.  While it would indeed be awfully nice to have that
also in C89, to limit the scope of the loop variable, alas, we cannot.

=end original

That is C99 or C++.  While it would indeed be awfully nice to have that
also in C89, to limit the scope of the loop variable, alas, we cannot.
(TBT)

=item *

=begin original

Mixing signed char pointers with unsigned char pointers

=end original

Mixing signed char pointers with unsigned char pointers
(TBT)

  int foo(char *s) { ... }
  ...
  unsigned char *t = ...; /* Or U8* t = ... */
  foo(t);   /* BAD */

=begin original

While this is legal practice, it is certainly dubious, and downright
fatal in at least one platform: for example VMS cc considers this a
fatal error.  One cause for people often making this mistake is that a
"naked char" and therefore dereferencing a "naked char pointer" have
an undefined signedness: it depends on the compiler and the flags of
the compiler and the underlying platform whether the result is signed
or unsigned.  For this very same reason using a 'char' as an array
index is bad.

=end original

While this is legal practice, it is certainly dubious, and downright
fatal in at least one platform: for example VMS cc considers this a
fatal error.  One cause for people often making this mistake is that a
"naked char" and therefore dereferencing a "naked char pointer" have
an undefined signedness: it depends on the compiler and the flags of
the compiler and the underlying platform whether the result is signed
or unsigned.  For this very same reason using a 'char' as an array
index is bad.
(TBT)

=item *

=begin original

Macros that have string constants and their arguments as substrings of
the string constants

=end original

Macros that have string constants and their arguments as substrings of
the string constants
(TBT)

  #define FOO(n) printf("number = %d\n", n)    /* BAD */
  FOO(10);

=begin original

Pre-ANSI semantics for that was equivalent to

=end original

Pre-ANSI semantics for that was equivalent to
(TBT)

  printf("10umber = %d\10");

=begin original

which is probably not what you were expecting.  Unfortunately at least
one reasonably common and modern C compiler does "real backward
compatibility" here, in AIX that is what still happens even though the
rest of the AIX compiler is very happily C89.

=end original

which is probably not what you were expecting.  Unfortunately at least
one reasonably common and modern C compiler does "real backward
compatibility" here, in AIX that is what still happens even though the
rest of the AIX compiler is very happily C89.
(TBT)

=item *

=begin original

Using printf formats for non-basic C types

=end original

Using printf formats for non-basic C types
(TBT)

   IV i = ...;
   printf("i = %d\n", i);    /* BAD */

=begin original

While this might by accident work in some platform (where IV happens
to be an C<int>), in general it cannot.  IV might be something larger.
Even worse the situation is with more specific types (defined by Perl's
configuration step in F<config.h>):

=end original

While this might by accident work in some platform (where IV happens
to be an C<int>), in general it cannot.  IV might be something larger.
Even worse the situation is with more specific types (defined by Perl's
configuration step in F<config.h>):
(TBT)

   Uid_t who = ...;
   printf("who = %d\n", who);    /* BAD */

=begin original

The problem here is that Uid_t might be not only not C<int>-wide
but it might also be unsigned, in which case large uids would be
printed as negative values.

=end original

The problem here is that Uid_t might be not only not C<int>-wide
but it might also be unsigned, in which case large uids would be
printed as negative values.
(TBT)

=begin original

There is no simple solution to this because of printf()'s limited
intelligence, but for many types the right format is available as
with either 'f' or '_f' suffix, for example:

=end original

There is no simple solution to this because of printf()'s limited
intelligence, but for many types the right format is available as
with either 'f' or '_f' suffix, for example:
(TBT)

   IVdf /* IV in decimal */
   UVxf /* UV is hexadecimal */

   printf("i = %"IVdf"\n", i); /* The IVdf is a string constant. */

   Uid_t_f /* Uid_t in decimal */

   printf("who = %"Uid_t_f"\n", who);

=begin original

Or you can try casting to a "wide enough" type:

=end original

Or you can try casting to a "wide enough" type:
(TBT)

   printf("i = %"IVdf"\n", (IV)something_very_small_and_signed);

=begin original

Also remember that the C<%p> format really does require a void pointer:

=end original

Also remember that the C<%p> format really does require a void pointer:
(TBT)

   U8* p = ...;
   printf("p = %p\n", (void*)p);

=begin original

The gcc option C<-Wformat> scans for such problems.

=end original

The gcc option C<-Wformat> scans for such problems.
(TBT)

=item *

=begin original

Blindly using variadic macros

=end original

Blindly using variadic macros
(TBT)

=begin original

gcc has had them for a while with its own syntax, and C99 brought
them with a standardized syntax.  Don't use the former, and use
the latter only if the HAS_C99_VARIADIC_MACROS is defined.

=end original

gcc has had them for a while with its own syntax, and C99 brought
them with a standardized syntax.  Don't use the former, and use
the latter only if the HAS_C99_VARIADIC_MACROS is defined.
(TBT)

=item *

=begin original

Blindly passing va_list

=end original

Blindly passing va_list
(TBT)

=begin original

Not all platforms support passing va_list to further varargs (stdarg)
functions.  The right thing to do is to copy the va_list using the
Perl_va_copy() if the NEED_VA_COPY is defined.

=end original

Not all platforms support passing va_list to further varargs (stdarg)
functions.  The right thing to do is to copy the va_list using the
Perl_va_copy() if the NEED_VA_COPY is defined.
(TBT)

=item *

=begin original

Using gcc statement expressions

=end original

Using gcc statement expressions
(TBT)

   val = ({...;...;...});    /* BAD */

=begin original

While a nice extension, it's not portable.  The Perl code does
admittedly use them if available to gain some extra speed
(essentially as a funky form of inlining), but you shouldn't.

=end original

While a nice extension, it's not portable.  The Perl code does
admittedly use them if available to gain some extra speed
(essentially as a funky form of inlining), but you shouldn't.
(TBT)

=item *

=begin original

Binding together several statements in a macro

=end original

Binding together several statements in a macro
(TBT)

=begin original

Use the macros STMT_START and STMT_END.

=end original

Use the macros STMT_START and STMT_END.
(TBT)

   STMT_START {
      ...
   } STMT_END

=item *

=begin original

Testing for operating systems or versions when should be testing for features

=end original

Testing for operating systems or versions when should be testing for features
(TBT)

  #ifdef __FOONIX__    /* BAD */
  foo = quux();
  #endif

=begin original

Unless you know with 100% certainty that quux() is only ever available
for the "Foonix" operating system B<and> that is available B<and>
correctly working for B<all> past, present, B<and> future versions of
"Foonix", the above is very wrong.  This is more correct (though still
not perfect, because the below is a compile-time check):

=end original

Unless you know with 100% certainty that quux() is only ever available
for the "Foonix" operating system B<and> that is available B<and>
correctly working for B<all> past, present, B<and> future versions of
"Foonix", the above is very wrong.  This is more correct (though still
not perfect, because the below is a compile-time check):
(TBT)

  #ifdef HAS_QUUX
  foo = quux();
  #endif

=begin original

How does the HAS_QUUX become defined where it needs to be?  Well, if
Foonix happens to be UNIXy enough to be able to run the Configure
script, and Configure has been taught about detecting and testing
quux(), the HAS_QUUX will be correctly defined.  In other platforms,
the corresponding configuration step will hopefully do the same.

=end original

How does the HAS_QUUX become defined where it needs to be?  Well, if
Foonix happens to be UNIXy enough to be able to run the Configure
script, and Configure has been taught about detecting and testing
quux(), the HAS_QUUX will be correctly defined.  In other platforms,
the corresponding configuration step will hopefully do the same.
(TBT)

=begin original

In a pinch, if you cannot wait for Configure to be educated,
or if you have a good hunch of where quux() might be available,
you can temporarily try the following:

=end original

In a pinch, if you cannot wait for Configure to be educated,
or if you have a good hunch of where quux() might be available,
you can temporarily try the following:
(TBT)

  #if (defined(__FOONIX__) || defined(__BARNIX__))
  # define HAS_QUUX
  #endif

  ...

  #ifdef HAS_QUUX
  foo = quux();
  #endif

=begin original

But in any case, try to keep the features and operating systems separate.

=end original

But in any case, try to keep the features and operating systems separate.
(TBT)

=back

=head2 Problematic System Interfaces

(問題のあるシステムインターフェース)

=over 4

=item *

=begin original

malloc(0), realloc(0), calloc(0, 0) are non-portable.  To be portable
allocate at least one byte.  (In general you should rarely need to
work at this low level, but instead use the various malloc wrappers.)

=end original

malloc(0), realloc(0), calloc(0, 0) are non-portable.  To be portable
allocate at least one byte.  (In general you should rarely need to
work at this low level, but instead use the various malloc wrappers.)
(TBT)

=item *

=begin original

snprintf() - the return type is unportable.  Use my_snprintf() instead.

=end original

snprintf() - the return type is unportable.  Use my_snprintf() instead.
(TBT)

=back

=head2 Security problems

(セキュリティ問題)

=begin original

Last but not least, here are various tips for safer coding.

=end original

Last but not least, here are various tips for safer coding.
(TBT)

=over 4

=item *

=begin original

Do not use gets()

=end original

Do not use gets()
(TBT)

=begin original

Or we will publicly ridicule you.  Seriously.

=end original

Or we will publicly ridicule you.  Seriously.
(TBT)

=item *

=begin original

Do not use strcpy() or strcat() or strncpy() or strncat()

=end original

Do not use strcpy() or strcat() or strncpy() or strncat()
(TBT)

=begin original

Use my_strlcpy() and my_strlcat() instead: they either use the native
implementation, or Perl's own implementation (borrowed from the public
domain implementation of INN).

=end original

Use my_strlcpy() and my_strlcat() instead: they either use the native
implementation, or Perl's own implementation (borrowed from the public
domain implementation of INN).
(TBT)

=item *

=begin original

Do not use sprintf() or vsprintf()

=end original

Do not use sprintf() or vsprintf()
(TBT)

=begin original

If you really want just plain byte strings, use my_snprintf()
and my_vsnprintf() instead, which will try to use snprintf() and
vsnprintf() if those safer APIs are available.  If you want something
fancier than a plain byte string, use SVs and Perl_sv_catpvf().

=end original

If you really want just plain byte strings, use my_snprintf()
and my_vsnprintf() instead, which will try to use snprintf() and
vsnprintf() if those safer APIs are available.  If you want something
fancier than a plain byte string, use SVs and Perl_sv_catpvf().
(TBT)

=back

=head1 EXTERNAL TOOLS FOR DEBUGGING PERL

(Perl をデバッグするための外部ツール)

=begin original

Sometimes it helps to use external tools while debugging and
testing Perl.  This section tries to guide you through using
some common testing and debugging tools with Perl.  This is
meant as a guide to interfacing these tools with Perl, not
as any kind of guide to the use of the tools themselves.

=end original

Sometimes it helps to use external tools while debugging and
testing Perl.  This section tries to guide you through using
some common testing and debugging tools with Perl.  This is
meant as a guide to interfacing these tools with Perl, not
as any kind of guide to the use of the tools themselves.
(TBT)

=begin original

B<NOTE 1>: Running under memory debuggers such as Purify, valgrind, or
Third Degree greatly slows down the execution: seconds become minutes,
minutes become hours.  For example as of Perl 5.8.1, the
ext/Encode/t/Unicode.t takes extraordinarily long to complete under
e.g. Purify, Third Degree, and valgrind.  Under valgrind it takes more
than six hours, even on a snappy computer-- the said test must be
doing something that is quite unfriendly for memory debuggers.  If you
don't feel like waiting, that you can simply kill away the perl
process.

=end original

B<NOTE 1>: Running under memory debuggers such as Purify, valgrind, or
Third Degree greatly slows down the execution: seconds become minutes,
minutes become hours.  For example as of Perl 5.8.1, the
ext/Encode/t/Unicode.t takes extraordinarily long to complete under
e.g. Purify, Third Degree, and valgrind.  Under valgrind it takes more
than six hours, even on a snappy computer-- the said test must be
doing something that is quite unfriendly for memory debuggers.  If you
don't feel like waiting, that you can simply kill away the perl
process.
(TBT)

=begin original

B<NOTE 2>: To minimize the number of memory leak false alarms (see
L</PERL_DESTRUCT_LEVEL> for more information), you have to have
environment variable PERL_DESTRUCT_LEVEL set to 2.  The F<TEST>
and harness scripts do that automatically.  But if you are running
some of the tests manually-- for csh-like shells:

=end original

B<NOTE 2>: To minimize the number of memory leak false alarms (see
L</PERL_DESTRUCT_LEVEL> for more information), you have to have
environment variable PERL_DESTRUCT_LEVEL set to 2.  The F<TEST>
and harness scripts do that automatically.  But if you are running
some of the tests manually-- for csh-like shells:
(TBT)

    setenv PERL_DESTRUCT_LEVEL 2

=begin original

and for Bourne-type shells:

=end original

and for Bourne-type shells:
(TBT)

    PERL_DESTRUCT_LEVEL=2
    export PERL_DESTRUCT_LEVEL

=begin original

or in UNIXy environments you can also use the C<env> command:

=end original

or in UNIXy environments you can also use the C<env> command:
(TBT)

    env PERL_DESTRUCT_LEVEL=2 valgrind ./perl -Ilib ...

=begin original

B<NOTE 3>: There are known memory leaks when there are compile-time
errors within eval or require, seeing C<S_doeval> in the call stack
is a good sign of these.  Fixing these leaks is non-trivial,
unfortunately, but they must be fixed eventually.

=end original

B<NOTE 3>: There are known memory leaks when there are compile-time
errors within eval or require, seeing C<S_doeval> in the call stack
is a good sign of these.  Fixing these leaks is non-trivial,
unfortunately, but they must be fixed eventually.
(TBT)

=begin original

B<NOTE 4>: L<DynaLoader> will not clean up after itself completely
unless Perl is built with the Configure option
C<-Accflags=-DDL_UNLOAD_ALL_AT_EXIT>.

=end original

B<NOTE 4>: L<DynaLoader> will not clean up after itself completely
unless Perl is built with the Configure option
C<-Accflags=-DDL_UNLOAD_ALL_AT_EXIT>.
(TBT)

=head2 Rational Software's Purify

(Rational Software の Purify)

=begin original

Purify is a commercial tool that is helpful in identifying
memory overruns, wild pointers, memory leaks and other such
badness.  Perl must be compiled in a specific way for
optimal testing with Purify.  Purify is available under
Windows NT, Solaris, HP-UX, SGI, and Siemens Unix.

=end original

Purify is a commercial tool that is helpful in identifying
memory overruns, wild pointers, memory leaks and other such
badness.  Perl must be compiled in a specific way for
optimal testing with Purify.  Purify is available under
Windows NT, Solaris, HP-UX, SGI, and Siemens Unix.
(TBT)

=head2 Purify on Unix

(Unix での Purify)

=begin original

On Unix, Purify creates a new Perl binary.  To get the most
benefit out of Purify, you should create the perl to Purify
using:

=end original

On Unix, Purify creates a new Perl binary.  To get the most
benefit out of Purify, you should create the perl to Purify
using:
(TBT)

    sh Configure -Accflags=-DPURIFY -Doptimize='-g' \
     -Uusemymalloc -Dusemultiplicity

=begin original

where these arguments mean:

=end original

where these arguments mean:
(TBT)

=over 4

=item -Accflags=-DPURIFY

=begin original

Disables Perl's arena memory allocation functions, as well as
forcing use of memory allocation functions derived from the
system malloc.

=end original

Disables Perl's arena memory allocation functions, as well as
forcing use of memory allocation functions derived from the
system malloc.
(TBT)

=item -Doptimize='-g'

=begin original

Adds debugging information so that you see the exact source
statements where the problem occurs.  Without this flag, all
you will see is the source filename of where the error occurred.

=end original

Adds debugging information so that you see the exact source
statements where the problem occurs.  Without this flag, all
you will see is the source filename of where the error occurred.
(TBT)

=item -Uusemymalloc

=begin original

Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks.  Using Perl's malloc will make Purify
report most leaks in the "potential" leaks category.

=end original

Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks.  Using Perl's malloc will make Purify
report most leaks in the "potential" leaks category.
(TBT)

=item -Dusemultiplicity

=begin original

Enabling the multiplicity option allows perl to clean up
thoroughly when the interpreter shuts down, which reduces the
number of bogus leak reports from Purify.

=end original

Enabling the multiplicity option allows perl to clean up
thoroughly when the interpreter shuts down, which reduces the
number of bogus leak reports from Purify.
(TBT)

=back

=begin original

Once you've compiled a perl suitable for Purify'ing, then you
can just:

=end original

Once you've compiled a perl suitable for Purify'ing, then you
can just:
(TBT)

    make pureperl

=begin original

which creates a binary named 'pureperl' that has been Purify'ed.
This binary is used in place of the standard 'perl' binary
when you want to debug Perl memory problems.

=end original

which creates a binary named 'pureperl' that has been Purify'ed.
This binary is used in place of the standard 'perl' binary
when you want to debug Perl memory problems.
(TBT)

=begin original

As an example, to show any memory leaks produced during the
standard Perl testset you would create and run the Purify'ed
perl as:

=end original

As an example, to show any memory leaks produced during the
standard Perl testset you would create and run the Purify'ed
perl as:
(TBT)

    make pureperl
    cd t
    ../pureperl -I../lib harness

=begin original

which would run Perl on test.pl and report any memory problems.

=end original

which would run Perl on test.pl and report any memory problems.
(TBT)

=begin original

Purify outputs messages in "Viewer" windows by default.  If
you don't have a windowing environment or if you simply
want the Purify output to unobtrusively go to a log file
instead of to the interactive window, use these following
options to output to the log file "perl.log":

=end original

Purify outputs messages in "Viewer" windows by default.  If
you don't have a windowing environment or if you simply
want the Purify output to unobtrusively go to a log file
instead of to the interactive window, use these following
options to output to the log file "perl.log":
(TBT)

    setenv PURIFYOPTIONS "-chain-length=25 -windows=no \
     -log-file=perl.log -append-logfile=yes"

=begin original

If you plan to use the "Viewer" windows, then you only need this option:

=end original

If you plan to use the "Viewer" windows, then you only need this option:
(TBT)

    setenv PURIFYOPTIONS "-chain-length=25"

=begin original

In Bourne-type shells:

=end original

In Bourne-type shells:
(TBT)

    PURIFYOPTIONS="..."
    export PURIFYOPTIONS

=begin original

or if you have the "env" utility:

=end original

or if you have the "env" utility:
(TBT)

    env PURIFYOPTIONS="..." ../pureperl ...

=head2 Purify on NT

(NT での Purify)

=begin original

Purify on Windows NT instruments the Perl binary 'perl.exe'
on the fly.  There are several options in the makefile you
should change to get the most use out of Purify:

=end original

Purify on Windows NT instruments the Perl binary 'perl.exe'
on the fly.  There are several options in the makefile you
should change to get the most use out of Purify:
(TBT)

=over 4

=item DEFINES

=begin original

You should add -DPURIFY to the DEFINES line so the DEFINES
line looks something like:

=end original

You should add -DPURIFY to the DEFINES line so the DEFINES
line looks something like:
(TBT)

    DEFINES = -DWIN32 -D_CONSOLE -DNO_STRICT $(CRYPT_FLAG) -DPURIFY=1

=begin original

to disable Perl's arena memory allocation functions, as
well as to force use of memory allocation functions derived
from the system malloc.

=end original

to disable Perl's arena memory allocation functions, as
well as to force use of memory allocation functions derived
from the system malloc.
(TBT)

=item USE_MULTI = define

=begin original

Enabling the multiplicity option allows perl to clean up
thoroughly when the interpreter shuts down, which reduces the
number of bogus leak reports from Purify.

=end original

Enabling the multiplicity option allows perl to clean up
thoroughly when the interpreter shuts down, which reduces the
number of bogus leak reports from Purify.
(TBT)

=item #PERL_MALLOC = define

=begin original

Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks.  Using Perl's malloc will make Purify
report most leaks in the "potential" leaks category.

=end original

Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks.  Using Perl's malloc will make Purify
report most leaks in the "potential" leaks category.
(TBT)

=item CFG = Debug

=begin original

Adds debugging information so that you see the exact source
statements where the problem occurs.  Without this flag, all
you will see is the source filename of where the error occurred.

=end original

Adds debugging information so that you see the exact source
statements where the problem occurs.  Without this flag, all
you will see is the source filename of where the error occurred.
(TBT)

=back

=begin original

As an example, to show any memory leaks produced during the
standard Perl testset you would create and run Purify as:

=end original

As an example, to show any memory leaks produced during the
standard Perl testset you would create and run Purify as:
(TBT)

    cd win32
    make
    cd ../t
    purify ../perl -I../lib harness

=begin original

which would instrument Perl in memory, run Perl on test.pl,
then finally report any memory problems.

=end original

which would instrument Perl in memory, run Perl on test.pl,
then finally report any memory problems.
(TBT)

=head2 valgrind

=begin original

The excellent valgrind tool can be used to find out both memory leaks
and illegal memory accesses.  As of version 3.3.0, Valgrind only
supports Linux on x86, x86-64 and PowerPC.  The special "test.valgrind" 
target can be used to run the tests under valgrind.  Found errors 
and memory leaks are logged in files named F<testfile.valgrind>.

=end original

The excellent valgrind tool can be used to find out both memory leaks
and illegal memory accesses.  As of version 3.3.0, Valgrind only
supports Linux on x86, x86-64 and PowerPC.  The special "test.valgrind" 
target can be used to run the tests under valgrind.  Found errors 
and memory leaks are logged in files named F<testfile.valgrind>.
(TBT)

=begin original

Valgrind also provides a cachegrind tool, invoked on perl as:

=end original

Valgrind also provides a cachegrind tool, invoked on perl as:
(TBT)

    VG_OPTS=--tool=cachegrind make test.valgrind

=begin original

As system libraries (most notably glibc) are also triggering errors,
valgrind allows to suppress such errors using suppression files. The
default suppression file that comes with valgrind already catches a lot
of them. Some additional suppressions are defined in F<t/perl.supp>.

=end original

As system libraries (most notably glibc) are also triggering errors,
valgrind allows to suppress such errors using suppression files. The
default suppression file that comes with valgrind already catches a lot
of them. Some additional suppressions are defined in F<t/perl.supp>.
(TBT)

=begin original

To get valgrind and for more information see

=end original

To get valgrind and for more information see
(TBT)

    http://developer.kde.org/~sewardj/

=head2 Compaq's/Digital's/HP's Third Degree

(Compaq/Digital/HP の Third Degree)

=begin original

Third Degree is a tool for memory leak detection and memory access checks.
It is one of the many tools in the ATOM toolkit.  The toolkit is only
available on Tru64 (formerly known as Digital UNIX formerly known as
DEC OSF/1).

=end original

Third Degree is a tool for memory leak detection and memory access checks.
It is one of the many tools in the ATOM toolkit.  The toolkit is only
available on Tru64 (formerly known as Digital UNIX formerly known as
DEC OSF/1).
(TBT)

=begin original

When building Perl, you must first run Configure with -Doptimize=-g
and -Uusemymalloc flags, after that you can use the make targets
"perl.third" and "test.third".  (What is required is that Perl must be
compiled using the C<-g> flag, you may need to re-Configure.)

=end original

When building Perl, you must first run Configure with -Doptimize=-g
and -Uusemymalloc flags, after that you can use the make targets
"perl.third" and "test.third".  (What is required is that Perl must be
compiled using the C<-g> flag, you may need to re-Configure.)
(TBT)

=begin original

The short story is that with "atom" you can instrument the Perl
executable to create a new executable called F<perl.third>.  When the
instrumented executable is run, it creates a log of dubious memory
traffic in file called F<perl.3log>.  See the manual pages of atom and
third for more information.  The most extensive Third Degree
documentation is available in the Compaq "Tru64 UNIX Programmer's
Guide", chapter "Debugging Programs with Third Degree".

=end original

The short story is that with "atom" you can instrument the Perl
executable to create a new executable called F<perl.third>.  When the
instrumented executable is run, it creates a log of dubious memory
traffic in file called F<perl.3log>.  See the manual pages of atom and
third for more information.  The most extensive Third Degree
documentation is available in the Compaq "Tru64 UNIX Programmer's
Guide", chapter "Debugging Programs with Third Degree".
(TBT)

=begin original

The "test.third" leaves a lot of files named F<foo_bar.3log> in the t/
subdirectory.  There is a problem with these files: Third Degree is so
effective that it finds problems also in the system libraries.
Therefore you should used the Porting/thirdclean script to cleanup
the F<*.3log> files.

=end original

The "test.third" leaves a lot of files named F<foo_bar.3log> in the t/
subdirectory.  There is a problem with these files: Third Degree is so
effective that it finds problems also in the system libraries.
Therefore you should used the Porting/thirdclean script to cleanup
the F<*.3log> files.
(TBT)

=begin original

There are also leaks that for given certain definition of a leak,
aren't.  See L</PERL_DESTRUCT_LEVEL> for more information.

=end original

There are also leaks that for given certain definition of a leak,
aren't.  See L</PERL_DESTRUCT_LEVEL> for more information.
(TBT)

=head2 PERL_DESTRUCT_LEVEL

=begin original

If you want to run any of the tests yourself manually using e.g.
valgrind, or the pureperl or perl.third executables, please note that
by default perl B<does not> explicitly cleanup all the memory it has
allocated (such as global memory arenas) but instead lets the exit()
of the whole program "take care" of such allocations, also known as
"global destruction of objects".

=end original

If you want to run any of the tests yourself manually using e.g.
valgrind, or the pureperl or perl.third executables, please note that
by default perl B<does not> explicitly cleanup all the memory it has
allocated (such as global memory arenas) but instead lets the exit()
of the whole program "take care" of such allocations, also known as
"global destruction of objects".
(TBT)

=begin original

There is a way to tell perl to do complete cleanup: set the
environment variable PERL_DESTRUCT_LEVEL to a non-zero value.
The t/TEST wrapper does set this to 2, and this is what you
need to do too, if you don't want to see the "global leaks":
For example, for "third-degreed" Perl:

=end original

There is a way to tell perl to do complete cleanup: set the
environment variable PERL_DESTRUCT_LEVEL to a non-zero value.
The t/TEST wrapper does set this to 2, and this is what you
need to do too, if you don't want to see the "global leaks":
For example, for "third-degreed" Perl:
(TBT)

	env PERL_DESTRUCT_LEVEL=2 ./perl.third -Ilib t/foo/bar.t

=begin original

(Note: the mod_perl apache module uses also this environment variable
for its own purposes and extended its semantics. Refer to the mod_perl
documentation for more information. Also, spawned threads do the
equivalent of setting this variable to the value 1.)

=end original

(Note: the mod_perl apache module uses also this environment variable
for its own purposes and extended its semantics. Refer to the mod_perl
documentation for more information. Also, spawned threads do the
equivalent of setting this variable to the value 1.)
(TBT)

=begin original

If, at the end of a run you get the message I<N scalars leaked>, you can
recompile with C<-DDEBUG_LEAKING_SCALARS>, which will cause the addresses
of all those leaked SVs to be dumped along with details as to where each
SV was originally allocated. This information is also displayed by
Devel::Peek. Note that the extra details recorded with each SV increases
memory usage, so it shouldn't be used in production environments. It also
converts C<new_SV()> from a macro into a real function, so you can use
your favourite debugger to discover where those pesky SVs were allocated.

=end original

If, at the end of a run you get the message I<N scalars leaked>, you can
recompile with C<-DDEBUG_LEAKING_SCALARS>, which will cause the addresses
of all those leaked SVs to be dumped along with details as to where each
SV was originally allocated. This information is also displayed by
Devel::Peek. Note that the extra details recorded with each SV increases
memory usage, so it shouldn't be used in production environments. It also
converts C<new_SV()> from a macro into a real function, so you can use
your favourite debugger to discover where those pesky SVs were allocated.
(TBT)

=begin original

If you see that you're leaking memory at runtime, but neither valgrind
nor C<-DDEBUG_LEAKING_SCALARS> will find anything, you're probably
leaking SVs that are still reachable and will be properly cleaned up
during destruction of the interpreter. In such cases, using the C<-Dm>
switch can point you to the source of the leak. If the executable was
built with C<-DDEBUG_LEAKING_SCALARS>, C<-Dm> will output SV allocations
in addition to memory allocations. Each SV allocation has a distinct
serial number that will be written on creation and destruction of the SV. 
So if you're executing the leaking code in a loop, you need to look for
SVs that are created, but never destroyed between each cycle. If such an
SV is found, set a conditional breakpoint within C<new_SV()> and make it
break only when C<PL_sv_serial> is equal to the serial number of the
leaking SV. Then you will catch the interpreter in exactly the state
where the leaking SV is allocated, which is sufficient in many cases to
find the source of the leak.

=end original

If you see that you're leaking memory at runtime, but neither valgrind
nor C<-DDEBUG_LEAKING_SCALARS> will find anything, you're probably
leaking SVs that are still reachable and will be properly cleaned up
during destruction of the interpreter. In such cases, using the C<-Dm>
switch can point you to the source of the leak. If the executable was
built with C<-DDEBUG_LEAKING_SCALARS>, C<-Dm> will output SV allocations
in addition to memory allocations. Each SV allocation has a distinct
serial number that will be written on creation and destruction of the SV. 
So if you're executing the leaking code in a loop, you need to look for
SVs that are created, but never destroyed between each cycle. If such an
SV is found, set a conditional breakpoint within C<new_SV()> and make it
break only when C<PL_sv_serial> is equal to the serial number of the
leaking SV. Then you will catch the interpreter in exactly the state
where the leaking SV is allocated, which is sufficient in many cases to
find the source of the leak.
(TBT)

=begin original

As C<-Dm> is using the PerlIO layer for output, it will by itself
allocate quite a bunch of SVs, which are hidden to avoid recursion.
You can bypass the PerlIO layer if you use the SV logging provided
by C<-DPERL_MEM_LOG> instead.

=end original

As C<-Dm> is using the PerlIO layer for output, it will by itself
allocate quite a bunch of SVs, which are hidden to avoid recursion.
You can bypass the PerlIO layer if you use the SV logging provided
by C<-DPERL_MEM_LOG> instead.
(TBT)

=head2 PERL_MEM_LOG

=begin original

If compiled with C<-DPERL_MEM_LOG>, all Newx() and Renew() allocations
and Safefree() in the Perl core go through logging functions, which is
handy for breakpoint setting.  If also compiled with C<-DPERL_MEM_LOG_STDERR>,
the allocations and frees are logged to STDERR (or more precisely, to the
file descriptor 2) in these logging functions, with the calling source code
file and line number (and C function name, if supported by the C compiler).

=end original

If compiled with C<-DPERL_MEM_LOG>, all Newx() and Renew() allocations
and Safefree() in the Perl core go through logging functions, which is
handy for breakpoint setting.  If also compiled with C<-DPERL_MEM_LOG_STDERR>,
the allocations and frees are logged to STDERR (or more precisely, to the
file descriptor 2) in these logging functions, with the calling source code
file and line number (and C function name, if supported by the C compiler).
(TBT)

=begin original

This logging is somewhat similar to C<-Dm> but independent of C<-DDEBUGGING>,
and at a higher level (the C<-Dm> is directly at the point of C<malloc()>,
while the C<PERL_MEM_LOG> is at the level of C<New()>).

=end original

This logging is somewhat similar to C<-Dm> but independent of C<-DDEBUGGING>,
and at a higher level (the C<-Dm> is directly at the point of C<malloc()>,
while the C<PERL_MEM_LOG> is at the level of C<New()>).
(TBT)

=begin original

In addition to memory allocations, SV allocations will be logged, just as
with C<-Dm>. However, since the logging doesn't use PerlIO, all SV allocations
are logged and no extra SV allocations are introduced by enabling the logging.
If compiled with C<-DDEBUG_LEAKING_SCALARS>, the serial number for each SV
allocation is also logged.

=end original

In addition to memory allocations, SV allocations will be logged, just as
with C<-Dm>. However, since the logging doesn't use PerlIO, all SV allocations
are logged and no extra SV allocations are introduced by enabling the logging.
If compiled with C<-DDEBUG_LEAKING_SCALARS>, the serial number for each SV
allocation is also logged.
(TBT)

=begin original

You can control the logging from your environment if you compile with
C<-DPERL_MEM_LOG_ENV>. Then you need to explicitly set C<PERL_MEM_LOG> and/or
C<PERL_SV_LOG> to a non-zero value to enable logging of memory and/or SV
allocations.

=end original

You can control the logging from your environment if you compile with
C<-DPERL_MEM_LOG_ENV>. Then you need to explicitly set C<PERL_MEM_LOG> and/or
C<PERL_SV_LOG> to a non-zero value to enable logging of memory and/or SV
allocations.
(TBT)

=head2 Profiling

(プロファイリング)

=begin original

Depending on your platform there are various of profiling Perl.

=end original

Depending on your platform there are various of profiling Perl.
(TBT)

=begin original

There are two commonly used techniques of profiling executables:
I<statistical time-sampling> and I<basic-block counting>.

=end original

There are two commonly used techniques of profiling executables:
I<statistical time-sampling> and I<basic-block counting>.
(TBT)

=begin original

The first method takes periodically samples of the CPU program
counter, and since the program counter can be correlated with the code
generated for functions, we get a statistical view of in which
functions the program is spending its time.  The caveats are that very
small/fast functions have lower probability of showing up in the
profile, and that periodically interrupting the program (this is
usually done rather frequently, in the scale of milliseconds) imposes
an additional overhead that may skew the results.  The first problem
can be alleviated by running the code for longer (in general this is a
good idea for profiling), the second problem is usually kept in guard
by the profiling tools themselves.

=end original

The first method takes periodically samples of the CPU program
counter, and since the program counter can be correlated with the code
generated for functions, we get a statistical view of in which
functions the program is spending its time.  The caveats are that very
small/fast functions have lower probability of showing up in the
profile, and that periodically interrupting the program (this is
usually done rather frequently, in the scale of milliseconds) imposes
an additional overhead that may skew the results.  The first problem
can be alleviated by running the code for longer (in general this is a
good idea for profiling), the second problem is usually kept in guard
by the profiling tools themselves.
(TBT)

=begin original

The second method divides up the generated code into I<basic blocks>.
Basic blocks are sections of code that are entered only in the
beginning and exited only at the end.  For example, a conditional jump
starts a basic block.  Basic block profiling usually works by
I<instrumenting> the code by adding I<enter basic block #nnnn>
book-keeping code to the generated code.  During the execution of the
code the basic block counters are then updated appropriately.  The
caveat is that the added extra code can skew the results: again, the
profiling tools usually try to factor their own effects out of the
results.

=end original

The second method divides up the generated code into I<basic blocks>.
Basic blocks are sections of code that are entered only in the
beginning and exited only at the end.  For example, a conditional jump
starts a basic block.  Basic block profiling usually works by
I<instrumenting> the code by adding I<enter basic block #nnnn>
book-keeping code to the generated code.  During the execution of the
code the basic block counters are then updated appropriately.  The
caveat is that the added extra code can skew the results: again, the
profiling tools usually try to factor their own effects out of the
results.
(TBT)

=head2 Gprof Profiling

(Gprof によるプロファイリング)

=begin original

gprof is a profiling tool available in many UNIX platforms,
it uses F<statistical time-sampling>.

=end original

gprof is a profiling tool available in many UNIX platforms,
it uses F<statistical time-sampling>.
(TBT)

=begin original

You can build a profiled version of perl called "perl.gprof" by
invoking the make target "perl.gprof"  (What is required is that Perl
must be compiled using the C<-pg> flag, you may need to re-Configure).
Running the profiled version of Perl will create an output file called
F<gmon.out> is created which contains the profiling data collected
during the execution.

=end original

You can build a profiled version of perl called "perl.gprof" by
invoking the make target "perl.gprof"  (What is required is that Perl
must be compiled using the C<-pg> flag, you may need to re-Configure).
Running the profiled version of Perl will create an output file called
F<gmon.out> is created which contains the profiling data collected
during the execution.
(TBT)

=begin original

The gprof tool can then display the collected data in various ways.
Usually gprof understands the following options:

=end original

The gprof tool can then display the collected data in various ways.
Usually gprof understands the following options:
(TBT)

=over 4

=item -a

=begin original

Suppress statically defined functions from the profile.

=end original

Suppress statically defined functions from the profile.
(TBT)

=item -b

=begin original

Suppress the verbose descriptions in the profile.

=end original

Suppress the verbose descriptions in the profile.
(TBT)

=item -e routine

=begin original

Exclude the given routine and its descendants from the profile.

=end original

Exclude the given routine and its descendants from the profile.
(TBT)

=item -f routine

=begin original

Display only the given routine and its descendants in the profile.

=end original

Display only the given routine and its descendants in the profile.
(TBT)

=item -s

=begin original

Generate a summary file called F<gmon.sum> which then may be given
to subsequent gprof runs to accumulate data over several runs.

=end original

Generate a summary file called F<gmon.sum> which then may be given
to subsequent gprof runs to accumulate data over several runs.
(TBT)

=item -z

=begin original

Display routines that have zero usage.

=end original

Display routines that have zero usage.
(TBT)

=back

=begin original

For more detailed explanation of the available commands and output
formats, see your own local documentation of gprof.

=end original

For more detailed explanation of the available commands and output
formats, see your own local documentation of gprof.
(TBT)

=begin original

quick hint:

=end original

quick hint:
(TBT)

    $ sh Configure -des -Dusedevel -Doptimize='-g' -Accflags='-pg' -Aldflags='-pg' && make
    $ ./perl someprog # creates gmon.out in current directory
    $ gprof perl > out
    $ view out

=head2 GCC gcov Profiling

(GCC gcov によるプロファイリング)

=begin original

Starting from GCC 3.0 I<basic block profiling> is officially available
for the GNU CC.

=end original

Starting from GCC 3.0 I<basic block profiling> is officially available
for the GNU CC.
(TBT)

=begin original

You can build a profiled version of perl called F<perl.gcov> by
invoking the make target "perl.gcov" (what is required that Perl must
be compiled using gcc with the flags C<-fprofile-arcs
-ftest-coverage>, you may need to re-Configure).

=end original

You can build a profiled version of perl called F<perl.gcov> by
invoking the make target "perl.gcov" (what is required that Perl must
be compiled using gcc with the flags C<-fprofile-arcs
-ftest-coverage>, you may need to re-Configure).
(TBT)

=begin original

Running the profiled version of Perl will cause profile output to be
generated.  For each source file an accompanying ".da" file will be
created.

=end original

Running the profiled version of Perl will cause profile output to be
generated.  For each source file an accompanying ".da" file will be
created.
(TBT)

=begin original

To display the results you use the "gcov" utility (which should
be installed if you have gcc 3.0 or newer installed).  F<gcov> is
run on source code files, like this

=end original

To display the results you use the "gcov" utility (which should
be installed if you have gcc 3.0 or newer installed).  F<gcov> is
run on source code files, like this
(TBT)

    gcov sv.c

=begin original

which will cause F<sv.c.gcov> to be created.  The F<.gcov> files
contain the source code annotated with relative frequencies of
execution indicated by "#" markers.

=end original

which will cause F<sv.c.gcov> to be created.  The F<.gcov> files
contain the source code annotated with relative frequencies of
execution indicated by "#" markers.
(TBT)

=begin original

Useful options of F<gcov> include C<-b> which will summarise the
basic block, branch, and function call coverage, and C<-c> which
instead of relative frequencies will use the actual counts.  For
more information on the use of F<gcov> and basic block profiling
with gcc, see the latest GNU CC manual, as of GCC 3.0 see

=end original

Useful options of F<gcov> include C<-b> which will summarise the
basic block, branch, and function call coverage, and C<-c> which
instead of relative frequencies will use the actual counts.  For
more information on the use of F<gcov> and basic block profiling
with gcc, see the latest GNU CC manual, as of GCC 3.0 see
(TBT)

    http://gcc.gnu.org/onlinedocs/gcc-3.0/gcc.html

=begin original

and its section titled "8. gcov: a Test Coverage Program"

=end original

and its section titled "8. gcov: a Test Coverage Program"
(TBT)

    http://gcc.gnu.org/onlinedocs/gcc-3.0/gcc_8.html#SEC132

=begin original

quick hint:

=end original

quick hint:
(TBT)

    $ sh Configure -des  -Doptimize='-g' -Accflags='-fprofile-arcs -ftest-coverage' \
        -Aldflags='-fprofile-arcs -ftest-coverage' && make perl.gcov
    $ rm -f regexec.c.gcov regexec.gcda
    $ ./perl.gcov
    $ gcov regexec.c
    $ view regexec.c.gcov

=head2 Pixie Profiling

(Pixie によるプロファイリング)

=begin original

Pixie is a profiling tool available on IRIX and Tru64 (aka Digital
UNIX aka DEC OSF/1) platforms.  Pixie does its profiling using
I<basic-block counting>.

=end original

Pixie is a profiling tool available on IRIX and Tru64 (aka Digital
UNIX aka DEC OSF/1) platforms.  Pixie does its profiling using
I<basic-block counting>.
(TBT)

=begin original

You can build a profiled version of perl called F<perl.pixie> by
invoking the make target "perl.pixie" (what is required is that Perl
must be compiled using the C<-g> flag, you may need to re-Configure).

=end original

You can build a profiled version of perl called F<perl.pixie> by
invoking the make target "perl.pixie" (what is required is that Perl
must be compiled using the C<-g> flag, you may need to re-Configure).
(TBT)

=begin original

In Tru64 a file called F<perl.Addrs> will also be silently created,
this file contains the addresses of the basic blocks.  Running the
profiled version of Perl will create a new file called "perl.Counts"
which contains the counts for the basic block for that particular
program execution.

=end original

In Tru64 a file called F<perl.Addrs> will also be silently created,
this file contains the addresses of the basic blocks.  Running the
profiled version of Perl will create a new file called "perl.Counts"
which contains the counts for the basic block for that particular
program execution.
(TBT)

=begin original

To display the results you use the F<prof> utility.  The exact
incantation depends on your operating system, "prof perl.Counts" in
IRIX, and "prof -pixie -all -L. perl" in Tru64.

=end original

To display the results you use the F<prof> utility.  The exact
incantation depends on your operating system, "prof perl.Counts" in
IRIX, and "prof -pixie -all -L. perl" in Tru64.
(TBT)

=begin original

In IRIX the following prof options are available:

=end original

In IRIX the following prof options are available:
(TBT)

=over 4

=item -h

=begin original

Reports the most heavily used lines in descending order of use.
Useful for finding the hotspot lines.

=end original

Reports the most heavily used lines in descending order of use.
Useful for finding the hotspot lines.
(TBT)

=item -l

=begin original

Groups lines by procedure, with procedures sorted in descending order of use.
Within a procedure, lines are listed in source order.
Useful for finding the hotspots of procedures.

=end original

Groups lines by procedure, with procedures sorted in descending order of use.
Within a procedure, lines are listed in source order.
Useful for finding the hotspots of procedures.
(TBT)

=back

=begin original

In Tru64 the following options are available:

=end original

In Tru64 the following options are available:
(TBT)

=over 4

=item -p[rocedures]

=begin original

Procedures sorted in descending order by the number of cycles executed
in each procedure.  Useful for finding the hotspot procedures.
(This is the default option.)

=end original

Procedures sorted in descending order by the number of cycles executed
in each procedure.  Useful for finding the hotspot procedures.
(This is the default option.)
(TBT)

=item -h[eavy]

=begin original

Lines sorted in descending order by the number of cycles executed in
each line.  Useful for finding the hotspot lines.

=end original

Lines sorted in descending order by the number of cycles executed in
each line.  Useful for finding the hotspot lines.
(TBT)

=item -i[nvocations]

=begin original

The called procedures are sorted in descending order by number of calls
made to the procedures.  Useful for finding the most used procedures.

=end original

The called procedures are sorted in descending order by number of calls
made to the procedures.  Useful for finding the most used procedures.
(TBT)

=item -l[ines]

=begin original

Grouped by procedure, sorted by cycles executed per procedure.
Useful for finding the hotspots of procedures.

=end original

Grouped by procedure, sorted by cycles executed per procedure.
Useful for finding the hotspots of procedures.
(TBT)

=item -testcoverage

=begin original

The compiler emitted code for these lines, but the code was unexecuted.

=end original

The compiler emitted code for these lines, but the code was unexecuted.
(TBT)

=item -z[ero]

=begin original

Unexecuted procedures.

=end original

Unexecuted procedures.
(TBT)

=back

=begin original

For further information, see your system's manual pages for pixie and prof.

=end original

For further information, see your system's manual pages for pixie and prof.
(TBT)

=head2 Miscellaneous tricks

(様々な小技)

=over 4

=item *

=begin original

Those debugging perl with the DDD frontend over gdb may find the
following useful:

=end original

Those debugging perl with the DDD frontend over gdb may find the
following useful:
(TBT)

=begin original

You can extend the data conversion shortcuts menu, so for example you
can display an SV's IV value with one click, without doing any typing.
To do that simply edit ~/.ddd/init file and add after:

=end original

You can extend the data conversion shortcuts menu, so for example you
can display an SV's IV value with one click, without doing any typing.
To do that simply edit ~/.ddd/init file and add after:
(TBT)

  ! Display shortcuts.
  Ddd*gdbDisplayShortcuts: \
  /t ()   // Convert to Bin\n\
  /d ()   // Convert to Dec\n\
  /x ()   // Convert to Hex\n\
  /o ()   // Convert to Oct(\n\

=begin original

the following two lines:

=end original

the following two lines:
(TBT)

  ((XPV*) (())->sv_any )->xpv_pv  // 2pvx\n\
  ((XPVIV*) (())->sv_any )->xiv_iv // 2ivx

=begin original

so now you can do ivx and pvx lookups or you can plug there the
sv_peek "conversion":

=end original

so now you can do ivx and pvx lookups or you can plug there the
sv_peek "conversion":
(TBT)

  Perl_sv_peek(my_perl, (SV*)()) // sv_peek

=begin original

(The my_perl is for threaded builds.)
Just remember that every line, but the last one, should end with \n\

=end original

(The my_perl is for threaded builds.)
Just remember that every line, but the last one, should end with \n\
(TBT)

=begin original

Alternatively edit the init file interactively via:
3rd mouse button -> New Display -> Edit Menu

=end original

Alternatively edit the init file interactively via:
3rd mouse button -> New Display -> Edit Menu
(TBT)

=begin original

Note: you can define up to 20 conversion shortcuts in the gdb
section.

=end original

Note: you can define up to 20 conversion shortcuts in the gdb
section.
(TBT)

=item *

=begin original

If you see in a debugger a memory area mysteriously full of 0xABABABAB
or 0xEFEFEFEF, you may be seeing the effect of the Poison() macros,
see L<perlclib>.

=end original

If you see in a debugger a memory area mysteriously full of 0xABABABAB
or 0xEFEFEFEF, you may be seeing the effect of the Poison() macros,
see L<perlclib>.
(TBT)

=item *

=begin original

Under ithreads the optree is read only. If you want to enforce this, to check
for write accesses from buggy code, compile with C<-DPL_OP_SLAB_ALLOC> to
enable the OP slab allocator and C<-DPERL_DEBUG_READONLY_OPS> to enable code
that allocates op memory via C<mmap>, and sets it read-only at run time.
Any write access to an op results in a C<SIGBUS> and abort.

=end original

Under ithreads the optree is read only. If you want to enforce this, to check
for write accesses from buggy code, compile with C<-DPL_OP_SLAB_ALLOC> to
enable the OP slab allocator and C<-DPERL_DEBUG_READONLY_OPS> to enable code
that allocates op memory via C<mmap>, and sets it read-only at run time.
Any write access to an op results in a C<SIGBUS> and abort.
(TBT)

=begin original

This code is intended for development only, and may not be portable even to
all Unix variants. Also, it is an 80% solution, in that it isn't able to make
all ops read only. Specifically it

=end original

This code is intended for development only, and may not be portable even to
all Unix variants. Also, it is an 80% solution, in that it isn't able to make
all ops read only. Specifically it
(TBT)

=over

=item 1

=begin original

Only sets read-only on all slabs of ops at C<CHECK> time, hence ops allocated
later via C<require> or C<eval> will be re-write

=end original

Only sets read-only on all slabs of ops at C<CHECK> time, hence ops allocated
later via C<require> or C<eval> will be re-write
(TBT)

=item 2

=begin original

Turns an entire slab of ops read-write if the refcount of any op in the slab
needs to be decreased.

=end original

Turns an entire slab of ops read-write if the refcount of any op in the slab
needs to be decreased.
(TBT)

=item 3

=begin original

Turns an entire slab of ops read-write if any op from the slab is freed.

=end original

Turns an entire slab of ops read-write if any op from the slab is freed.
(TBT)

=back

=begin original

It's not possible to turn the slabs to read-only after an action requiring
read-write access, as either can happen during op tree building time, so
there may still be legitimate write access.

=end original

It's not possible to turn the slabs to read-only after an action requiring
read-write access, as either can happen during op tree building time, so
there may still be legitimate write access.
(TBT)

=begin original

However, as an 80% solution it is still effective, as currently it catches
a write access during the generation of F<Config.pm>, which means that we
can't yet build F<perl> with this enabled.

=end original

However, as an 80% solution it is still effective, as currently it catches
a write access during the generation of F<Config.pm>, which means that we
can't yet build F<perl> with this enabled.
(TBT)

=back

=head1 CONCLUSION

(結び)

=begin original

We've had a brief look around the Perl source, how to maintain quality
of the source code, an overview of the stages F<perl> goes through
when it's running your code, how to use debuggers to poke at the Perl
guts, and finally how to analyse the execution of Perl. We took a very
simple problem and demonstrated how to solve it fully - with
documentation, regression tests, and finally a patch for submission to
p5p.  Finally, we talked about how to use external tools to debug and
test Perl.

=end original

We've had a brief look around the Perl source, how to maintain quality
of the source code, an overview of the stages F<perl> goes through
when it's running your code, how to use debuggers to poke at the Perl
guts, and finally how to analyse the execution of Perl. We took a very
simple problem and demonstrated how to solve it fully - with
documentation, regression tests, and finally a patch for submission to
p5p.  Finally, we talked about how to use external tools to debug and
test Perl.
(TBT)

=begin original

I'd now suggest you read over those references again, and then, as soon
as possible, get your hands dirty. The best way to learn is by doing,
so:

=end original

これらのリファレンスをもう一度読み通して、それから、できるだけ早く、
手を汚すことを提案します。
学ぶための最良の方法はやってみることです; 従って:

=over 3

=item *

=begin original

Subscribe to perl5-porters, follow the patches and try and understand
them; don't be afraid to ask if there's a portion you're not clear on -
who knows, you may unearth a bug in the patch...

=end original

perl5-porters を購読して、パッチを追いかけ、試してみて理解します;
はっきりしない部分を訊ねるのを恐れないでください - あなたがパッチのバグを
掘り出すかも知れないことを知っています…

=item *

=begin original

Keep up to date with the bleeding edge Perl distributions and get
familiar with the changes. Try and get an idea of what areas people are
working on and the changes they're making.

=end original

Perl 配布の最新を追いかけ続けて、変更に慣れ親しみます。
どの分野で人々が作業していて変更が行われているかを理解しようとします。

=item *

=begin original

Do read the README associated with your operating system, e.g. README.aix
on the IBM AIX OS. Don't hesitate to supply patches to that README if
you find anything missing or changed over a new OS release.

=end original

オペレーティングシステムに関連づけられた README (例えば IBM AIX OS なら
README.aix) を読みます。
新しい OS のリリースで抜けていたり変更されていることに気付いたら、
その README へのパッチを提供することを遠慮しないでください。

=item *

=begin original

Find an area of Perl that seems interesting to you, and see if you can
work out how it works. Scan through the source, and step over it in the
debugger. Play, poke, investigate, fiddle! You'll probably get to
understand not just your chosen area but a much wider range of F<perl>'s
activity as well, and probably sooner than you'd think.

=end original

自分にとって興味深いと思われる Perl の分野を見つけて、作業をすると
どのように動作するかを見ます。
ソースをスキャンして、デバッガでステップ実行します。
遊んでつついて調べていじります!
おそらく、選んだ分野だけではなく、F<perl> のもっと広い範囲の動作も
理解する必要があって、それはおそらくあなたが考えているより早いでしょう。

=back

=over 3

=item I<The Road goes ever on and on, down from the door where it began.>

(I<道はつづくよ、先へ先へと、戸口より出て、遠くへつづく。>)

=back

=begin original

If you can do these things, you've started on the long road to Perl porting.
Thanks for wanting to help make Perl better - and happy hacking!

=end original

これらのことができれば、Perl porting への長い道の開始です。
Perl をよりよくする助けをしようとしてくれてありがとう - そして happy hacking!

=head2 Metaphoric Quotations

(比喩的な引用)

=begin original

If you recognized the quote about the Road above, you're in luck.

=end original

上述の道に関する引用に気付いたなら、運があります。

=begin original

Most software projects begin each file with a literal description of each
file's purpose.  Perl instead begins each with a literary allusion to that
file's purpose.

=end original

ほとんどのソフトウェアプロジェクトでは、それぞれのファイルは、ファイルの
目的の文字通りの説明で始まります。
Perl はそうではなく、ファイルの目的の文学的な言及で始まります。

=begin original

Like chapters in many books, all top-level Perl source files (along with a
few others here and there) begin with an epigramic inscription that alludes,
indirectly and metaphorically, to the material you're about to read.

=end original

多くの本の章のように、トップレベル  (およびあちこちにあるいくつかの)
Perl ソースファイルは、今から読もうとしているものへの暗示的、間接的、
隠喩的な警句的碑文で始まります。

=begin original

Quotations are taken from writings of J.R.R Tolkien pertaining to his
Legendarium, almost always from I<The Lord of the Rings>.  Chapters and
page numbers are given using the following editions:

=end original

引用は J.R.R Tolkien の著作とそれに付随する世界から取られます; ほとんど常に
I<The Lord of the Rings> (指輪物語) からです。
章と頁番号は以下の版から取られています:

=over 4

=item * 

=begin original

I<The Hobbit>, by J.R.R. Tolkien.  The hardcover, 70th-anniversary
edition of 2007 was used, published in the UK by Harper Collins Publishers
and in the US by the Houghton Mifflin Company.

=end original

J.R.R. Tolkien による I<The Hobbit> (ホビットの冒険)。
イギリスでは Harper Collins Publishers から、アメリカでは the Houghton
Mifflin Company から出版された、2007 年の 70 周年記念ハードカバー版が
使われています。

=item *

=begin original

I<The Lord of the Rings>, by J.R.R. Tolkien.  The hardcover,
50th-anniversary edition of 2004 was used, published in the UK by Harper
Collins Publishers and in the US by the Houghton Mifflin Company.

=end original

J.R.R. Tolkien による I<The Lord of the Rings> (指輪物語)。
イギリスでは Harper Collins Publishers から、アメリカでは the Houghton
Mifflin Company から出版された、2004 年の 50 周年記念ハードカバー版が
使われています。

=item *

=begin original

I<The Lays of Beleriand>, by J.R.R. Tolkien and published posthumously by his
son and literary executor, C.J.R. Tolkien, being the 3rd of the 12 volumes
in Christopher's mammoth I<History of Middle Earth>.  Page numbers derive
from the hardcover edition, first published in 1983 by George Allen &
Unwin; no page numbers changed for the special 3-volume omnibus edition of
2002 or the various trade-paper editions, all again now by Harper Collins
or Houghton Mifflin.

=end original

J.R.R. Tolkien による I<The Lays of Beleriand>; 死後、息子であり
遺著管理者である C.J.R. Tolkien によって出版された 12 巻からなる巨大な
I<History of Middle Earth> の第 3 巻。
頁番号は George Allen & Unwin から 1983 年に出版されたハードカバー版に
依っています; Harper Collins や Houghton Mifflin による、2002 年の特別 3 巻
オムニバス版や様々な trade-paper 版でも頁番号は変わっていません。

=back

=begin original

Other JRRT books fair game for quotes would thus include I<The Adventures of
Tom Bombadil>, I<The Silmarillion>, I<Unfinished Tales>, and I<The Tale of
the Children of Hurin>, all but the first posthumously assembled by CJRT.
But I<The Lord of the Rings> itself is perfectly fine and probably best to
quote from, provided you can find a suitable quote there.

=end original

その他の JRRT の本である I<The Adventures of Tom Bombadil>
(トム・ボンバディルの冒険)、I<The Silmarillion>(シルマリルの物語)、
I<Unfinished Tales>(終わらざりし物語)、
I<The Tale of the Children of Hurin> も引用の元となります (最初のもの以外は
死後 CJRT によって編纂されたものです)。
しかし、適切な引用が見つけられるなら、I<The Lord of the Rings> は引用元として
完全によく、おそらく最良のものです。

=begin original

So if you were to supply a new, complete, top-level source file to add to
Perl, you should conform to this peculiar practice by yourself selecting an
appropriate quotation from Tolkien, retaining the original spelling and
punctuation and using the same format the rest of the quotes are in.
Indirect and oblique is just fine; remember, it's a metaphor, so being meta
is, after all, what it's for.

=end original

それで、Perl に追加するための新しくて完全なトップレベルソースファイルを
提供しようとしているなら、Tolkien から適切な引用を自分で選択して、
元の綴りと句読点を残して他の引用と同じ形式を使うという、特有の慣例に
従うべきです。
間接的で遠回しでもかまいません; これはメタファーであり、メタであると
いうことは、結局、ためにするものであるということを忘れないでください。

=head1 AUTHOR

=begin original

This document was written by Nathan Torkington, and is maintained by
the perl5-porters mailing list.

=end original

この文書は Nathan Torkington によって書かれ、perl5-porters メーリングリストで
管理されています。

=head1 SEE ALSO

L<perlrepository>

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>
Status: in progress

=end meta

