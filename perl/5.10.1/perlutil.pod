
=encoding euc-jp

=head1 NAME

=begin original

perlutil - utilities packaged with the Perl distribution

=end original

perlutil - Perl 配布と共にパッケージされているユーティリティ

=head1 DESCRIPTION

=begin original

Along with the Perl interpreter itself, the Perl distribution installs a
range of utilities on your system. There are also several utilities
which are used by the Perl distribution itself as part of the install
process. This document exists to list all of these utilities, explain
what they are for and provide pointers to each module's documentation,
if appropriate.

=end original

Perl 配布は、Perl インタプリタ自身と共に、様々なユーティリティをシステムに
インストールします。
また、Perl 配布自身がインストール処理の一部として使うユーティリティも
あります。
この文書はこれらのユーティリティの一覧を示し、何をするものかを説明し、
もしあればかくもジュールの文書へのポインタを提供するために存在しています。

=head1 LIST OF UTILITIES

(ユーティリティの一覧)

=head2 Documentation

(文書)

=over 3

=item L<perldoc|perldoc>

=begin original

The main interface to Perl's documentation is C<perldoc>, although
if you're reading this, it's more than likely that you've already found
it. F<perldoc> will extract and format the documentation from any file
in the current directory, any Perl module installed on the system, or
any of the standard documentation pages, such as this one. Use 
C<perldoc E<lt>nameE<gt>> to get information on any of the utilities
described in this document.

=end original

Perl 文書のメインのインターフェースは C<perldoc> ですが、これを読めていると
いうことは、おそらくこれをすでに発見していることでしょう。
F<perldoc> will extract and format the documentation from any file
in the current directory, any Perl module installed on the system, or
any of the standard documentation pages, such as this one. Use 
C<perldoc E<lt>nameE<gt>> to get information on any of the utilities
described in this document.
(TBT)

=item L<pod2man|pod2man> and L<pod2text|pod2text>

=begin original

If it's run from a terminal, F<perldoc> will usually call F<pod2man> to
translate POD (Plain Old Documentation - see L<perlpod> for an
explanation) into a manpage, and then run F<man> to display it; if
F<man> isn't available, F<pod2text> will be used instead and the output
piped through your favourite pager.

=end original

端末から実行すると、F<perldoc> は普通は POD (Plain Old Documentation -
説明については L<perlpod> を参照) を man ページに変換するのに
F<pod2man> を使い、それからこれを表示するために F<man> を使います;
もし F<man> が利用できない場合は、代わりに F<pod2text> が使われて出力は
好みのページャにパイプされます。

=item L<pod2html|pod2html> and L<pod2latex|pod2latex>

=begin original

As well as these two, there are two other converters: F<pod2html> will
produce HTML pages from POD, and F<pod2latex>, which produces LaTeX
files.

=end original

上述の二つと共に、もう二つのコンバータがあります: F<pod2html> は
POD から HTML ページを生成し、F<pod2latex> は LaTeX ファイルを
生成します。

=item L<pod2usage|pod2usage>

=begin original

If you just want to know how to use the utilities described here,
F<pod2usage> will just extract the "USAGE" section; some of
the utilities will automatically call F<pod2usage> on themselves when
you call them with C<-help>.

=end original

If you just want to know how to use the utilities described here,
F<pod2usage> will just extract the "USAGE" section; some of
the utilities will automatically call F<pod2usage> on themselves when
you call them with C<-help>.
(TBT)

=item L<podselect|podselect>

=begin original

F<pod2usage> is a special case of F<podselect>, a utility to extract
named sections from documents written in POD. For instance, while
utilities have "USAGE" sections, Perl modules usually have "SYNOPSIS"
sections: C<podselect -s "SYNOPSIS" ...> will extract this section for
a given file.

=end original

F<pod2usage> is a special case of F<podselect>, a utility to extract
named sections from documents written in POD. For instance, while
utilities have "USAGE" sections, Perl modules usually have "SYNOPSIS"
sections: C<podselect -s "SYNOPSIS" ...> will extract this section for
a given file.
(TBT)

=item L<podchecker|podchecker>

=begin original

If you're writing your own documentation in POD, the F<podchecker>
utility will look for errors in your markup.

=end original

If you're writing your own documentation in POD, the F<podchecker>
utility will look for errors in your markup.
(TBT)

=item L<splain|splain>

=begin original

F<splain> is an interface to L<perldiag> - paste in your error message
to it, and it'll explain it for you.

=end original

F<splain> is an interface to L<perldiag> - paste in your error message
to it, and it'll explain it for you.
(TBT)

=item L<roffitall|roffitall>

=begin original

The C<roffitall> utility is not installed on your system but lives in
the F<pod/> directory of your Perl source kit; it converts all the
documentation from the distribution to F<*roff> format, and produces a
typeset PostScript or text file of the whole lot.

=end original

The C<roffitall> utility is not installed on your system but lives in
the F<pod/> directory of your Perl source kit; it converts all the
documentation from the distribution to F<*roff> format, and produces a
typeset PostScript or text file of the whole lot.
(TBT)

=back

=head2 Convertors

(コンバータ)

=begin original

To help you convert legacy programs to Perl, we've included three
conversion filters:

=end original

To help you convert legacy programs to Perl, we've included three
conversion filters:
(TBT)

=over 3

=item L<a2p|a2p>

=begin original

F<a2p> converts F<awk> scripts to Perl programs; for example, C<a2p -F:>
on the simple F<awk> script C<{print $2}> will produce a Perl program
based around this code:

=end original

F<a2p> converts F<awk> scripts to Perl programs; for example, C<a2p -F:>
on the simple F<awk> script C<{print $2}> will produce a Perl program
based around this code:
(TBT)

    while (<>) {
        ($Fld1,$Fld2) = split(/[:\n]/, $_, 9999);
        print $Fld2;
    }

=item L<s2p|s2p> and L<psed>

=begin original

Similarly, F<s2p> converts F<sed> scripts to Perl programs. F<s2p> run
on C<s/foo/bar> will produce a Perl program based around this:

=end original

Similarly, F<s2p> converts F<sed> scripts to Perl programs. F<s2p> run
on C<s/foo/bar> will produce a Perl program based around this:
(TBT)

    while (<>) {
        chomp;
        s/foo/bar/g;
        print if $printit;
    }

=begin original

When invoked as F<psed>, it behaves as a F<sed> implementation, written in
Perl.

=end original

When invoked as F<psed>, it behaves as a F<sed> implementation, written in
Perl.
(TBT)

=item L<find2perl|find2perl>

=begin original

Finally, F<find2perl> translates C<find> commands to Perl equivalents which 
use the L<File::Find|File::Find> module. As an example, 
C<find2perl . -user root -perm 4000 -print> produces the following callback
subroutine for C<File::Find>:

=end original

Finally, F<find2perl> translates C<find> commands to Perl equivalents which 
use the L<File::Find|File::Find> module. As an example, 
C<find2perl . -user root -perm 4000 -print> produces the following callback
subroutine for C<File::Find>:
(TBT)

    sub wanted {
        my ($dev,$ino,$mode,$nlink,$uid,$gid);
        (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
        $uid == $uid{'root'}) &&
        (($mode & 0777) == 04000);
        print("$name\n");
    }

=back

=begin original

As well as these filters for converting other languages, the
L<pl2pm|pl2pm> utility will help you convert old-style Perl 4 libraries to 
new-style Perl5 modules.

=end original

As well as these filters for converting other languages, the
L<pl2pm|pl2pm> utility will help you convert old-style Perl 4 libraries to 
new-style Perl5 modules.
(TBT)

=head2 Administration

(管理)

=over 3

=item L<config_data|config_data>

=begin original

Query or change configuration of Perl modules that use Module::Build-based
configuration files for features and config data.

=end original

Query or change configuration of Perl modules that use Module::Build-based
configuration files for features and config data.
(TBT)

=item L<libnetcfg|libnetcfg>

=begin original

To display and change the libnet configuration run the libnetcfg command.

=end original

To display and change the libnet configuration run the libnetcfg command.
(TBT)

=item L<perlivp>

=begin original

The F<perlivp> program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running C<make
install> (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.

=end original

The F<perlivp> program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running C<make
install> (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.
(TBT)

=back

=head2 Development

(開発)

=begin original

There are a set of utilities which help you in developing Perl programs, 
and in particular, extending Perl with C.

=end original

There are a set of utilities which help you in developing Perl programs, 
and in particular, extending Perl with C.
(TBT)

=over 3

=item L<perlbug|perlbug>

=begin original

F<perlbug> is the recommended way to report bugs in the perl interpreter
itself or any of the standard library modules back to the developers;
please read through the documentation for F<perlbug> thoroughly before
using it to submit a bug report.

=end original

F<perlbug> is the recommended way to report bugs in the perl interpreter
itself or any of the standard library modules back to the developers;
please read through the documentation for F<perlbug> thoroughly before
using it to submit a bug report.
(TBT)

=item L<perlthanks|perlthanks>

=begin original

This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just F<perlbug> installed under
another name.

=end original

This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just F<perlbug> installed under
another name.
(TBT)

=item L<h2ph|h2ph>

=begin original

Back before Perl had the XS system for connecting with C libraries,
programmers used to get library constants by reading through the C
header files. You may still see C<require 'syscall.ph'> or similar
around - the F<.ph> file should be created by running F<h2ph> on the
corresponding F<.h> file. See the F<h2ph> documentation for more on how
to convert a whole bunch of header files at once.

=end original

Back before Perl had the XS system for connecting with C libraries,
programmers used to get library constants by reading through the C
header files. You may still see C<require 'syscall.ph'> or similar
around - the F<.ph> file should be created by running F<h2ph> on the
corresponding F<.h> file. See the F<h2ph> documentation for more on how
to convert a whole bunch of header files at once.
(TBT)

=item L<c2ph|c2ph> and L<pstruct|pstruct>

=begin original

F<c2ph> and F<pstruct>, which are actually the same program but behave
differently depending on how they are called, provide another way of
getting at C with Perl - they'll convert C structures and union declarations
to Perl code. This is deprecated in favour of F<h2xs> these days.

=end original

F<c2ph> and F<pstruct>, which are actually the same program but behave
differently depending on how they are called, provide another way of
getting at C with Perl - they'll convert C structures and union declarations
to Perl code. This is deprecated in favour of F<h2xs> these days.
(TBT)

=item L<h2xs|h2xs>

=begin original

F<h2xs> converts C header files into XS modules, and will try and write
as much glue between C libraries and Perl modules as it can. It's also
very useful for creating skeletons of pure Perl modules.

=end original

F<h2xs> converts C header files into XS modules, and will try and write
as much glue between C libraries and Perl modules as it can. It's also
very useful for creating skeletons of pure Perl modules.
(TBT)

=item L<enc2xs>

=begin original

F<enc2xs> builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use F<enc2xs> to add your own encoding to perl.
No knowledge of XS is necessary.

=end original

F<enc2xs> builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use F<enc2xs> to add your own encoding to perl.
No knowledge of XS is necessary.
(TBT)

=item L<xsubpp>

=begin original

F<xsubpp> is a compiler to convert Perl XS code into C code.
It is typically run by the makefiles created by L<ExtUtils::MakeMaker>.

=end original

F<xsubpp> is a compiler to convert Perl XS code into C code.
It is typically run by the makefiles created by L<ExtUtils::MakeMaker>.
(TBT)

=begin original

F<xsubpp> will compile XS code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.

=end original

F<xsubpp> will compile XS code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.
(TBT)

=item L<dprofpp|dprofpp>

=begin original

Perl comes with a profiler, the F<Devel::DProf> module. The
F<dprofpp> utility analyzes the output of this profiler and tells you
which subroutines are taking up the most run time. See L<Devel::DProf>
for more information.

=end original

Perl comes with a profiler, the F<Devel::DProf> module. The
F<dprofpp> utility analyzes the output of this profiler and tells you
which subroutines are taking up the most run time. See L<Devel::DProf>
for more information.
(TBT)

=item L<prove>

=begin original

F<prove> is a command-line interface to the test-running functionality of
of F<Test::Harness>.  It's an alternative to C<make test>.

=end original

F<prove> is a command-line interface to the test-running functionality of
of F<Test::Harness>.  It's an alternative to C<make test>.
(TBT)

=item L<corelist>

=begin original

A command-line front-end to C<Module::CoreList>, to query what modules
were shipped with given versions of perl.

=end original

A command-line front-end to C<Module::CoreList>, to query what modules
were shipped with given versions of perl.
(TBT)

=back

=head2 General tools

(一般的なツール)

=begin original

A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.

=end original

A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.
(TBT)

=over 3

=item L<piconv>

=begin original

B<piconv> is a Perl version of B<iconv>, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl 5.8.0, but you can use piconv in the
place of iconv for virtually any case.

=end original

B<piconv> is a Perl version of B<iconv>, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl 5.8.0, but you can use piconv in the
place of iconv for virtually any case.
(TBT)

=item L<ptar>

=begin original

F<ptar> is a tar-like program, written in pure Perl.

=end original

F<ptar> is a tar-like program, written in pure Perl.
(TBT)

=item L<ptardiff>

=begin original

F<ptardiff> is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
C<Text::Diff> module to function properly; this module isn't distributed
with perl, but is available from the CPAN.)

=end original

F<ptardiff> is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
C<Text::Diff> module to function properly; this module isn't distributed
with perl, but is available from the CPAN.)
(TBT)

=item L<shasum>

=begin original

This utility, that comes with the C<Digest::SHA> module, is used to print
or verify SHA checksums.

=end original

This utility, that comes with the C<Digest::SHA> module, is used to print
or verify SHA checksums.
(TBT)

=back

=head2 Installation

(インストール)

=begin original

These utilities help manage extra Perl modules that don't come with the perl
distribution.

=end original

These utilities help manage extra Perl modules that don't come with the perl
distribution.
(TBT)

=over 3

=item L<cpan>

=begin original

F<cpan> is a command-line interface to CPAN.pm.  It allows you to install
modules or distributions from CPAN, or just get information about them, and
a lot more.  It is similar to the command line mode of the L<CPAN> module,

=end original

F<cpan> is a command-line interface to CPAN.pm.  It allows you to install
modules or distributions from CPAN, or just get information about them, and
a lot more.  It is similar to the command line mode of the L<CPAN> module,
(TBT)

    perl -MCPAN -e shell

=item L<cpanp>

=begin original

F<cpanp> is, like F<cpan>, a command-line interface to the CPAN, using
the C<CPANPLUS> module as a back-end. It can be used interactively or
imperatively.

=end original

F<cpanp> is, like F<cpan>, a command-line interface to the CPAN, using
the C<CPANPLUS> module as a back-end. It can be used interactively or
imperatively.
(TBT)

=item L<cpan2dist>

=begin original

F<cpan2dist> is a tool to create distributions (or packages) from CPAN
modules, then suitable for your package manager of choice. Support for
specific formats are available from CPAN as C<CPANPLUS::Dist::*> modules.

=end original

F<cpan2dist> is a tool to create distributions (or packages) from CPAN
modules, then suitable for your package manager of choice. Support for
specific formats are available from CPAN as C<CPANPLUS::Dist::*> modules.
(TBT)

=item L<instmodsh>

=begin original

A little interface to ExtUtils::Installed to examine installed modules,
validate your packlists and even create a tarball from an installed module.

=end original

A little interface to ExtUtils::Installed to examine installed modules,
validate your packlists and even create a tarball from an installed module.
(TBT)

=back

=head1 SEE ALSO

L<perldoc|perldoc>, L<pod2man|pod2man>, L<perlpod>,
L<pod2html|pod2html>, L<pod2usage|pod2usage>, L<podselect|podselect>,
L<podchecker|podchecker>, L<splain|splain>, L<perldiag>,
L<roffitall|roffitall>, L<a2p|a2p>, L<s2p|s2p>, L<find2perl|find2perl>,
L<File::Find|File::Find>, L<pl2pm|pl2pm>, L<perlbug|perlbug>,
L<h2ph|h2ph>, L<c2ph|c2ph>, L<h2xs|h2xs>, L<dprofpp|dprofpp>,
L<Devel::DProf>, L<enc2xs>, L<xsubpp>, L<cpan>, L<cpanp>, L<cpan2dist>,
L<instmodsh>, L<piconv>, L<prove>, L<corelist>, L<ptar>, L<ptardiff>,
L<shasum>

=cut
