
=encoding euc-jp

=head1 NAME

=begin original

perlport - Writing portable Perl

=end original

perlport - 移植性のある Perl を書く

=head1 DESCRIPTION

=begin original

Perl runs on numerous operating systems.  While most of them share
much in common, they also have their own unique features.

=end original

Perl は多くのオペレーティングシステム上で動作します。
これらのほとんどは一般的にかなりの部分を共有していますが、
それぞれ固有の機能も持っています。

=begin original

This document is meant to help you to find out what constitutes portable
Perl code.  That way once you make a decision to write portably,
you know where the lines are drawn, and you can stay within them.

=end original

この文書は移植性のある Perl コードの構成要素を発見する助けになるための
ものです。
移植性のある形で書こうと決心したら、どこに線が引かれているかを知ることで、
その内側に留まることができます。

=begin original

There is a tradeoff between taking full advantage of one particular
type of computer and taking advantage of a full range of them.
Naturally, as you broaden your range and become more diverse, the
common factors drop, and you are left with an increasingly smaller
area of common ground in which you can operate to accomplish a
particular task.  Thus, when you begin attacking a problem, it is
important to consider under which part of the tradeoff curve you
want to operate.  Specifically, you must decide whether it is
important that the task that you are coding have the full generality
of being portable, or whether to just get the job done right now.
This is the hardest choice to be made.  The rest is easy, because
Perl provides many choices, whichever way you want to approach your
problem.

=end original

ある特定の種類のコンピュータの利点を使うことと、あらゆる範囲の
コンピュータの利点を使うことの間にはトレードオフがあります。
当然ながら、より範囲を広げてより多様性のある形にすると、共通の要素が
減っていき、特定のタスクを達成するために操作できる共通の地盤が徐々に
小さくなっていきます。
従って、問題に取りかかるときに、トレードオフのカーブのどの部分を
使うかを考えることは重要です。
特に、コーディングしようとするタスクが移植性に関して完全な一般性が
重要かどうか、またすぐにジョブを終わらせるかどうかを
決定しなければなりません。
残りのことは簡単です; なぜならあなたが問題にどのようにアプローチしたいと
しても Perl は多くの選択肢を提供するからです。

=begin original

Looking at it another way, writing portable code is usually about
willfully limiting your available choices.  Naturally, it takes
discipline and sacrifice to do that.  The product of portability
and convenience may be a constant.  You have been warned.

=end original

これを他の方法で見てみると、移植性のあるコードをかくことは通常あなたが
取り得る選択肢を故意に制限します。
当然ながら、これは規律と犠牲が伴います。
おそらく移植性と利便性の積は一定です。
あなたは警告されましたよ。

=begin original

Be aware of two important points:

=end original

二つの重要な点に注意してください:

=over 4

=item Not all Perl programs have to be portable

(全ての Perl プログラムが移植性がある必要はありません)

=begin original

There is no reason you should not use Perl as a language to glue Unix
tools together, or to prototype a Macintosh application, or to manage the
Windows registry.  If it makes no sense to aim for portability for one
reason or another in a given program, then don't bother.

=end original

Unix ツールを互いにくっつけたり、Macintosh アプリケーションのプロトタイプを
作ったり、Windows レジストリを操作するための言語として Perl を
使うべきではないという理由はありません。
プログラムにとって何らかの理由で移植性を目標とすることが無意味なら、
気にしないでください。

=item Nearly all of Perl already I<is> portable

(ほとんど全ての Perl は既に移植性が I<あります>)

=begin original

Don't be fooled into thinking that it is hard to create portable Perl
code.  It isn't.  Perl tries its level-best to bridge the gaps between
what's available on different platforms, and all the means available to
use those features.  Thus almost all Perl code runs on any machine
without modification.  But there are some significant issues in
writing portable code, and this document is entirely about those issues.

=end original

移植性のある Perl コードを作るのが難しいという考えに騙されないでください。
そうではありません。
Perl は、異なったプラットフォームで何が利用可能かとこの機能を使うために
利用可能なもの全てとの間のずれを出来るだけ橋渡ししようとします。
従って、ほとんど全ての Perl コードは修正なしにどのマシンでも動作します。
しかし移植性のあるコードを書くにはいくつかの重要な問題があり、この文書は
全体的にそのような問題を扱っています。

=back

=begin original

Here's the general rule: When you approach a task commonly done
using a whole range of platforms, think about writing portable
code.  That way, you don't sacrifice much by way of the implementation
choices you can avail yourself of, and at the same time you can give
your users lots of platform choices.  On the other hand, when you have to
take advantage of some unique feature of a particular platform, as is
often the case with systems programming (whether for Unix, Windows,
S<Mac OS>, VMS, etc.), consider writing platform-specific code.

=end original

一般的なルールを挙げます: プラットフォーム全体で使われて一般的に
処理されるようなタスクに迫るとき、移植性のあるコードを書くことを
考えてください。
その方向で、自分自身の実装の選択肢を多く犠牲にすることはなく、
同時にユーザーに多くのプラットフォームの選択肢を与えることができます。
一方、特定のプラットフォームで固有の機能の利点を使う必要がある場合、
例えば (Unix, Windows, S<Mac OS>, VMS など専用の) システムプログラムのような
場合、プラットフォーム固有のコードを書くことを考えてください。

=begin original

When the code will run on only two or three operating systems, you
may need to consider only the differences of those particular systems.
The important thing is to decide where the code will run and to be
deliberate in your decision.

=end original

コードが二つか三つのオペレーティングシステムでだけ動作するときは、
それらの特定のシステムでの違いのみを考慮する必要があります。
重要なことは、どこでコードを実行するかと、決定を熟考することです。

=begin original

The material below is separated into three main sections: main issues of
portability (L<"ISSUES">), platform-specific issues (L<"PLATFORMS">), and
built-in perl functions that behave differently on various ports
(L<"FUNCTION IMPLEMENTATIONS">).

=end original

以下の材料は三つの主な章に分割されています:  主な移植性の問題
(L<"ISSUES">)、プラットフォーム固有の問題 (L<"PLATFORMS">)、
OS によって異なった振る舞いをする perl 組み込み関数
(L<"FUNCTION IMPLEMENTATIONS">) です。

=begin original

This information should not be considered complete; it includes possibly
transient information about idiosyncrasies of some of the ports, almost
all of which are in a state of constant evolution.  Thus, this material
should be considered a perpetual work in progress
(C<< <IMG SRC="yellow_sign.gif" ALT="Under Construction"> >>).

=end original

この情報は完全であると考えるべきではありません; これは一部の OS に対する
特異性に関するおそらく一時的な情報を含んでいて、それらのほとんどは常に
進化しているものです。
従って、この材料は永遠に作業中であると考えるべきです
(C<< <IMG SRC="yellow_sign.gif" ALT="Under Construction"> >>)。

=head1 ISSUES

(問題)

=head2 Newlines

(改行)

=begin original

In most operating systems, lines in files are terminated by newlines.
Just what is used as a newline may vary from OS to OS.  Unix
traditionally uses C<\012>, one type of DOSish I/O uses C<\015\012>,
and S<Mac OS> uses C<\015>.

=end original

ほとんどのオペレーティングシステムで、ファイルの行は改行で終端されます。
単に改行として何を使うかが OS によって異なります。
Unix は伝統的に C<\012> を使い、DOS 風の I/O は C<\015\012> を使い、
S<Mac OS> は C<\015> を使います。

=begin original

Perl uses C<\n> to represent the "logical" newline, where what is
logical may depend on the platform in use.  In MacPerl, C<\n> always
means C<\015>.  In DOSish perls, C<\n> usually means C<\012>, but
when accessing a file in "text" mode, STDIO translates it to (or
from) C<\015\012>, depending on whether you're reading or writing.
Unix does the same thing on ttys in canonical mode.  C<\015\012>
is commonly referred to as CRLF.

=end original

Perl は「論理的な」改行を表現するのに C<\n> を使います; 何が論理的かは
使っているプラットフォームに依存しています。
MacPerl では C<\n> は常に C<\015> を意味します。
DOS 風の perl では、C<\n> は普通 C<\012> を意味しますが、ファイルを
「テキスト」モードでアクセスすると、STDIO は C<\015\012> との間で
変換します。
Unix はカノニカルモードの tty で同じことをします。
C<\015\012> は一般的には CRLF として参照されます。

=begin original

To trim trailing newlines from text lines use chomp().  With default 
settings that function looks for a trailing C<\n> character and thus 
trims in a portable way.

=end original

テキスト行から末尾の改行を切り落とすには、chomp() を使います。
この関数のデフォルト設定は末尾の C<\n> 文字を探すので、移植性のある形で
切り落とします。

=begin original

When dealing with binary files (or text files in binary mode) be sure
to explicitly set $/ to the appropriate value for your file format
before using chomp().

=end original

バイナリファイル (またはバイナリモードでのテキストファイル) を扱うときには、
chomp() を使う前にファイル形式に適切な値を $/ に明示的に設定してください。

=begin original

Because of the "text" mode translation, DOSish perls have limitations
in using C<seek> and C<tell> on a file accessed in "text" mode.
Stick to C<seek>-ing to locations you got from C<tell> (and no
others), and you are usually free to use C<seek> and C<tell> even
in "text" mode.  Using C<seek> or C<tell> or other file operations
may be non-portable.  If you use C<binmode> on a file, however, you
can usually C<seek> and C<tell> with arbitrary values in safety.

=end original

「テキスト」モード変換によって、DOS 的な perl は「テキスト」モードで
アクセスするファイルに対する C<seek> と C<tell> の使用に制限があります。
Stick to C<seek>-ing to locations you got from 
C<tell> で得た位置へ C<seek> する(そして他の方法を使わない)ことに
専念することで、「テキスト」モードでも自由に C<seek> と C<tell> を
使えます。
C<seek> や C<tell> やその他のファイル操作は互換性がないかもしれません。
しかし、ファイルに対して C<binmode> を使うと、普通は
任意の値を C<seek> と C<tell> に使っても安全です。

=begin original

A common misconception in socket programming is that C<\n> eq C<\012>
everywhere.  When using protocols such as common Internet protocols,
C<\012> and C<\015> are called for specifically, and the values of
the logical C<\n> and C<\r> (carriage return) are not reliable.

=end original

ソケットプログラミングでのよくある誤解は、C<\n> はどこでも C<\012> に
等しいということです。
一般的なインターネットプロトコルのようなプロトコルを使うとき、
C<\012> と C<\015> は明確に記述されていて、論理的な
C<\n> と C<\r> (復帰) の値は信頼できません。

    print SOCKET "Hi there, client!\r\n";      # WRONG
    print SOCKET "Hi there, client!\015\012";  # RIGHT

=begin original

However, using C<\015\012> (or C<\cM\cJ>, or C<\x0D\x0A>) can be tedious
and unsightly, as well as confusing to those maintaining the code.  As
such, the Socket module supplies the Right Thing for those who want it.

=end original

しかし、C<\015\012> (または C<\cM\cJ> または C<\x0D\x0A>) を使うのは
退屈で見苦しいかもしれませんし、コードの保守に混乱するかもしれません。
そのようなものとして、Socket モジュールは求められていることに対する
正しいものを供給します。

    use Socket qw(:DEFAULT :crlf);
    print SOCKET "Hi there, client!$CRLF"      # RIGHT

=begin original

When reading from a socket, remember that the default input record
separator C<$/> is C<\n>, but robust socket code will recognize as
either C<\012> or C<\015\012> as end of line:

=end original

ソケットから読み込むとき、デフォルト入力レコード区切り C<$/> は
C<\n> だけれども、堅牢なソケットコードは C<\012> と C<\015\012> の
どちらも行の末尾として認識することを忘れないでください:

    while (<SOCKET>) {
        # ...
    }

=begin original

Because both CRLF and LF end in LF, the input record separator can
be set to LF and any CR stripped later.  Better to write:

=end original

CRLF と LF は両方とも LF で終わっているので、入力レコード区切りを
LF に設定して、後から CR を削除できます。
よりよく書くと:

    use Socket qw(:DEFAULT :crlf);
    local($/) = LF;      # not needed if $/ is already \012

    while (<SOCKET>) {
        s/$CR?$LF/\n/;   # not sure if socket uses LF or CRLF, OK
    #   s/\015?\012/\n/; # same thing
    }

=begin original

This example is preferred over the previous one--even for Unix
platforms--because now any C<\015>'s (C<\cM>'s) are stripped out
(and there was much rejoicing).

=end original

This example is preferred over the previous one--even for Unix
platforms--because now any C<\015>'s (C<\cM>'s) are stripped out
(and there was much rejoicing).
(TBT)

=begin original

Similarly, functions that return text data--such as a function that
fetches a web page--should sometimes translate newlines before
returning the data, if they've not yet been translated to the local
newline representation.  A single line of code will often suffice:

=end original

Similarly, functions that return text data--such as a function that
fetches a web page--should sometimes translate newlines before
returning the data, if they've not yet been translated to the local
newline representation.  A single line of code will often suffice:
(TBT)

    $data =~ s/\015?\012/\n/g;
    return $data;

=begin original

Some of this may be confusing.  Here's a handy reference to the ASCII CR
and LF characters.  You can print it out and stick it in your wallet.

=end original

Some of this may be confusing.  Here's a handy reference to the ASCII CR
and LF characters.  You can print it out and stick it in your wallet.
(TBT)

    LF  eq  \012  eq  \x0A  eq  \cJ  eq  chr(10)  eq  ASCII 10
    CR  eq  \015  eq  \x0D  eq  \cM  eq  chr(13)  eq  ASCII 13

             | Unix | DOS  | Mac  |
        ---------------------------
        \n   |  LF  |  LF  |  CR  |
        \r   |  CR  |  CR  |  LF  |
        \n * |  LF  | CRLF |  CR  |
        \r * |  CR  |  CR  |  LF  |
        ---------------------------
        * text-mode STDIO

=begin original

The Unix column assumes that you are not accessing a serial line
(like a tty) in canonical mode.  If you are, then CR on input becomes
"\n", and "\n" on output becomes CRLF.

=end original

The Unix column assumes that you are not accessing a serial line
(like a tty) in canonical mode.  If you are, then CR on input becomes
"\n", and "\n" on output becomes CRLF.
(TBT)

=begin original

These are just the most common definitions of C<\n> and C<\r> in Perl.
There may well be others.  For example, on an EBCDIC implementation
such as z/OS (OS/390) or OS/400 (using the ILE, the PASE is ASCII-based)
the above material is similar to "Unix" but the code numbers change:

=end original

These are just the most common definitions of C<\n> and C<\r> in Perl.
There may well be others.  For example, on an EBCDIC implementation
such as z/OS (OS/390) or OS/400 (using the ILE, the PASE is ASCII-based)
the above material is similar to "Unix" but the code numbers change:
(TBT)

    LF  eq  \025  eq  \x15  eq  \cU  eq  chr(21)  eq  CP-1047 21
    LF  eq  \045  eq  \x25  eq           chr(37)  eq  CP-0037 37
    CR  eq  \015  eq  \x0D  eq  \cM  eq  chr(13)  eq  CP-1047 13
    CR  eq  \015  eq  \x0D  eq  \cM  eq  chr(13)  eq  CP-0037 13

             | z/OS | OS/400 |
        ----------------------
        \n   |  LF  |  LF    |
        \r   |  CR  |  CR    |
        \n * |  LF  |  LF    |
        \r * |  CR  |  CR    |
        ----------------------
        * text-mode STDIO

=head2 Numbers endianness and Width

(数値のエンディアンと幅)

=begin original

Different CPUs store integers and floating point numbers in different
orders (called I<endianness>) and widths (32-bit and 64-bit being the
most common today).  This affects your programs when they attempt to transfer
numbers in binary format from one CPU architecture to another,
usually either "live" via network connection, or by storing the
numbers to secondary storage such as a disk file or tape.

=end original

CPU が異なると、整数と浮動小数点数の順序 (I<エンディアン> (endianness) と
呼ばれます) と幅 (最近ではほとんど 32 ビットと 64 ビットです) が異なります。
これは、ある CPU アーキテクチャから他のものへ数値をバイナリ形式で、
普通はネットワーク接続経由で「ライブ」で、またはディスクファイルや
テープのような二次ストレージに保管することで移そうとしたときに
影響します。

=begin original

Conflicting storage orders make utter mess out of the numbers.  If a
little-endian host (Intel, VAX) stores 0x12345678 (305419896 in
decimal), a big-endian host (Motorola, Sparc, PA) reads it as
0x78563412 (2018915346 in decimal).  Alpha and MIPS can be either:
Digital/Compaq used/uses them in little-endian mode; SGI/Cray uses
them in big-endian mode.  To avoid this problem in network (socket)
connections use the C<pack> and C<unpack> formats C<n> and C<N>, the
"network" orders.  These are guaranteed to be portable.

=end original

Conflicting storage orders make utter mess out of the numbers.  If a
little-endian host (Intel, VAX) stores 0x12345678 (305419896 in
decimal), a big-endian host (Motorola, Sparc, PA) reads it as
0x78563412 (2018915346 in decimal).  Alpha and MIPS can be either:
Digital/Compaq used/uses them in little-endian mode; SGI/Cray uses
them in big-endian mode.  To avoid this problem in network (socket)
connections use the C<pack> and C<unpack> formats C<n> and C<N>, the
"network" orders.  These are guaranteed to be portable.
(TBT)

=begin original

As of perl 5.9.2, you can also use the C<E<gt>> and C<E<lt>> modifiers
to force big- or little-endian byte-order.  This is useful if you want
to store signed integers or 64-bit integers, for example.

=end original

As of perl 5.9.2, you can also use the C<E<gt>> and C<E<lt>> modifiers
to force big- or little-endian byte-order.  This is useful if you want
to store signed integers or 64-bit integers, for example.
(TBT)

=begin original

You can explore the endianness of your platform by unpacking a
data structure packed in native format such as:

=end original

You can explore the endianness of your platform by unpacking a
data structure packed in native format such as:
(TBT)

    print unpack("h*", pack("s2", 1, 2)), "\n";
    # '10002000' on e.g. Intel x86 or Alpha 21064 in little-endian mode
    # '00100020' on e.g. Motorola 68040

=begin original

If you need to distinguish between endian architectures you could use
either of the variables set like so:

=end original

If you need to distinguish between endian architectures you could use
either of the variables set like so:
(TBT)

    $is_big_endian   = unpack("h*", pack("s", 1)) =~ /01/;
    $is_little_endian = unpack("h*", pack("s", 1)) =~ /^1/;

=begin original

Differing widths can cause truncation even between platforms of equal
endianness.  The platform of shorter width loses the upper parts of the
number.  There is no good solution for this problem except to avoid
transferring or storing raw binary numbers.

=end original

Differing widths can cause truncation even between platforms of equal
endianness.  The platform of shorter width loses the upper parts of the
number.  There is no good solution for this problem except to avoid
transferring or storing raw binary numbers.
(TBT)

=begin original

One can circumnavigate both these problems in two ways.  Either
transfer and store numbers always in text format, instead of raw
binary, or else consider using modules like Data::Dumper (included in
the standard distribution as of Perl 5.005) and Storable (included as
of perl 5.8).  Keeping all data as text significantly simplifies matters.

=end original

One can circumnavigate both these problems in two ways.  Either
transfer and store numbers always in text format, instead of raw
binary, or else consider using modules like Data::Dumper (included in
the standard distribution as of Perl 5.005) and Storable (included as
of perl 5.8).  Keeping all data as text significantly simplifies matters.
(TBT)

=begin original

The v-strings are portable only up to v2147483647 (0x7FFFFFFF), that's
how far EBCDIC, or more precisely UTF-EBCDIC will go.

=end original

The v-strings are portable only up to v2147483647 (0x7FFFFFFF), that's
how far EBCDIC, or more precisely UTF-EBCDIC will go.
(TBT)

=head2 Files and Filesystems

(ファイルとファイルシステム)

=begin original

Most platforms these days structure files in a hierarchical fashion.
So, it is reasonably safe to assume that all platforms support the
notion of a "path" to uniquely identify a file on the system.  How
that path is really written, though, differs considerably.

=end original

最近のほとんどのプラットフォームではファイルの構造は階層的です。
従って、全てのプラットフォームがシステム中のファイルをユニークに
識別するための「パス」記法に対応していると仮定することは
合理的に安全です。
パスが実際にどのように書かれるかはかなり異なります。

=begin original

Although similar, file path specifications differ between Unix,
Windows, S<Mac OS>, OS/2, VMS, VOS, S<RISC OS>, and probably others.
Unix, for example, is one of the few OSes that has the elegant idea
of a single root directory.

=end original

似てはいるものの、ファイルパスの指定方法は Unix,
Windows, S<Mac OS>, OS/2, VMS, VOS, S<RISC OS> そしておそらくその他で
異なります。
例えば、Unix は一つのルートディレクトリというエレガントな考え方を持つ
数少ない OS の一つです。

=begin original

DOS, OS/2, VMS, VOS, and Windows can work similarly to Unix with C</>
as path separator, or in their own idiosyncratic ways (such as having
several root directories and various "unrooted" device files such NIL:
and LPT:).

=end original

DOS, OS/2, VMS, VOS, Windows は C</> をパス区切りとして、
(複数のルートディレクトリや、NIL: や LPT: のような様々な
「ルートでない」デバイスファイルといった)
独自の風変わりな方法で Unix と似たように動作します。

=begin original

S<Mac OS> uses C<:> as a path separator instead of C</>.

=end original

S<Mac OS> はパス区切りに C</> ではなく C<:> を使います。

=begin original

The filesystem may support neither hard links (C<link>) nor
symbolic links (C<symlink>, C<readlink>, C<lstat>).

=end original

ファイルシステムはハードリンク (C<link>) やシンボリックリンク (C<symlink>,
C<readlink>, C<lstat>) に対応していないかもしれません。

=begin original

The filesystem may support neither access timestamp nor change
timestamp (meaning that about the only portable timestamp is the
modification timestamp), or one second granularity of any timestamps
(e.g. the FAT filesystem limits the time granularity to two seconds).

=end original

ファイルシステムはアクセスタイムスタンプや変更タイムスタンプに
対応していないかもしれません (つまり移植性のあるタイムスタンプは
変更タイムスタンプだけです); またタイムスタンプは 1 秒単位では
ないかもしれません (例えば、FAT ファイルシステムは時刻の単位は
2 秒単位です)。

=begin original

The "inode change timestamp" (the C<-C> filetest) may really be the
"creation timestamp" (which it is not in UNIX).

=end original

「inode 変更タイムスタンプ」 (C<-C> ファイルテスト) は (UNIX 以外では)
実際には「作成タイムスタンプ」かもしれません。

=begin original

VOS perl can emulate Unix filenames with C</> as path separator.  The
native pathname characters greater-than, less-than, number-sign, and
percent-sign are always accepted.

=end original

VOS perl は C</> をパス区切りとして Unix ファイル名をエミュレートできます。
ネイティブなパス名文字である大なり、小なり、シャープ、パーセントは
常に受け入れられます。

=begin original

S<RISC OS> perl can emulate Unix filenames with C</> as path
separator, or go native and use C<.> for path separator and C<:> to
signal filesystems and disk names.

=end original

S<RISC OS> perl は C</> をパス区切りとして Unix ファイル名をエミュレート
するか、ネイティブのままで C<.> をパス区切り、C<:> をファイルシステムと
ディスクの名前として使えます。

=begin original

Don't assume UNIX filesystem access semantics: that read, write,
and execute are all the permissions there are, and even if they exist,
that their semantics (for example what do r, w, and x mean on
a directory) are the UNIX ones.  The various UNIX/POSIX compatibility
layers usually try to make interfaces like chmod() work, but sometimes
there simply is no good mapping.

=end original

UNIX のファイルシステムアクセスの意味を仮定しないで下さい: 読み込み、
書き込み、実行のどれもです; たとえあったとしても、その意味論
(例えばディレクトリに対して r, w, x が何をするか) は UNIX のものです。
様々な UNIX/POSIX 互換層は普通 chmod() のようなものが動作するための
インターフェースとなっていますが、ときどき単にいいマッピングが
ないこともあります。

=begin original

If all this is intimidating, have no (well, maybe only a little)
fear.  There are modules that can help.  The File::Spec modules
provide methods to do the Right Thing on whatever platform happens
to be running the program.

=end original

もしこれら全てが怯えさせるものであるなら、恐れないでください
(あー、多分ほんの少しだけ恐れてください)。
助けになるモジュールがあります。
File::Spec モジュールはプログラムがどのプラットフォームで動作していても
「正しいこと」をします。

    use File::Spec::Functions;
    chdir(updir());        # go up one directory
    $file = catfile(curdir(), 'temp', 'file.txt');
    # on Unix and Win32, './temp/file.txt'
    # on Mac OS, ':temp:file.txt'
    # on VMS, '[.temp]file.txt'

=begin original

File::Spec is available in the standard distribution as of version
5.004_05.  File::Spec::Functions is only in File::Spec 0.7 and later,
and some versions of perl come with version 0.6.  If File::Spec
is not updated to 0.7 or later, you must use the object-oriented
interface from File::Spec (or upgrade File::Spec).

=end original

File::Spec はバージョン 5.004_05 から標準配布で利用可能です。
File::Spec::Functions は File::Spec 0.7 以降のみにあり、一部のバージョンの
perl はバージョン 0.6 を含んでいます。
File::Spec が 0.7 以降に更新されていないなら、File::Spec の
オブジェクト指向インターフェースを使わなければなりません
(あるいは File::Spec を更新しなければなりません)。

=begin original

In general, production code should not have file paths hardcoded.
Making them user-supplied or read from a configuration file is
better, keeping in mind that file path syntax varies on different
machines.

=end original

一般的に、製品コードはファイルパスを
ハードコーディングするべきではありません。
ユーザーが指定できるようにするか、設定ファイルから読み込む方がよいです;
ファイルパスの文法はマシンによって異なることを忘れないでください。

=begin original

This is especially noticeable in scripts like Makefiles and test suites,
which often assume C</> as a path separator for subdirectories.

=end original

これは、しばしば C</> がサブディレクトリのパス区切りと仮定されている
Makefile やテストスイートのようなスクリプトで特に注意が必要です。

=begin original

Also of use is File::Basename from the standard distribution, which
splits a pathname into pieces (base filename, full path to directory,
and file suffix).

=end original

もう一つの有用なものは標準配布に含まれている File::Basename で、
これはパス名をベースファイル名、ディレクトリのフルパス、ファイルの拡張子に
分解します。

=begin original

Even when on a single platform (if you can call Unix a single platform),
remember not to count on the existence or the contents of particular
system-specific files or directories, like F</etc/passwd>,
F</etc/sendmail.conf>, F</etc/resolv.conf>, or even F</tmp/>.  For
example, F</etc/passwd> may exist but not contain the encrypted
passwords, because the system is using some form of enhanced security.
Or it may not contain all the accounts, because the system is using NIS. 
If code does need to rely on such a file, include a description of the
file and its format in the code's documentation, then make it easy for
the user to override the default location of the file.

=end original

Even when on a single platform (if you can call Unix a single platform),
remember not to count on the existence or the contents of particular
system-specific files or directories, like F</etc/passwd>,
F</etc/sendmail.conf>, F</etc/resolv.conf>, or even F</tmp/>.  For
example, F</etc/passwd> may exist but not contain the encrypted
passwords, because the system is using some form of enhanced security.
Or it may not contain all the accounts, because the system is using NIS. 
If code does need to rely on such a file, include a description of the
file and its format in the code's documentation, then make it easy for
the user to override the default location of the file.
(TBT)

=begin original

Don't assume a text file will end with a newline.  They should,
but people forget.

=end original

テキストファイルが改行で終わっていると仮定しないでください。
そうあるべきですが、人は忘れます。

=begin original

Do not have two files or directories of the same name with different
case, like F<test.pl> and F<Test.pl>, as many platforms have
case-insensitive (or at least case-forgiving) filenames.  Also, try
not to have non-word characters (except for C<.>) in the names, and
keep them to the 8.3 convention, for maximum portability, onerous a
burden though this may appear.

=end original

Do not have two files or directories of the same name with different
case, like F<test.pl> and F<Test.pl>, as many platforms have
case-insensitive (or at least case-forgiving) filenames.  Also, try
not to have non-word characters (except for C<.>) in the names, and
keep them to the 8.3 convention, for maximum portability, onerous a
burden though this may appear.
(TBT)

=begin original

Likewise, when using the AutoSplit module, try to keep your functions to
8.3 naming and case-insensitive conventions; or, at the least,
make it so the resulting files have a unique (case-insensitively)
first 8 characters.

=end original

Likewise, when using the AutoSplit module, try to keep your functions to
8.3 naming and case-insensitive conventions; or, at the least,
make it so the resulting files have a unique (case-insensitively)
first 8 characters.
(TBT)

=begin original

Whitespace in filenames is tolerated on most systems, but not all,
and even on systems where it might be tolerated, some utilities
might become confused by such whitespace.

=end original

Whitespace in filenames is tolerated on most systems, but not all,
and even on systems where it might be tolerated, some utilities
might become confused by such whitespace.
(TBT)

=begin original

Many systems (DOS, VMS ODS-2) cannot have more than one C<.> in their
filenames.

=end original

Many systems (DOS, VMS ODS-2) cannot have more than one C<.> in their
filenames.
(TBT)

=begin original

Don't assume C<< > >> won't be the first character of a filename.
Always use C<< < >> explicitly to open a file for reading, or even
better, use the three-arg version of open, unless you want the user to
be able to specify a pipe open.

=end original

Don't assume C<< > >> won't be the first character of a filename.
Always use C<< < >> explicitly to open a file for reading, or even
better, use the three-arg version of open, unless you want the user to
be able to specify a pipe open.
(TBT)

    open(FILE, '<', $existing_file) or die $!;

=begin original

If filenames might use strange characters, it is safest to open it
with C<sysopen> instead of C<open>.  C<open> is magic and can
translate characters like C<< > >>, C<< < >>, and C<|>, which may
be the wrong thing to do.  (Sometimes, though, it's the right thing.)
Three-arg open can also help protect against this translation in cases
where it is undesirable.

=end original

If filenames might use strange characters, it is safest to open it
with C<sysopen> instead of C<open>.  C<open> is magic and can
translate characters like C<< > >>, C<< < >>, and C<|>, which may
be the wrong thing to do.  (Sometimes, though, it's the right thing.)
Three-arg open can also help protect against this translation in cases
where it is undesirable.
(TBT)

=begin original

Don't use C<:> as a part of a filename since many systems use that for
their own semantics (Mac OS Classic for separating pathname components,
many networking schemes and utilities for separating the nodename and
the pathname, and so on).  For the same reasons, avoid C<@>, C<;> and
C<|>.

=end original

Don't use C<:> as a part of a filename since many systems use that for
their own semantics (Mac OS Classic for separating pathname components,
many networking schemes and utilities for separating the nodename and
the pathname, and so on).  For the same reasons, avoid C<@>, C<;> and
C<|>.
(TBT)

=begin original

Don't assume that in pathnames you can collapse two leading slashes
C<//> into one: some networking and clustering filesystems have special
semantics for that.  Let the operating system to sort it out.

=end original

Don't assume that in pathnames you can collapse two leading slashes
C<//> into one: some networking and clustering filesystems have special
semantics for that.  Let the operating system to sort it out.
(TBT)

=begin original

The I<portable filename characters> as defined by ANSI C are

=end original

ANSI C で定義されている、I<移植性のあるファイル名の文字> は:

 a b c d e f g h i j k l m n o p q r t u v w x y z
 A B C D E F G H I J K L M N O P Q R T U V W X Y Z
 0 1 2 3 4 5 6 7 8 9
 . _ -

=begin original

and the "-" shouldn't be the first character.  If you want to be
hypercorrect, stay case-insensitive and within the 8.3 naming
convention (all the files and directories have to be unique within one
directory if their names are lowercased and truncated to eight
characters before the C<.>, if any, and to three characters after the
C<.>, if any).  (And do not use C<.>s in directory names.)

=end original

かつ "-" は最初の文字には使えません。
If you want to be
hypercorrect, stay case-insensitive and within the 8.3 naming
convention (all the files and directories have to be unique within one
directory if their names are lowercased and truncated to eight
characters before the C<.>, if any, and to three characters after the
C<.>, if any).
(そしてディレクトリ名に C<.> を使いません。)
(TBT)

=head2 System Interaction

(システムの相互作用)

=begin original

Not all platforms provide a command line.  These are usually platforms
that rely primarily on a Graphical User Interface (GUI) for user
interaction.  A program requiring a command line interface might
not work everywhere.  This is probably for the user of the program
to deal with, so don't stay up late worrying about it.

=end original

全てのプラットフォームがコマンドラインを提供しているわけではありません。
これらは普通ユーザーとの相互作用にグラフィカルユーザーインターフェース
(GUI) に基本的に依存しています。
コマンドラインインターフェースを要求するプログラムはどこでも
動作するわけではありません。
これはおそらくプログラムを扱うユーザーの問題なので、心配して遅くまで
遅くまで起きている必要がありません。

=begin original

Some platforms can't delete or rename files held open by the system,
this limitation may also apply to changing filesystem metainformation
like file permissions or owners.  Remember to C<close> files when you
are done with them.  Don't C<unlink> or C<rename> an open file.  Don't
C<tie> or C<open> a file already tied or opened; C<untie> or C<close>
it first.

=end original

一部のプラットフォームはシステムによって開かれているファイルを削除または
リネームできません; この制限はファイル権限や所有者のような
ファイルシステムのメタ情報の変更にも適用されることもあります。
ファイルに対する作業が終わったら、C<close> することを忘れないでください。
開いているファイルに対して C<unlink> または C<rename> しないでください。
すでに tie されていたり開かれていたりするファイルに対して
C<tie> や C<open> をしないで下さい; まず C<untie> または
C<close> してください。

=begin original

Don't open the same file more than once at a time for writing, as some
operating systems put mandatory locks on such files.

=end original

同じファイルを同時に 2 回以上書き込みのために開いてはいけません;
一部のオペレーティングシステムはそのようなファイルに排他的ロックを掛けます。

=begin original

Don't assume that write/modify permission on a directory gives the
right to add or delete files/directories in that directory.  That is
filesystem specific: in some filesystems you need write/modify
permission also (or even just) in the file/directory itself.  In some
filesystems (AFS, DFS) the permission to add/delete directory entries
is a completely separate permission.

=end original

Don't assume that write/modify permission on a directory gives the
right to add or delete files/directories in that directory.  That is
filesystem specific: in some filesystems you need write/modify
permission also (or even just) in the file/directory itself.  In some
filesystems (AFS, DFS) the permission to add/delete directory entries
is a completely separate permission.
(TBT)

=begin original

Don't assume that a single C<unlink> completely gets rid of the file:
some filesystems (most notably the ones in VMS) have versioned
filesystems, and unlink() removes only the most recent one (it doesn't
remove all the versions because by default the native tools on those
platforms remove just the most recent version, too).  The portable
idiom to remove all the versions of a file is

=end original

Don't assume that a single C<unlink> completely gets rid of the file:
some filesystems (most notably the ones in VMS) have versioned
filesystems, and unlink() removes only the most recent one (it doesn't
remove all the versions because by default the native tools on those
platforms remove just the most recent version, too).  The portable
idiom to remove all the versions of a file is
(TBT)

    1 while unlink "file";

=begin original

This will terminate if the file is undeleteable for some reason
(protected, not there, and so on).

=end original

これは (保護されている、存在しない、など) 何らかの理由でファイルが
削除できないときに終了します。

=begin original

Don't count on a specific environment variable existing in C<%ENV>.
Don't count on C<%ENV> entries being case-sensitive, or even
case-preserving.  Don't try to clear %ENV by saying C<%ENV = ();>, or,
if you really have to, make it conditional on C<$^O ne 'VMS'> since in
VMS the C<%ENV> table is much more than a per-process key-value string
table.

=end original

特定の環境変数が C<%ENV> にあるということを計算に入れないでください。
C<%ENV> のエントリが大文字小文字を認識するかや、大文字小文字が
保存されるかすらも計算に入れないでください。
%ENV をクリアするために C<%ENV = ();> としないでください; もし
本当にそうする必要があるなら、C<$^O ne 'VMS'> という条件付きで
行ってください; VMS では C<%ENV> テーブルはプロセス単位のキー/値文字列
テーブル以上のものだからです。

=begin original

On VMS, some entries in the %ENV hash are dynamically created when
their key is used on a read if they did not previously exist.  The
values for C<$ENV{HOME}>, C<$ENV{TERM}>, C<$ENV{HOME}>, and C<$ENV{USER}>,
are known to be dynamically generated.  The specific names that are
dynamically generated may vary with the version of the C library on VMS,
and more may exist than is documented.

=end original

VMS では、some entries in the %ENV hash are dynamically created when
their key is used on a read if they did not previously exist.  The
values for C<$ENV{HOME}>, C<$ENV{TERM}>, C<$ENV{HOME}>, and C<$ENV{USER}>,
are known to be dynamically generated.  The specific names that are
dynamically generated may vary with the version of the C library on VMS,
and more may exist than is documented.
(TBT)

=begin original

On VMS by default, changes to the %ENV hash are persistent after the process
exits.  This can cause unintended issues.

=end original

VMS のデフォルトでは、%ENV ハッシュへの変更は、プロセスが終了した後に
永続化します。
これは意図していない問題を引き起こすかもしれません。

=begin original

Don't count on signals or C<%SIG> for anything.

=end original

シグナルや C<%SIG> について何も当てにしないで下さい。

=begin original

Don't count on filename globbing.  Use C<opendir>, C<readdir>, and
C<closedir> instead.

=end original

ファイル名のグロブを当てにしないで下さい。
代わりに C<opendir>, C<readdir>, C<closedir> を使ってください。

=begin original

Don't count on per-program environment variables, or per-program current
directories.

=end original

プログラム単位の環境変数や、プログラム単位のカレントディレクトリを
当てにしないで下さい。

=begin original

Don't count on specific values of C<$!>, neither numeric nor
especially the strings values-- users may switch their locales causing
error messages to be translated into their languages.  If you can
trust a POSIXish environment, you can portably use the symbols defined
by the Errno module, like ENOENT.  And don't trust on the values of C<$!>
at all except immediately after a failed system call.

=end original

C<$!> の特定の値を計算に入れないでください; 数値でも、特に文字列値でも
です--ユーザーは
may switch their locales causing
error messages to be translated into their languages.  If you can
trust a POSIXish environment, you can portably use the symbols defined
by the Errno module, like ENOENT.  And don't trust on the values of C<$!>
at all except immediately after a failed system call.
(TBT)

=head2 Command names versus file pathnames

(コマンド名かファイルパス名か)

=begin original

Don't assume that the name used to invoke a command or program with
C<system> or C<exec> can also be used to test for the existence of the
file that holds the executable code for that command or program.
First, many systems have "internal" commands that are built-in to the
shell or OS and while these commands can be invoked, there is no
corresponding file.  Second, some operating systems (e.g., Cygwin,
DJGPP, OS/2, and VOS) have required suffixes for executable files;
these suffixes are generally permitted on the command name but are not
required.  Thus, a command like "perl" might exist in a file named
"perl", "perl.exe", or "perl.pm", depending on the operating system.
The variable "_exe" in the Config module holds the executable suffix,
if any.  Third, the VMS port carefully sets up $^X and
$Config{perlpath} so that no further processing is required.  This is
just as well, because the matching regular expression used below would
then have to deal with a possible trailing version number in the VMS
file name.

=end original

C<system> や C<exec> でコマンドやプログラムを起動するために使われた名前が、
そのコマンドやプログラムの実行可能コードを保持しているファイルの存在の
テストにも使えると仮定しないでください。
First, many systems have "internal" commands that are built-in to the
shell or OS and while these commands can be invoked, there is no
corresponding file.  Second, some operating systems (e.g., Cygwin,
DJGPP, OS/2, and VOS) have required suffixes for executable files;
these suffixes are generally permitted on the command name but are not
required.  Thus, a command like "perl" might exist in a file named
"perl", "perl.exe", or "perl.pm", depending on the operating system.
The variable "_exe" in the Config module holds the executable suffix,
if any.  Third, the VMS port carefully sets up $^X and
$Config{perlpath} so that no further processing is required.  This is
just as well, because the matching regular expression used below would
then have to deal with a possible trailing version number in the VMS
file name.
(TBT)

=begin original

To convert $^X to a file pathname, taking account of the requirements
of the various operating system possibilities, say:

=end original

$^X をファイルパス名に変換するとき、以下のように、様々な
オペレーティングシステムの可能性の要求を考慮してください:

  use Config;
  $thisperl = $^X;
  if ($^O ne 'VMS')
     {$thisperl .= $Config{_exe} unless $thisperl =~ m/$Config{_exe}$/i;}

=begin original

To convert $Config{perlpath} to a file pathname, say:

=end original

$Config{perlpath} をファイルのパス名に変換するには、例えば:

  use Config;
  $thisperl = $Config{perlpath};
  if ($^O ne 'VMS')
     {$thisperl .= $Config{_exe} unless $thisperl =~ m/$Config{_exe}$/i;}

=head2 Networking

(ネットワーク)

=begin original

Don't assume that you can reach the public Internet.

=end original

公共のインターネットに届くことを仮定しないでください。

=begin original

Don't assume that there is only one way to get through firewalls
to the public Internet.

=end original

ファイアウォールを通って公共のインターネットへ出る道が
一つだけあるということを仮定しないでください。

=begin original

Don't assume that you can reach outside world through any other port
than 80, or some web proxy.  ftp is blocked by many firewalls.

=end original

ポート 80 やいくつかのウェブプロキシを以外で、外側の世界に届くことを
仮定しないでください。
ftp は多くのファイアウォールでブロックされます。

=begin original

Don't assume that you can send email by connecting to the local SMTP port.

=end original

ローカル SMTP ポートに接続することで e メールを送信できると
仮定しないでください。

=begin original

Don't assume that you can reach yourself or any node by the name
'localhost'.  The same goes for '127.0.0.1'.  You will have to try both.

=end original

'localhost' という名前で自分自身やその他のノードに届くと
仮定しないでください。
同じことは '127.0.0.1' にも言えます。
両方を試す必要があります。

=begin original

Don't assume that the host has only one network card, or that it
can't bind to many virtual IP addresses.

=end original

ホストに 1 枚だけネットワークカードがあるとか、複数の仮想 IP アドレスを
割り当てられないと仮定しないでください。

=begin original

Don't assume a particular network device name.

=end original

特定のネットワークデバイス名を仮定しないでください。

=begin original

Don't assume a particular set of ioctl()s will work.

=end original

特定の ioctl() が動作することを仮定しないでください。

=begin original

Don't assume that you can ping hosts and get replies.

=end original

ホストに ping して結果が受け取れると仮定しないでください。

=begin original

Don't assume that any particular port (service) will respond.

=end original

特定のポート (サービス) が返答すると仮定しないでください。

=begin original

Don't assume that Sys::Hostname (or any other API or command)
returns either a fully qualified hostname or a non-qualified hostname:
it all depends on how the system had been configured.  Also remember
things like DHCP and NAT-- the hostname you get back might not be very
useful.

=end original

Don't assume that Sys::Hostname (or any other API or command)
returns either a fully qualified hostname or a non-qualified hostname:
it all depends on how the system had been configured.  Also remember
things like DHCP and NAT-- the hostname you get back might not be very
useful.
(TBT)

=begin original

All the above "don't":s may look daunting, and they are -- but the key
is to degrade gracefully if one cannot reach the particular network
service one wants.  Croaking or hanging do not look very professional.

=end original

All the above "don't":s may look daunting, and they are -- but the key
is to degrade gracefully if one cannot reach the particular network
service one wants.  Croaking or hanging do not look very professional.
(TBT)

=head2 Interprocess Communication (IPC)

(プロセス間通信(IPC))

=begin original

In general, don't directly access the system in code meant to be
portable.  That means, no C<system>, C<exec>, C<fork>, C<pipe>,
C<``>, C<qx//>, C<open> with a C<|>, nor any of the other things
that makes being a perl hacker worth being.

=end original

一般的に、移植性を持たせるコード内でシステムに直接
アクセスしないでください。
つまり、C<system>, C<exec>, C<fork>, C<pipe>,
C<``>, C<qx//>, C<open> での C<|> その他 perl ハッカーが価値があると
思うものです。

=begin original

Commands that launch external processes are generally supported on
most platforms (though many of them do not support any type of
forking).  The problem with using them arises from what you invoke
them on.  External tools are often named differently on different
platforms, may not be available in the same location, might accept
different arguments, can behave differently, and often present their
results in a platform-dependent way.  Thus, you should seldom depend
on them to produce consistent results. (Then again, if you're calling 
I<netstat -a>, you probably don't expect it to run on both Unix and CP/M.)

=end original

Commands that launch external processes are generally supported on
most platforms (though many of them do not support any type of
forking).  The problem with using them arises from what you invoke
them on.  External tools are often named differently on different
platforms, may not be available in the same location, might accept
different arguments, can behave differently, and often present their
results in a platform-dependent way.  Thus, you should seldom depend
on them to produce consistent results. (Then again, if you're calling 
I<netstat -a>, you probably don't expect it to run on both Unix and CP/M.)
(TBT)

=begin original

One especially common bit of Perl code is opening a pipe to B<sendmail>:

=end original

特に一般的な Perl コードの一つは B<sendmail> へのパイプを開くことです:

    open(MAIL, '|/usr/lib/sendmail -t') 
	or die "cannot fork sendmail: $!";

=begin original

This is fine for systems programming when sendmail is known to be
available.  But it is not fine for many non-Unix systems, and even
some Unix systems that may not have sendmail installed.  If a portable
solution is needed, see the various distributions on CPAN that deal
with it.  Mail::Mailer and Mail::Send in the MailTools distribution are
commonly used, and provide several mailing methods, including mail,
sendmail, and direct SMTP (via Net::SMTP) if a mail transfer agent is
not available.  Mail::Sendmail is a standalone module that provides
simple, platform-independent mailing.

=end original

This is fine for systems programming when sendmail is known to be
available.  But it is not fine for many non-Unix systems, and even
some Unix systems that may not have sendmail installed.  If a portable
solution is needed, see the various distributions on CPAN that deal
with it.  Mail::Mailer and Mail::Send in the MailTools distribution are
commonly used, and provide several mailing methods, including mail,
sendmail, and direct SMTP (via Net::SMTP) if a mail transfer agent is
not available.  Mail::Sendmail is a standalone module that provides
simple, platform-independent mailing.
(TBT)

=begin original

The Unix System V IPC (C<msg*(), sem*(), shm*()>) is not available
even on all Unix platforms.

=end original

Unix System V IPC (C<msg*(), sem*(), shm*()>) は
Unix プラットフォームでさえも全てで利用できるわけではありません。

=begin original

Do not use either the bare result of C<pack("N", 10, 20, 30, 40)> or
bare v-strings (such as C<v10.20.30.40>) to represent IPv4 addresses:
both forms just pack the four bytes into network order.  That this
would be equal to the C language C<in_addr> struct (which is what the
socket code internally uses) is not guaranteed.  To be portable use
the routines of the Socket extension, such as C<inet_aton()>,
C<inet_ntoa()>, and C<sockaddr_in()>.

=end original

Do not use either the bare result of C<pack("N", 10, 20, 30, 40)> or
bare v-strings (such as C<v10.20.30.40>) to represent IPv4 addresses:
both forms just pack the four bytes into network order.  That this
would be equal to the C language C<in_addr> struct (which is what the
socket code internally uses) is not guaranteed.  To be portable use
the routines of the Socket extension, such as C<inet_aton()>,
C<inet_ntoa()>, and C<sockaddr_in()>.
(TBT)

=begin original

The rule of thumb for portable code is: Do it all in portable Perl, or
use a module (that may internally implement it with platform-specific
code, but expose a common interface).

=end original

The rule of thumb for portable code is: Do it all in portable Perl, or
use a module (that may internally implement it with platform-specific
code, but expose a common interface).
(TBT)

=head2 External Subroutines (XS)

(外部サブルーチン(XS))

=begin original

XS code can usually be made to work with any platform, but dependent
libraries, header files, etc., might not be readily available or
portable, or the XS code itself might be platform-specific, just as Perl
code might be.  If the libraries and headers are portable, then it is
normally reasonable to make sure the XS code is portable, too.

=end original

XS コードは普通どのプラットフォームでも動作するように作られていますが、
依存ライブラリ、ヘッダファイルなどが利用可能でなかったり移植性がなかったり、
XS コード自身が (Perl コードがそうであるかもしれないように)
プラットフォーム依存かもしれません。
ライブラリとヘッダに移植性があるなら、XS コードも移植性があると
考えるのは普通合理的です。

=begin original

A different type of portability issue arises when writing XS code:
availability of a C compiler on the end-user's system.  C brings
with it its own portability issues, and writing XS code will expose
you to some of those.  Writing purely in Perl is an easier way to
achieve portability.

=end original

A different type of portability issue arises when writing XS code:
availability of a C compiler on the end-user's system.  C brings
with it its own portability issues, and writing XS code will expose
you to some of those.  Writing purely in Perl is an easier way to
achieve portability.
(TBT)

=head2 Standard Modules

(標準モジュール)

=begin original

In general, the standard modules work across platforms.  Notable
exceptions are the CPAN module (which currently makes connections to external
programs that may not be available), platform-specific modules (like
ExtUtils::MM_VMS), and DBM modules.

=end original

一般的に、標準モジュールはどのプラットフォームでも動きます。
注目するべき例外は CPAN モジュール (今のところ利用可能でないかもしれない
外部プログラムと接続します)、(ExtUtils::MM_VMS のような)
プラットフォーム固有のモジュール、DBM モジュールです。

=begin original

There is no one DBM module available on all platforms.
SDBM_File and the others are generally available on all Unix and DOSish
ports, but not in MacPerl, where only NBDM_File and DB_File are
available.

=end original

There is no one DBM module available on all platforms.
SDBM_File and the others are generally available on all Unix and DOSish
ports, but not in MacPerl, where only NBDM_File and DB_File are
available.
(TBT)

=begin original

The good news is that at least some DBM module should be available, and
AnyDBM_File will use whichever module it can find.  Of course, then
the code needs to be fairly strict, dropping to the greatest common
factor (e.g., not exceeding 1K for each record), so that it will
work with any DBM module.  See L<AnyDBM_File> for more details.

=end original

The good news is that at least some DBM module should be available, and
AnyDBM_File will use whichever module it can find.  Of course, then
the code needs to be fairly strict, dropping to the greatest common
factor (e.g., not exceeding 1K for each record), so that it will
work with any DBM module.  See L<AnyDBM_File> for more details.
(TBT)

=head2 Time and Date

(時刻と日付)

=begin original

The system's notion of time of day and calendar date is controlled in
widely different ways.  Don't assume the timezone is stored in C<$ENV{TZ}>,
and even if it is, don't assume that you can control the timezone through
that variable.  Don't assume anything about the three-letter timezone
abbreviations (for example that MST would be the Mountain Standard Time,
it's been known to stand for Moscow Standard Time).  If you need to
use timezones, express them in some unambiguous format like the
exact number of minutes offset from UTC, or the POSIX timezone
format.

=end original

カレンダー日付と時刻のシステムでの記法は大きく異なった方法で
制御されています。
タイムゾーンが C<$ENV{TZ}> に保管されていると仮定しないでください;
また例え保管されていても、この変数でタイムゾーンを制御できると
仮定しないでください。
3 文字タイムゾーン略称について何の仮定もしないで下さい (例えば MST は
Mountain Standard Time かもしれませんが、Moscow Standard Time としても
知られています)。
タイムゾーンを使う必要があるなら、UTC からの正確な分数や
POSIX タイムゾーン形式のような、曖昧さのない形式で記述してしてください。

=begin original

Don't assume that the epoch starts at 00:00:00, January 1, 1970,
because that is OS- and implementation-specific.  It is better to
store a date in an unambiguous representation.  The ISO 8601 standard
defines YYYY-MM-DD as the date format, or YYYY-MM-DDTHH-MM-SS
(that's a literal "T" separating the date from the time).
Please do use the ISO 8601 instead of making us to guess what
date 02/03/04 might be.  ISO 8601 even sorts nicely as-is.
A text representation (like "1987-12-18") can be easily converted
into an OS-specific value using a module like Date::Parse.
An array of values, such as those returned by C<localtime>, can be
converted to an OS-specific representation using Time::Local.

=end original

Don't assume that the epoch starts at 00:00:00, January 1, 1970,
because that is OS- and implementation-specific.  It is better to
store a date in an unambiguous representation.  The ISO 8601 standard
defines YYYY-MM-DD as the date format, or YYYY-MM-DDTHH-MM-SS
(that's a literal "T" separating the date from the time).
Please do use the ISO 8601 instead of making us to guess what
date 02/03/04 might be.  ISO 8601 even sorts nicely as-is.
A text representation (like "1987-12-18") can be easily converted
into an OS-specific value using a module like Date::Parse.
An array of values, such as those returned by C<localtime>, can be
converted to an OS-specific representation using Time::Local.
(TBT)

=begin original

When calculating specific times, such as for tests in time or date modules,
it may be appropriate to calculate an offset for the epoch.

=end original

When calculating specific times, such as for tests in time or date modules,
it may be appropriate to calculate an offset for the epoch.
(TBT)

    require Time::Local;
    $offset = Time::Local::timegm(0, 0, 0, 1, 0, 70);

=begin original

The value for C<$offset> in Unix will be C<0>, but in Mac OS will be
some large number.  C<$offset> can then be added to a Unix time value
to get what should be the proper value on any system.

=end original

The value for C<$offset> in Unix will be C<0>, but in Mac OS will be
some large number.  C<$offset> can then be added to a Unix time value
to get what should be the proper value on any system.
(TBT)

=begin original

On Windows (at least), you shouldn't pass a negative value to C<gmtime> or
C<localtime>.

=end original

On Windows (at least), you shouldn't pass a negative value to C<gmtime> or
C<localtime>.
(TBT)

=head2 Character sets and character encoding

(文字集合と文字エンコーディング)

=begin original

Assume very little about character sets.

=end original

文字集合について仮定できることはほとんどありません。

=begin original

Assume nothing about numerical values (C<ord>, C<chr>) of characters.
Do not use explicit code point ranges (like \xHH-\xHH); use for
example symbolic character classes like C<[:print:]>.

=end original

Assume nothing about numerical values (C<ord>, C<chr>) of characters.
Do not use explicit code point ranges (like \xHH-\xHH); use for
example symbolic character classes like C<[:print:]>.
(TBT)

=begin original

Do not assume that the alphabetic characters are encoded contiguously
(in the numeric sense).  There may be gaps.

=end original

Do not assume that the alphabetic characters are encoded contiguously
(in the numeric sense).  There may be gaps.
(TBT)

=begin original

Do not assume anything about the ordering of the characters.
The lowercase letters may come before or after the uppercase letters;
the lowercase and uppercase may be interlaced so that both "a" and "A"
come before "b"; the accented and other international characters may
be interlaced so that E<auml> comes before "b".

=end original

Do not assume anything about the ordering of the characters.
The lowercase letters may come before or after the uppercase letters;
the lowercase and uppercase may be interlaced so that both "a" and "A"
come before "b"; the accented and other international characters may
be interlaced so that E<auml> comes before "b".
(TBT)

=head2 Internationalisation

(国際化)

=begin original

If you may assume POSIX (a rather large assumption), you may read
more about the POSIX locale system from L<perllocale>.  The locale
system at least attempts to make things a little bit more portable,
or at least more convenient and native-friendly for non-English
users.  The system affects character sets and encoding, and date
and time formatting--amongst other things.

=end original

POSIX (比較的大きい仮定) を仮定するなら、L<perllocale> から POSIX
ロケールシステムについて多くを読めます。
ロケールシステムは少なくとも物事をもう少し移植性のある形に
しようとする、あるいは少なくとも非英語ユーザにとってより便利で
母国語に親しくするものです。
このシステムは文字集合とエンコーディング、日付と時刻の形式 -- 他のものに
混じって -- に影響を与えます。

=begin original

If you really want to be international, you should consider Unicode.
See L<perluniintro> and L<perlunicode> for more information.

=end original

もし本当に国際化したいなら、Unicode を考慮するべきです。
さらなる情報については L<perluniintro> と L<perlunicode> を
参照してください。

=begin original

If you want to use non-ASCII bytes (outside the bytes 0x00..0x7f) in
the "source code" of your code, to be portable you have to be explicit
about what bytes they are.  Someone might for example be using your
code under a UTF-8 locale, in which case random native bytes might be
illegal ("Malformed UTF-8 ...")  This means that for example embedding
ISO 8859-1 bytes beyond 0x7f into your strings might cause trouble
later.  If the bytes are native 8-bit bytes, you can use the C<bytes>
pragma.  If the bytes are in a string (regular expression being a
curious string), you can often also use the C<\xHH> notation instead
of embedding the bytes as-is.  (If you want to write your code in UTF-8,
you can use the C<utf8>.) The C<bytes> and C<utf8> pragmata are
available since Perl 5.6.0.

=end original

If you want to use non-ASCII bytes (outside the bytes 0x00..0x7f) in
the "source code" of your code, to be portable you have to be explicit
about what bytes they are.  Someone might for example be using your
code under a UTF-8 locale, in which case random native bytes might be
illegal ("Malformed UTF-8 ...")  This means that for example embedding
ISO 8859-1 bytes beyond 0x7f into your strings might cause trouble
later.  If the bytes are native 8-bit bytes, you can use the C<bytes>
pragma.  If the bytes are in a string (regular expression being a
curious string), you can often also use the C<\xHH> notation instead
of embedding the bytes as-is.  (If you want to write your code in UTF-8,
you can use the C<utf8>.) The C<bytes> and C<utf8> pragmata are
available since Perl 5.6.0.
(TBT)

=head2 System Resources

(システムリソース)

=begin original

If your code is destined for systems with severely constrained (or
missing!) virtual memory systems then you want to be I<especially> mindful
of avoiding wasteful constructs such as:

=end original

あなたのコードが仮想メモリについて厳しく制限された(あるいは存在しない!)
システムで動作することになっているなら、I<特に> 以下のような無駄な
構造を避けたいです:

    # NOTE: this is no longer "bad" in perl5.005
    for (0..10000000) {}                       # bad
    for (my $x = 0; $x <= 10000000; ++$x) {}   # good

    @lines = <VERY_LARGE_FILE>;                # bad

    while (<FILE>) {$file .= $_}               # sometimes bad
    $file = join('', <FILE>);                  # better

=begin original

The last two constructs may appear unintuitive to most people.  The
first repeatedly grows a string, whereas the second allocates a
large chunk of memory in one go.  On some systems, the second is
more efficient that the first.

=end original

最後の二つの構造はほとんどの人々にとって直観的ではないかもしれません。
一番目は徐々に文字列が大きくなり、二番目は一度に大きなメモリの塊を
割り当てます。
システムによっては、二番目の方が一番目よりも効率的です。

=head2 Security

(セキュリティ)

=begin original

Most multi-user platforms provide basic levels of security, usually
implemented at the filesystem level.  Some, however, do
not-- unfortunately.  Thus the notion of user id, or "home" directory,
or even the state of being logged-in, may be unrecognizable on many
platforms.  If you write programs that are security-conscious, it
is usually best to know what type of system you will be running
under so that you can write code explicitly for that platform (or
class of platforms).

=end original

ほとんどのマルチユーザプラットフォームでは(普通はファイルシステムで
実装された)基本的なレベルのセキュリティを提供しています。
しかし、一部は -- 残念ながら -- そうではありません。
従ってユーザー ID、"home" ディレクトリ、あるいはログインしているかどうか
という概念すら多くのプラットフォームでは認識できないかもしれません。
セキュリティを意識したプログラムを書くなら、どの種類のシステムで
実行されるかを知るのが普通は最良です; これによって明示的にその
プラットフォーム(またはプラットフォームの種類)のためのコードを書けます。

=begin original

Don't assume the UNIX filesystem access semantics: the operating
system or the filesystem may be using some ACL systems, which are
richer languages than the usual rwx.  Even if the rwx exist,
their semantics might be different.

=end original

Don't assume the UNIX filesystem access semantics: the operating
system or the filesystem may be using some ACL systems, which are
richer languages than the usual rwx.  Even if the rwx exist,
their semantics might be different.
(TBT)

=begin original

(From security viewpoint testing for permissions before attempting to
do something is silly anyway: if one tries this, there is potential
for race conditions-- someone or something might change the
permissions between the permissions check and the actual operation.
Just try the operation.)

=end original

(From security viewpoint testing for permissions before attempting to
do something is silly anyway: if one tries this, there is potential
for race conditions-- someone or something might change the
permissions between the permissions check and the actual operation.
Just try the operation.)
(TBT)

=begin original

Don't assume the UNIX user and group semantics: especially, don't
expect the C<< $< >> and C<< $> >> (or the C<$(> and C<$)>) to work
for switching identities (or memberships).

=end original

Don't assume the UNIX user and group semantics: especially, don't
expect the C<< $< >> and C<< $> >> (or the C<$(> and C<$)>) to work
for switching identities (or memberships).
(TBT)

=begin original

Don't assume set-uid and set-gid semantics. (And even if you do,
think twice: set-uid and set-gid are a known can of security worms.)

=end original

Don't assume set-uid and set-gid semantics. (And even if you do,
think twice: set-uid and set-gid are a known can of security worms.)
(TBT)

=head2 Style

(スタイル)

=begin original

For those times when it is necessary to have platform-specific code,
consider keeping the platform-specific code in one place, making porting
to other platforms easier.  Use the Config module and the special
variable C<$^O> to differentiate platforms, as described in
L<"PLATFORMS">.

=end original

プラットフォーム固有のコードを書く必要がある時には、プラットフォーム固有の
コードを 1 箇所に集めて、他のプラットフォームへの移植をより容易にすることを
考慮してください。
L<"PLATFORMS"> で記述されているように、プラットフォームを識別するために
Config モジュールと特殊変数 C<$^O> を使ってください。

=begin original

Be careful in the tests you supply with your module or programs.
Module code may be fully portable, but its tests might not be.  This
often happens when tests spawn off other processes or call external
programs to aid in the testing, or when (as noted above) the tests
assume certain things about the filesystem and paths.  Be careful not
to depend on a specific output style for errors, such as when checking
C<$!> after a failed system call.  Using C<$!> for anything else than
displaying it as output is doubtful (though see the Errno module for
testing reasonably portably for error value). Some platforms expect
a certain output format, and Perl on those platforms may have been
adjusted accordingly.  Most specifically, don't anchor a regex when
testing an error value.

=end original

モジュールやプログラムと共に提供するテストには注意してください。
モジュールのコードは完全に移植性があるかも知れませんが、
テストはそうではないかもしれません。
This
often happens when tests spawn off other processes or call external
programs to aid in the testing, or when (as noted above) the tests
assume certain things about the filesystem and paths.  Be careful not
to depend on a specific output style for errors, such as when checking
C<$!> after a failed system call.  Using C<$!> for anything else than
displaying it as output is doubtful (though see the Errno module for
testing reasonably portably for error value). Some platforms expect
a certain output format, and Perl on those platforms may have been
adjusted accordingly.  Most specifically, don't anchor a regex when
testing an error value.
(TBT)

=head1 CPAN Testers

=begin original

Modules uploaded to CPAN are tested by a variety of volunteers on
different platforms.  These CPAN testers are notified by mail of each
new upload, and reply to the list with PASS, FAIL, NA (not applicable to
this platform), or UNKNOWN (unknown), along with any relevant notations.

=end original

CPAN にアップロードされたモジュールは色々なプラットフォームで
様々なボランティアによってテストされます。
これらの CPAN testers は新しくアップロードされることにメールによって
通知され、PASS, FAIL, NA (このプラットフォームでは不適切), UNKNOWN
(不明) のいずれかを、関連する情報と共に返信します。

=begin original

The purpose of the testing is twofold: one, to help developers fix any
problems in their code that crop up because of lack of testing on other
platforms; two, to provide users with information about whether
a given module works on a given platform.

=end original

テストの目的は二つあります: 一つ目は、他のプラットフォームのテストが
ないことによって突然現れるコードの問題を開発者が修正することを
助けるためです; 二つ目は、あるモジュールがあるプラットフォームで
動作するかどうかの情報をユーザーに提供することです。

=begin original

Also see: 

=end original

以下も参照してください:

=over 4

=item *

=begin original

Mailing list: cpan-testers@perl.org

=end original

メーリングリスト: cpan-testers@perl.org

=item *

=begin original

Testing results: http://testers.cpan.org/

=end original

テスト結果: http://testers.cpan.org/

=back

=head1 PLATFORMS

(プラットフォーム)

=begin original

As of version 5.002, Perl is built with a C<$^O> variable that
indicates the operating system it was built on.  This was implemented
to help speed up code that would otherwise have to C<use Config>
and use the value of C<$Config{osname}>.  Of course, to get more
detailed information about the system, looking into C<%Config> is
certainly recommended.

=end original

バージョン 5.002 から、Perl は C<$^O> 変数がビルドされたオペレーティング
システムを示すような形でビルドされます。
これは、C<use Config> して C<$Config{osname}> の値を調べる必要が
ないようにすることで高速化を助けています。
もちろんシステムからもっと詳細な情報を得るなら、C<%Config> を
見ることが確実にお勧めです。

=begin original

C<%Config> cannot always be trusted, however, because it was built
at compile time.  If perl was built in one place, then transferred
elsewhere, some values may be wrong.  The values may even have been
edited after the fact.

=end original

しかし、C<%Config> はコンパイル時にビルドされるので、常に
信頼するというわけにはいきません。
perl がある場所でビルドされ、それから別の場所に移されると、いくつかの
値は間違ったものになるかもしれません。
値は後から修正することすらできます。

=head2 Unix

=begin original

Perl works on a bewildering variety of Unix and Unix-like platforms (see
e.g. most of the files in the F<hints/> directory in the source code kit).
On most of these systems, the value of C<$^O> (hence C<$Config{'osname'}>,
too) is determined either by lowercasing and stripping punctuation from the
first field of the string returned by typing C<uname -a> (or a similar command)
at the shell prompt or by testing the file system for the presence of
uniquely named files such as a kernel or header file.  Here, for example,
are a few of the more popular Unix flavors:

=end original

Perl は驚くほど色々な Unix と Unix 風プラットフォームで動作します (例えば
ソースコードキットの F<hints/> ディレクトリのほとんどのファイルを
参照してください)。
これらのシステムのほとんどでは、C<$^O> の値は (従って
C<$Config{'osname'}> の値も)、シェルプロンプトから C<uname -a> (または
似たようなコマンド) で返された文字列の最初のフィールドから句読点を
取り除いて小文字にしたものか、カーネルやヘッダファイルのようなユニークな
名前の付いたファイルの存在をファイルシステムで調べることによって
決定されます。
例えば、以下はより有名な Unix 風システムのいくつかです:

    uname         $^O        $Config{'archname'}
    --------------------------------------------
    AIX           aix        aix
    BSD/OS        bsdos      i386-bsdos
    Darwin        darwin     darwin
    dgux          dgux       AViiON-dgux
    DYNIX/ptx     dynixptx   i386-dynixptx
    FreeBSD       freebsd    freebsd-i386    
    Haiku         haiku      BePC-haiku
    Linux         linux      arm-linux
    Linux         linux      i386-linux
    Linux         linux      i586-linux
    Linux         linux      ppc-linux
    HP-UX         hpux       PA-RISC1.1
    IRIX          irix       irix
    Mac OS X      darwin     darwin
    MachTen PPC   machten    powerpc-machten
    NeXT 3        next       next-fat
    NeXT 4        next       OPENSTEP-Mach
    openbsd       openbsd    i386-openbsd
    OSF1          dec_osf    alpha-dec_osf
    reliantunix-n svr4       RM400-svr4
    SCO_SV        sco_sv     i386-sco_sv
    SINIX-N       svr4       RM400-svr4
    sn4609        unicos     CRAY_C90-unicos
    sn6521        unicosmk   t3e-unicosmk
    sn9617        unicos     CRAY_J90-unicos
    SunOS         solaris    sun4-solaris
    SunOS         solaris    i86pc-solaris
    SunOS4        sunos      sun4-sunos

=begin original

Because the value of C<$Config{archname}> may depend on the
hardware architecture, it can vary more than the value of C<$^O>.

=end original

C<$Config{archname}> の値はハードウェアアーキテクチャに依存しているため、
C<$^O> の値よりも様々な値になります。

=head2 DOS and Derivatives

(DOS とその派生)

=begin original

Perl has long been ported to Intel-style microcomputers running under
systems like PC-DOS, MS-DOS, OS/2, and most Windows platforms you can
bring yourself to mention (except for Windows CE, if you count that).
Users familiar with I<COMMAND.COM> or I<CMD.EXE> style shells should
be aware that each of these file specifications may have subtle
differences:

=end original

Perl は昔から Intel 形式のマイクロコンピュータで動作する
PC-DOS, MS-DOS, OS/2 のようなシステムと、あなたが指摘できるような
ほとんど全ての Windows プラットフォーム(もし Windows CE を含めるなら、
これは除きます)に移植されてきました。
I<COMMAND.COM> や I<CMD.EXE> 形式のシェルになれているユーザーは、
以下のようなファイル指定に少しずつ違いがあることに気がつくはずです:

    $filespec0 = "c:/foo/bar/file.txt";
    $filespec1 = "c:\\foo\\bar\\file.txt";
    $filespec2 = 'c:\foo\bar\file.txt';
    $filespec3 = 'c:\\foo\\bar\\file.txt';

=begin original

System calls accept either C</> or C<\> as the path separator.
However, many command-line utilities of DOS vintage treat C</> as
the option prefix, so may get confused by filenames containing C</>.
Aside from calling any external programs, C</> will work just fine,
and probably better, as it is more consistent with popular usage,
and avoids the problem of remembering what to backwhack and what
not to.

=end original

System calls accept either C</> or C<\> as the path separator.
However, many command-line utilities of DOS vintage treat C</> as
the option prefix, so may get confused by filenames containing C</>.
Aside from calling any external programs, C</> will work just fine,
and probably better, as it is more consistent with popular usage,
and avoids the problem of remembering what to backwhack and what
not to.
(TBT)

=begin original

The DOS FAT filesystem can accommodate only "8.3" style filenames.  Under
the "case-insensitive, but case-preserving" HPFS (OS/2) and NTFS (NT)
filesystems you may have to be careful about case returned with functions
like C<readdir> or used with functions like C<open> or C<opendir>.

=end original

The DOS FAT filesystem can accommodate only "8.3" style filenames.  Under
the "case-insensitive, but case-preserving" HPFS (OS/2) and NTFS (NT)
filesystems you may have to be careful about case returned with functions
like C<readdir> or used with functions like C<open> or C<opendir>.
(TBT)

=begin original

DOS also treats several filenames as special, such as AUX, PRN,
NUL, CON, COM1, LPT1, LPT2, etc.  Unfortunately, sometimes these
filenames won't even work if you include an explicit directory
prefix.  It is best to avoid such filenames, if you want your code
to be portable to DOS and its derivatives.  It's hard to know what
these all are, unfortunately.

=end original

DOS also treats several filenames as special, such as AUX, PRN,
NUL, CON, COM1, LPT1, LPT2, etc.  Unfortunately, sometimes these
filenames won't even work if you include an explicit directory
prefix.  It is best to avoid such filenames, if you want your code
to be portable to DOS and its derivatives.  It's hard to know what
these all are, unfortunately.
(TBT)

=begin original

Users of these operating systems may also wish to make use of
scripts such as I<pl2bat.bat> or I<pl2cmd> to
put wrappers around your scripts.

=end original

Users of these operating systems may also wish to make use of
scripts such as I<pl2bat.bat> or I<pl2cmd> to
put wrappers around your scripts.
(TBT)

=begin original

Newline (C<\n>) is translated as C<\015\012> by STDIO when reading from
and writing to files (see L<"Newlines">).  C<binmode(FILEHANDLE)>
will keep C<\n> translated as C<\012> for that filehandle.  Since it is a
no-op on other systems, C<binmode> should be used for cross-platform code
that deals with binary data.  That's assuming you realize in advance
that your data is in binary.  General-purpose programs should
often assume nothing about their data.

=end original

Newline (C<\n>) is translated as C<\015\012> by STDIO when reading from
and writing to files (see L<"Newlines">).  C<binmode(FILEHANDLE)>
will keep C<\n> translated as C<\012> for that filehandle.  Since it is a
no-op on other systems, C<binmode> should be used for cross-platform code
that deals with binary data.  That's assuming you realize in advance
that your data is in binary.  General-purpose programs should
often assume nothing about their data.
(TBT)

=begin original

The C<$^O> variable and the C<$Config{archname}> values for various
DOSish perls are as follows:

=end original

The C<$^O> variable and the C<$Config{archname}> values for various
DOSish perls are as follows:
(TBT)

     OS            $^O      $Config{archname}   ID    Version
     --------------------------------------------------------
     MS-DOS        dos        ?                 
     PC-DOS        dos        ?                 
     OS/2          os2        ?
     Windows 3.1   ?          ?                 0      3 01
     Windows 95    MSWin32    MSWin32-x86       1      4 00
     Windows 98    MSWin32    MSWin32-x86       1      4 10
     Windows ME    MSWin32    MSWin32-x86       1      ?
     Windows NT    MSWin32    MSWin32-x86       2      4 xx
     Windows NT    MSWin32    MSWin32-ALPHA     2      4 xx
     Windows NT    MSWin32    MSWin32-ppc       2      4 xx
     Windows 2000  MSWin32    MSWin32-x86       2      5 00
     Windows XP    MSWin32    MSWin32-x86       2      5 01
     Windows 2003  MSWin32    MSWin32-x86       2      5 02
     Windows CE    MSWin32    ?                 3           
     Cygwin        cygwin     cygwin

=begin original

The various MSWin32 Perl's can distinguish the OS they are running on
via the value of the fifth element of the list returned from 
Win32::GetOSVersion().  For example:

=end original

The various MSWin32 Perl's can distinguish the OS they are running on
via the value of the fifth element of the list returned from 
Win32::GetOSVersion().  For example:
(TBT)

    if ($^O eq 'MSWin32') {
        my @os_version_info = Win32::GetOSVersion();
        print +('3.1','95','NT')[$os_version_info[4]],"\n";
    }

=begin original

There are also Win32::IsWinNT() and Win32::IsWin95(), try C<perldoc Win32>,
and as of libwin32 0.19 (not part of the core Perl distribution)
Win32::GetOSName().  The very portable POSIX::uname() will work too:

=end original

There are also Win32::IsWinNT() and Win32::IsWin95(), try C<perldoc Win32>,
and as of libwin32 0.19 (not part of the core Perl distribution)
Win32::GetOSName().  The very portable POSIX::uname() will work too:
(TBT)

    c:\> perl -MPOSIX -we "print join '|', uname"
    Windows NT|moonru|5.0|Build 2195 (Service Pack 2)|x86

=begin original

Also see:

=end original

以下も参照してください:

=over 4

=item *

=begin original

The djgpp environment for DOS, http://www.delorie.com/djgpp/
and L<perldos>.

=end original

DOS のための djgpp 環境 http://www.delorie.com/djgpp/ と
L<perldos>。

=item *

=begin original

The EMX environment for DOS, OS/2, etc. emx@iaehv.nl,
http://www.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/index.html or
ftp://hobbes.nmsu.edu/pub/os2/dev/emx/  Also L<perlos2>.

=end original

DOS, OS/2 などのための EMX 環境 emx@iaehv.nl,
http://www.leo.org/pub/comp/os/os2/leo/gnu/emx+gcc/index.html,
ftp://hobbes.nmsu.edu/pub/os2/dev/emx/ および L<perlos2>.

=item *

=begin original

Build instructions for Win32 in L<perlwin32>, or under the Cygnus environment
in L<perlcygwin>.  

=end original

L<perlwin32> にある Win32 のためのビルド手順および
L<perlcygwin> にある Cygnus 環境。

=item *

=begin original

The C<Win32::*> modules in L<Win32>.

=end original

L<Win32> の C<Win32::*> モジュール。

=item *

=begin original

The ActiveState Pages, http://www.activestate.com/

=end original

ActiveState のページ, http://www.activestate.com/

=item *

=begin original

The Cygwin environment for Win32; F<README.cygwin> (installed 
as L<perlcygwin>), http://www.cygwin.com/

=end original

Win32 のための Cygwin 環境; F<README.cygwin> (L<perlcygwin> として
インストールされます), http://www.cygwin.com/

=item *

=begin original

The U/WIN environment for Win32,
http://www.research.att.com/sw/tools/uwin/

=end original

Win32 のための U/WIN 環境 http://www.research.att.com/sw/tools/uwin/

=item *

=begin original

Build instructions for OS/2, L<perlos2>

=end original

OS/2 のためのビルド手順である L<perlos2>

=back

=head2 S<Mac OS>

=begin original

Any module requiring XS compilation is right out for most people, because
MacPerl is built using non-free (and non-cheap!) compilers.  Some XS
modules that can work with MacPerl are built and distributed in binary
form on CPAN.

=end original

XS コンパイルが必要なモジュールはほとんどの人々にとっては使えません;
MacPerl はフリーでない(そして安くない!)コンパイラを使って
ビルドされているからです。
MacPerl で動作する一部の XS モジュールはビルドされて CPAN で
バイナリ形式で配布されています。

=begin original

Directories are specified as:

=end original

ディレクトリは以下のように指定されます:

    volume:folder:file              for absolute pathnames
    volume:folder:                  for absolute pathnames
    :folder:file                    for relative pathnames
    :folder:                        for relative pathnames
    :file                           for relative pathnames
    file                            for relative pathnames

=begin original

Files are stored in the directory in alphabetical order.  Filenames are
limited to 31 characters, and may include any character except for
null and C<:>, which is reserved as the path separator.

=end original

Files are stored in the directory in alphabetical order.  Filenames are
limited to 31 characters, and may include any character except for
null and C<:>, which is reserved as the path separator.
(TBT)

=begin original

Instead of C<flock>, see C<FSpSetFLock> and C<FSpRstFLock> in the
Mac::Files module, or C<chmod(0444, ...)> and C<chmod(0666, ...)>.

=end original

Instead of C<flock>, see C<FSpSetFLock> and C<FSpRstFLock> in the
Mac::Files module, or C<chmod(0444, ...)> and C<chmod(0666, ...)>.
(TBT)

=begin original

In the MacPerl application, you can't run a program from the command line;
programs that expect C<@ARGV> to be populated can be edited with something
like the following, which brings up a dialog box asking for the command
line arguments.

=end original

In the MacPerl application, you can't run a program from the command line;
programs that expect C<@ARGV> to be populated can be edited with something
like the following, which brings up a dialog box asking for the command
line arguments.
(TBT)

    if (!@ARGV) {
        @ARGV = split /\s+/, MacPerl::Ask('Arguments?');
    }

=begin original

A MacPerl script saved as a "droplet" will populate C<@ARGV> with the full
pathnames of the files dropped onto the script.

=end original

A MacPerl script saved as a "droplet" will populate C<@ARGV> with the full
pathnames of the files dropped onto the script.
(TBT)

=begin original

Mac users can run programs under a type of command line interface
under MPW (Macintosh Programmer's Workshop, a free development
environment from Apple).  MacPerl was first introduced as an MPW
tool, and MPW can be used like a shell:

=end original

Mac users can run programs under a type of command line interface
under MPW (Macintosh Programmer's Workshop, a free development
environment from Apple).  MacPerl was first introduced as an MPW
tool, and MPW can be used like a shell:
(TBT)

    perl myscript.plx some arguments

=begin original

ToolServer is another app from Apple that provides access to MPW tools
from MPW and the MacPerl app, which allows MacPerl programs to use
C<system>, backticks, and piped C<open>.

=end original

ToolServer is another app from Apple that provides access to MPW tools
from MPW and the MacPerl app, which allows MacPerl programs to use
C<system>, backticks, and piped C<open>.
(TBT)

=begin original

"S<Mac OS>" is the proper name for the operating system, but the value
in C<$^O> is "MacOS".  To determine architecture, version, or whether
the application or MPW tool version is running, check:

=end original

"S<Mac OS>" is the proper name for the operating system, but the value
in C<$^O> is "MacOS".  To determine architecture, version, or whether
the application or MPW tool version is running, check:
(TBT)

    $is_app    = $MacPerl::Version =~ /App/;
    $is_tool   = $MacPerl::Version =~ /MPW/;
    ($version) = $MacPerl::Version =~ /^(\S+)/;
    $is_ppc    = $MacPerl::Architecture eq 'MacPPC';
    $is_68k    = $MacPerl::Architecture eq 'Mac68K';

=begin original

S<Mac OS X>, based on NeXT's OpenStep OS, runs MacPerl natively, under the
"Classic" environment.  There is no "Carbon" version of MacPerl to run
under the primary Mac OS X environment.  S<Mac OS X> and its Open Source
version, Darwin, both run Unix perl natively.

=end original

S<Mac OS X>, based on NeXT's OpenStep OS, runs MacPerl natively, under the
"Classic" environment.  There is no "Carbon" version of MacPerl to run
under the primary Mac OS X environment.  S<Mac OS X> and its Open Source
version, Darwin, both run Unix perl natively.
(TBT)

=begin original

Also see:

=end original

以下も参照してください:

=over 4

=item *

=begin original

MacPerl Development, http://dev.macperl.org/ .

=end original

MacPerl Development, http://dev.macperl.org/ 。

=item *

=begin original

The MacPerl Pages, http://www.macperl.com/ .

=end original

The MacPerl Pages, http://www.macperl.com/ 。

=item *

=begin original

The MacPerl mailing lists, http://lists.perl.org/ .

=end original

The MacPerl メーリングリスト, http://lists.perl.org/ 。

=item *

MPW, ftp://ftp.apple.com/developer/Tool_Chest/Core_Mac_OS_Tools/

=back

=head2 VMS

=begin original

Perl on VMS is discussed in L<perlvms> in the perl distribution.

=end original

VMS での Perl は perl 配布の L<perlvms> で議論されています。

=begin original

The official name of VMS as of this writing is OpenVMS.

=end original

これを書いている時点での VMS の正式名称は OpenVMS です。

=begin original

Perl on VMS can accept either VMS- or Unix-style file
specifications as in either of the following:

=end original

VMS での Perl は、 VMS 形式と Unix 形式のファイル指定の両方を、
以下のどちらかの形でも受け付けます:

    $ perl -ne "print if /perl_setup/i" SYS$LOGIN:LOGIN.COM
    $ perl -ne "print if /perl_setup/i" /sys$login/login.com

=begin original

but not a mixture of both as in:

=end original

しかし以下のように両方を混ぜることはできません:

    $ perl -ne "print if /perl_setup/i" sys$login:/login.com
    Can't open sys$login:/login.com: file specification syntax error

=begin original

Interacting with Perl from the Digital Command Language (DCL) shell
often requires a different set of quotation marks than Unix shells do.
For example:

=end original

Perl と Digital Command Language (DCL) シェルとの相互作用はしばしば
Unix シェルが行うのとことなるクォートの種類が必要になります。
例えば:

    $ perl -e "print ""Hello, world.\n"""
    Hello, world.

=begin original

There are several ways to wrap your perl scripts in DCL F<.COM> files, if
you are so inclined.  For example:

=end original

もしそうしたいなら、DCL F<.COM> ファイルに perl スクリプトをラップする
いくつかの方法があります。
例えば:

    $ write sys$output "Hello from DCL!"
    $ if p1 .eqs. ""
    $ then perl -x 'f$environment("PROCEDURE")
    $ else perl -x - 'p1 'p2 'p3 'p4 'p5 'p6 'p7 'p8
    $ deck/dollars="__END__"
    #!/usr/bin/perl

    print "Hello from Perl!\n";

    __END__
    $ endif

=begin original

Do take care with C<$ ASSIGN/nolog/user SYS$COMMAND: SYS$INPUT> if your
perl-in-DCL script expects to do things like C<< $read = <STDIN>; >>.

=end original

Do take care with C<$ ASSIGN/nolog/user SYS$COMMAND: SYS$INPUT> if your
perl-in-DCL script expects to do things like C<< $read = <STDIN>; >>.
(TBT)

=begin original

The VMS operating system has two filesystems, known as ODS-2 and ODS-5.

=end original

VMS オペレーティングシステムには、ODS-2 および ODS-5 として知られる
二つのファイルシステムがあります。

=begin original

For ODS-2, filenames are in the format "name.extension;version".  The
maximum length for filenames is 39 characters, and the maximum length for
extensions is also 39 characters.  Version is a number from 1 to
32767.  Valid characters are C</[A-Z0-9$_-]/>.

=end original

For ODS-2, filenames are in the format "name.extension;version".  The
maximum length for filenames is 39 characters, and the maximum length for
extensions is also 39 characters.  Version is a number from 1 to
32767.  Valid characters are C</[A-Z0-9$_-]/>.
(TBT)

=begin original

The ODS-2 filesystem is case-insensitive and does not preserve case.
Perl simulates this by converting all filenames to lowercase internally.

=end original

The ODS-2 filesystem is case-insensitive and does not preserve case.
Perl simulates this by converting all filenames to lowercase internally.
(TBT)

=begin original

For ODS-5, filenames may have almost any character in them and can include
Unicode characters.  Characters that could be misinterpreted by the DCL
shell or file parsing utilities need to be prefixed with the C<^>
character, or replaced with hexadecimal characters prefixed with the
C<^> character.  Such prefixing is only needed with the pathnames are
in VMS format in applications.  Programs that can accept the UNIX format
of pathnames do not need the escape characters.  The maximum length for
filenames is 255 characters.  The ODS-5 file system can handle both
a case preserved and a case sensitive mode.

=end original

For ODS-5, filenames may have almost any character in them and can include
Unicode characters.  Characters that could be misinterpreted by the DCL
shell or file parsing utilities need to be prefixed with the C<^>
character, or replaced with hexadecimal characters prefixed with the
C<^> character.  Such prefixing is only needed with the pathnames are
in VMS format in applications.  Programs that can accept the UNIX format
of pathnames do not need the escape characters.  The maximum length for
filenames is 255 characters.  The ODS-5 file system can handle both
a case preserved and a case sensitive mode.
(TBT)

=begin original

ODS-5 is only available on the OpenVMS for 64 bit platforms.

=end original

ODS-5 is only available on the OpenVMS for 64 bit platforms.
(TBT)

=begin original

Support for the extended file specifications is being done as optional
settings to preserve backward compatibility with Perl scripts that
assume the previous VMS limitations.

=end original

Support for the extended file specifications is being done as optional
settings to preserve backward compatibility with Perl scripts that
assume the previous VMS limitations.
(TBT)

=begin original

In general routines on VMS that get a UNIX format file specification
should return it in a UNIX format, and when they get a VMS format
specification they should return a VMS format unless they are documented
to do a conversion.

=end original

In general routines on VMS that get a UNIX format file specification
should return it in a UNIX format, and when they get a VMS format
specification they should return a VMS format unless they are documented
to do a conversion.
(TBT)

=begin original

For routines that generate return a file specification, VMS allows setting
if the C library which Perl is built on if it will be returned in VMS
format or in UNIX format.

=end original

For routines that generate return a file specification, VMS allows setting
if the C library which Perl is built on if it will be returned in VMS
format or in UNIX format.
(TBT)

=begin original

With the ODS-2 file system, there is not much difference in syntax of
filenames without paths for VMS or UNIX.  With the extended character
set available with ODS-5 there can be a significant difference.

=end original

With the ODS-2 file system, there is not much difference in syntax of
filenames without paths for VMS or UNIX.  With the extended character
set available with ODS-5 there can be a significant difference.
(TBT)

=begin original

Because of this, existing Perl scripts written for VMS were sometimes
treating VMS and UNIX filenames interchangeably.  Without the extended
character set enabled, this behavior will mostly be maintained for
backwards compatibility.

=end original

Because of this, existing Perl scripts written for VMS were sometimes
treating VMS and UNIX filenames interchangeably.  Without the extended
character set enabled, this behavior will mostly be maintained for
backwards compatibility.
(TBT)

=begin original

When extended characters are enabled with ODS-5, the handling of
UNIX formatted file specifications is to that of a UNIX system.

=end original

When extended characters are enabled with ODS-5, the handling of
UNIX formatted file specifications is to that of a UNIX system.
(TBT)

=begin original

VMS file specifications without extensions have a trailing dot.  An
equivalent UNIX file specification should not show the trailing dot.

=end original

VMS file specifications without extensions have a trailing dot.  An
equivalent UNIX file specification should not show the trailing dot.
(TBT)

=begin original

The result of all of this, is that for VMS, for portable scripts, you
can not depend on Perl to present the filenames in lowercase, to be
case sensitive, and that the filenames could be returned in either
UNIX or VMS format.

=end original

The result of all of this, is that for VMS, for portable scripts, you
can not depend on Perl to present the filenames in lowercase, to be
case sensitive, and that the filenames could be returned in either
UNIX or VMS format.
(TBT)

=begin original

And if a routine returns a file specification, unless it is intended to
convert it, it should return it in the same format as it found it.

=end original

And if a routine returns a file specification, unless it is intended to
convert it, it should return it in the same format as it found it.
(TBT)

=begin original

C<readdir> by default has traditionally returned lowercased filenames.
When the ODS-5 support is enabled, it will return the exact case of the
filename on the disk.

=end original

C<readdir> by default has traditionally returned lowercased filenames.
When the ODS-5 support is enabled, it will return the exact case of the
filename on the disk.
(TBT)

=begin original

Files without extensions have a trailing period on them, so doing a
C<readdir> in the default mode with a file named F<A.;5> will
return F<a.> when VMS is (though that file could be opened with
C<open(FH, 'A')>).

=end original

Files without extensions have a trailing period on them, so doing a
C<readdir> in the default mode with a file named F<A.;5> will
return F<a.> when VMS is (though that file could be opened with
C<open(FH, 'A')>).
(TBT)

=begin original

With support for extended file specifications and if C<opendir> was
given a UNIX format directory, a file named F<A.;5> will return F<a>
and optionally in the exact case on the disk.  When C<opendir> is given
a VMS format directory, then C<readdir> should return F<a.>, and
again with the optionally the exact case.

=end original

With support for extended file specifications and if C<opendir> was
given a UNIX format directory, a file named F<A.;5> will return F<a>
and optionally in the exact case on the disk.  When C<opendir> is given
a VMS format directory, then C<readdir> should return F<a.>, and
again with the optionally the exact case.
(TBT)

=begin original

RMS had an eight level limit on directory depths from any rooted logical
(allowing 16 levels overall) prior to VMS 7.2, and even with versions of
VMS on VAX up through 7.3.  Hence C<PERL_ROOT:[LIB.2.3.4.5.6.7.8]> is a
valid directory specification but C<PERL_ROOT:[LIB.2.3.4.5.6.7.8.9]> is
not.  F<Makefile.PL> authors might have to take this into account, but at
least they can refer to the former as C</PERL_ROOT/lib/2/3/4/5/6/7/8/>.

=end original

RMS had an eight level limit on directory depths from any rooted logical
(allowing 16 levels overall) prior to VMS 7.2, and even with versions of
VMS on VAX up through 7.3.  Hence C<PERL_ROOT:[LIB.2.3.4.5.6.7.8]> is a
valid directory specification but C<PERL_ROOT:[LIB.2.3.4.5.6.7.8.9]> is
not.  F<Makefile.PL> authors might have to take this into account, but at
least they can refer to the former as C</PERL_ROOT/lib/2/3/4/5/6/7/8/>.
(TBT)

=begin original

Pumpkings and module integrators can easily see whether files with too many
directory levels have snuck into the core by running the following in the
top-level source directory:

=end original

Pumpkings and module integrators can easily see whether files with too many
directory levels have snuck into the core by running the following in the
top-level source directory:
(TBT)

   $ perl -ne "$_=~s/\s+.*//; print if scalar(split /\//) > 8;" < MANIFEST


=begin original

The VMS::Filespec module, which gets installed as part of the build
process on VMS, is a pure Perl module that can easily be installed on
non-VMS platforms and can be helpful for conversions to and from RMS
native formats.  It is also now the only way that you should check to
see if VMS is in a case sensitive mode.

=end original

The VMS::Filespec module, which gets installed as part of the build
process on VMS, is a pure Perl module that can easily be installed on
non-VMS platforms and can be helpful for conversions to and from RMS
native formats.  It is also now the only way that you should check to
see if VMS is in a case sensitive mode.
(TBT)

=begin original

What C<\n> represents depends on the type of file opened.  It usually
represents C<\012> but it could also be C<\015>, C<\012>, C<\015\012>, 
C<\000>, C<\040>, or nothing depending on the file organization and 
record format.  The VMS::Stdio module provides access to the 
special fopen() requirements of files with unusual attributes on VMS.

=end original

What C<\n> represents depends on the type of file opened.  It usually
represents C<\012> but it could also be C<\015>, C<\012>, C<\015\012>, 
C<\000>, C<\040>, or nothing depending on the file organization and 
record format.  The VMS::Stdio module provides access to the 
special fopen() requirements of files with unusual attributes on VMS.
(TBT)

=begin original

TCP/IP stacks are optional on VMS, so socket routines might not be
implemented.  UDP sockets may not be supported.

=end original

TCP/IP stacks are optional on VMS, so socket routines might not be
implemented.  UDP sockets may not be supported.
(TBT)

=begin original

The TCP/IP library support for all current versions of VMS is dynamically
loaded if present, so even if the routines are configured, they may
return a status indicating that they are not implemented.

=end original

The TCP/IP library support for all current versions of VMS is dynamically
loaded if present, so even if the routines are configured, they may
return a status indicating that they are not implemented.
(TBT)

=begin original

The value of C<$^O> on OpenVMS is "VMS".  To determine the architecture
that you are running on without resorting to loading all of C<%Config>
you can examine the content of the C<@INC> array like so:

=end original

The value of C<$^O> on OpenVMS is "VMS".  To determine the architecture
that you are running on without resorting to loading all of C<%Config>
you can examine the content of the C<@INC> array like so:
(TBT)

    if (grep(/VMS_AXP/, @INC)) {
        print "I'm on Alpha!\n";

    } elsif (grep(/VMS_VAX/, @INC)) {
        print "I'm on VAX!\n";

    } elsif (grep(/VMS_IA64/, @INC)) {
        print "I'm on IA64!\n";

    } else {
        print "I'm not so sure about where $^O is...\n";
    }

=begin original

In general, the significant differences should only be if Perl is running
on VMS_VAX or one of the 64 bit OpenVMS platforms.

=end original

In general, the significant differences should only be if Perl is running
on VMS_VAX or one of the 64 bit OpenVMS platforms.
(TBT)

=begin original

On VMS, perl determines the UTC offset from the C<SYS$TIMEZONE_DIFFERENTIAL>
logical name.  Although the VMS epoch began at 17-NOV-1858 00:00:00.00,
calls to C<localtime> are adjusted to count offsets from
01-JAN-1970 00:00:00.00, just like Unix.

=end original

On VMS, perl determines the UTC offset from the C<SYS$TIMEZONE_DIFFERENTIAL>
logical name.  Although the VMS epoch began at 17-NOV-1858 00:00:00.00,
calls to C<localtime> are adjusted to count offsets from
01-JAN-1970 00:00:00.00, just like Unix.
(TBT)

=begin original

Also see:

=end original

以下も参照してください:

=over 4

=item *

=begin original

F<README.vms> (installed as L<README_vms>), L<perlvms>

=end original

F<README.vms> (L<README_vms> としてインストールされます), L<perlvms>

=item *

=begin original

vmsperl list, vmsperl-subscribe@perl.org

=end original

vmsperl メーリングリスト: vmsperl-subscribe@perl.org

=item *

=begin original

vmsperl on the web, http://www.sidhe.org/vmsperl/index.html

=end original

web 上の vmsperl: http://www.sidhe.org/vmsperl/index.html

=back

=head2 VOS

=begin original

Perl on VOS is discussed in F<README.vos> in the perl distribution
(installed as L<perlvos>).  Perl on VOS can accept either VOS- or
Unix-style file specifications as in either of the following:

=end original

VOS での Perl は perl 配布の F<README.vos> (L<perlvos> として
インストールされます) で議論されています。
VOS での Perl は、以下のどちらかのようにして、VOS 形式と
Unix 形式のどちらのファイル指定も受け付けます:

    $ perl -ne "print if /perl_setup/i" >system>notices
    $ perl -ne "print if /perl_setup/i" /system/notices

=begin original

or even a mixture of both as in:

=end original

あるいは両方を混ぜて:

    $ perl -ne "print if /perl_setup/i" >system/notices

=begin original

Even though VOS allows the slash character to appear in object
names, because the VOS port of Perl interprets it as a pathname
delimiting character, VOS files, directories, or links whose names
contain a slash character cannot be processed.  Such files must be
renamed before they can be processed by Perl.  Note that VOS limits
file names to 32 or fewer characters, file names cannot start with a
C<-> character, or contain any character matching C<< tr/ !%&'()*+;<>?// >>

=end original

Even though VOS allows the slash character to appear in object
names, because the VOS port of Perl interprets it as a pathname
delimiting character, VOS files, directories, or links whose names
contain a slash character cannot be processed.  Such files must be
renamed before they can be processed by Perl.  Note that VOS limits
file names to 32 or fewer characters, file names cannot start with a
C<-> character, or contain any character matching C<< tr/ !%&'()*+;<>?// >>
(TBT)

=begin original

The value of C<$^O> on VOS is "VOS".  To determine the architecture that
you are running on without resorting to loading all of C<%Config> you
can examine the content of the @INC array like so:

=end original

The value of C<$^O> on VOS is "VOS".  To determine the architecture that
you are running on without resorting to loading all of C<%Config> you
can examine the content of the @INC array like so:
(TBT)

    if ($^O =~ /VOS/) {
        print "I'm on a Stratus box!\n";
    } else {
        print "I'm not on a Stratus box!\n";
        die;
    }

=begin original

Also see:

=end original

以下も参照してください:

=over 4

=item *

=begin original

F<README.vos> (installed as L<perlvos>)

=end original

F<README.vos> (L<perlvos> としてインストールされます)

=item *

=begin original

The VOS mailing list.

=end original

VOS メーリングリスト。

=begin original

There is no specific mailing list for Perl on VOS.  You can post
comments to the comp.sys.stratus newsgroup, or subscribe to the general
Stratus mailing list.  Send a letter with "subscribe Info-Stratus" in
the message body to majordomo@list.stratagy.com.

=end original

There is no specific mailing list for Perl on VOS.  You can post
comments to the comp.sys.stratus newsgroup, or subscribe to the general
Stratus mailing list.  Send a letter with "subscribe Info-Stratus" in
the message body to majordomo@list.stratagy.com.
(TBT)

=item *

=begin original

VOS Perl on the web at http://ftp.stratus.com/pub/vos/posix/posix.html

=end original

web 上の VOS Perl: http://ftp.stratus.com/pub/vos/posix/posix.html

=back

=head2 EBCDIC Platforms

(EBCDIC プラットフォーム)

=begin original

Recent versions of Perl have been ported to platforms such as OS/400 on
AS/400 minicomputers as well as OS/390, VM/ESA, and BS2000 for S/390
Mainframes.  Such computers use EBCDIC character sets internally (usually
Character Code Set ID 0037 for OS/400 and either 1047 or POSIX-BC for S/390
systems).  On the mainframe perl currently works under the "Unix system
services for OS/390" (formerly known as OpenEdition), VM/ESA OpenEdition, or
the BS200 POSIX-BC system (BS2000 is supported in perl 5.6 and greater).
See L<perlos390> for details.  Note that for OS/400 there is also a port of
Perl 5.8.1/5.9.0 or later to the PASE which is ASCII-based (as opposed to
ILE which is EBCDIC-based), see L<perlos400>. 

=end original

最近のバージョンの Perl は AS/400 マイクロコンピュータでの OS/400、
S/390 メインフレームでの OS/390, VM/ESA, BS2000 のようなプラットフォームに
移植されています。
Such computers use EBCDIC character sets internally (usually
Character Code Set ID 0037 for OS/400 and either 1047 or POSIX-BC for S/390
systems).  On the mainframe perl currently works under the "Unix system
services for OS/390" (formerly known as OpenEdition), VM/ESA OpenEdition, or
the BS200 POSIX-BC system (BS2000 is supported in perl 5.6 and greater).
See L<perlos390> for details.  Note that for OS/400 there is also a port of
Perl 5.8.1/5.9.0 or later to the PASE which is ASCII-based (as opposed to
ILE which is EBCDIC-based), see L<perlos400>. 
(TBT)

=begin original

As of R2.5 of USS for OS/390 and Version 2.3 of VM/ESA these Unix
sub-systems do not support the C<#!> shebang trick for script invocation.
Hence, on OS/390 and VM/ESA perl scripts can be executed with a header
similar to the following simple script:

=end original

As of R2.5 of USS for OS/390 and Version 2.3 of VM/ESA these Unix
sub-systems do not support the C<#!> shebang trick for script invocation.
Hence, on OS/390 and VM/ESA perl scripts can be executed with a header
similar to the following simple script:
(TBT)

    : # use perl
        eval 'exec /usr/local/bin/perl -S $0 ${1+"$@"}'
            if 0;
    #!/usr/local/bin/perl     # just a comment really

    print "Hello from perl!\n";

=begin original

OS/390 will support the C<#!> shebang trick in release 2.8 and beyond.
Calls to C<system> and backticks can use POSIX shell syntax on all
S/390 systems.

=end original

OS/390 will support the C<#!> shebang trick in release 2.8 and beyond.
Calls to C<system> and backticks can use POSIX shell syntax on all
S/390 systems.
(TBT)

=begin original

On the AS/400, if PERL5 is in your library list, you may need
to wrap your perl scripts in a CL procedure to invoke them like so:

=end original

On the AS/400, if PERL5 is in your library list, you may need
to wrap your perl scripts in a CL procedure to invoke them like so:
(TBT)

    BEGIN
      CALL PGM(PERL5/PERL) PARM('/QOpenSys/hello.pl')
    ENDPGM

=begin original

This will invoke the perl script F<hello.pl> in the root of the
QOpenSys file system.  On the AS/400 calls to C<system> or backticks
must use CL syntax.

=end original

This will invoke the perl script F<hello.pl> in the root of the
QOpenSys file system.  On the AS/400 calls to C<system> or backticks
must use CL syntax.
(TBT)

=begin original

On these platforms, bear in mind that the EBCDIC character set may have
an effect on what happens with some perl functions (such as C<chr>,
C<pack>, C<print>, C<printf>, C<ord>, C<sort>, C<sprintf>, C<unpack>), as
well as bit-fiddling with ASCII constants using operators like C<^>, C<&>
and C<|>, not to mention dealing with socket interfaces to ASCII computers
(see L<"Newlines">).

=end original

On these platforms, bear in mind that the EBCDIC character set may have
an effect on what happens with some perl functions (such as C<chr>,
C<pack>, C<print>, C<printf>, C<ord>, C<sort>, C<sprintf>, C<unpack>), as
well as bit-fiddling with ASCII constants using operators like C<^>, C<&>
and C<|>, not to mention dealing with socket interfaces to ASCII computers
(see L<"Newlines">).
(TBT)

=begin original

Fortunately, most web servers for the mainframe will correctly
translate the C<\n> in the following statement to its ASCII equivalent
(C<\r> is the same under both Unix and OS/390 & VM/ESA):

=end original

Fortunately, most web servers for the mainframe will correctly
translate the C<\n> in the following statement to its ASCII equivalent
(C<\r> is the same under both Unix and OS/390 & VM/ESA):
(TBT)

    print "Content-type: text/html\r\n\r\n";

=begin original

The values of C<$^O> on some of these platforms includes:

=end original

これらのプラットフォームの C<$^O> の値は以下のようなものです:

    uname         $^O        $Config{'archname'}
    --------------------------------------------
    OS/390        os390      os390
    OS400         os400      os400
    POSIX-BC      posix-bc   BS2000-posix-bc
    VM/ESA        vmesa      vmesa

=begin original

Some simple tricks for determining if you are running on an EBCDIC
platform could include any of the following (perhaps all):

=end original

Some simple tricks for determining if you are running on an EBCDIC
platform could include any of the following (perhaps all):
(TBT)

    if ("\t" eq "\05")   { print "EBCDIC may be spoken here!\n"; }

    if (ord('A') == 193) { print "EBCDIC may be spoken here!\n"; }

    if (chr(169) eq 'z') { print "EBCDIC may be spoken here!\n"; }

=begin original

One thing you may not want to rely on is the EBCDIC encoding
of punctuation characters since these may differ from code page to code
page (and once your module or script is rumoured to work with EBCDIC,
folks will want it to work with all EBCDIC character sets).

=end original

One thing you may not want to rely on is the EBCDIC encoding
of punctuation characters since these may differ from code page to code
page (and once your module or script is rumoured to work with EBCDIC,
folks will want it to work with all EBCDIC character sets).
(TBT)

=begin original

Also see:

=end original

以下も参照してください:

=over 4

=item *

=begin original

L<perlos390>, F<README.os390>, F<perlbs2000>, F<README.vmesa>,
L<perlebcdic>.

=end original

L<perlos390>, F<README.os390>, F<perlbs2000>, F<README.vmesa>,
L<perlebcdic>

=item *

=begin original

The perl-mvs@perl.org list is for discussion of porting issues as well as
general usage issues for all EBCDIC Perls.  Send a message body of
"subscribe perl-mvs" to majordomo@perl.org.

=end original

The perl-mvs@perl.org list is for discussion of porting issues as well as
general usage issues for all EBCDIC Perls.  Send a message body of
"subscribe perl-mvs" to majordomo@perl.org.
(TBT)

=item *

=begin original

AS/400 Perl information at
http://as400.rochester.ibm.com/
as well as on CPAN in the F<ports/> directory.

=end original

AS/400 Perl information at
http://as400.rochester.ibm.com/
as well as on CPAN in the F<ports/> directory.
(TBT)

=back

=head2 Acorn RISC OS

=begin original

Because Acorns use ASCII with newlines (C<\n>) in text files as C<\012> like
Unix, and because Unix filename emulation is turned on by default, 
most simple scripts will probably work "out of the box".  The native
filesystem is modular, and individual filesystems are free to be
case-sensitive or insensitive, and are usually case-preserving.  Some
native filesystems have name length limits, which file and directory
names are silently truncated to fit.  Scripts should be aware that the
standard filesystem currently has a name length limit of B<10>
characters, with up to 77 items in a directory, but other filesystems
may not impose such limitations.

=end original

Acorns は Unix と同様 ASCII を使い、テキストファイルの改行 (C<\n>) に
C<\012> を使うのと、Unix ファイル名エミュレーションがデフォルトで
有効なので、ほとんどの単純なスクリプトはおそらく「そのまま」で動作します。
ネイティブなファイルシステムはモジュラー形式で、個々のファイルシステムは
大文字小文字を区別するかしないかは関係なく、普通は大文字小文字を保存します。
ネイティブなファイルシステムの一部は名前の長さに制限があり、
ファイル名とディレクトリ名は収まるように暗黙に切り詰められます。
スクリプトは、標準ファイルシステムは名前の長さが B<10> に制限され、一つの
ディレクトリに77 アイテムまでに制限されることに注意するべきです。
しかし他のファイルシステムはこのような制限はないかもしれません。

=begin original

Native filenames are of the form

=end original

ネイティブなファイル名は以下の形式です:

    Filesystem#Special_Field::DiskName.$.Directory.Directory.File

=begin original

where

=end original

それぞれは以下の通りです:

    Special_Field is not usually present, but may contain . and $ .
    Filesystem =~ m|[A-Za-z0-9_]|
    DsicName   =~ m|[A-Za-z0-9_/]|
    $ represents the root directory
    . is the path separator
    @ is the current directory (per filesystem but machine global)
    ^ is the parent directory
    Directory and File =~ m|[^\0- "\.\$\%\&:\@\\^\|\177]+|

=begin original

The default filename translation is roughly C<tr|/.|./|;>

=end original

デフォルトファイル名変換はだいたい C<tr|/.|./|;> です。

=begin original

Note that C<"ADFS::HardDisk.$.File" ne 'ADFS::HardDisk.$.File'> and that
the second stage of C<$> interpolation in regular expressions will fall
foul of the C<$.> if scripts are not careful.

=end original

Note that C<"ADFS::HardDisk.$.File" ne 'ADFS::HardDisk.$.File'> and that
the second stage of C<$> interpolation in regular expressions will fall
foul of the C<$.> if scripts are not careful.
(TBT)

=begin original

Logical paths specified by system variables containing comma-separated
search lists are also allowed; hence C<System:Modules> is a valid
filename, and the filesystem will prefix C<Modules> with each section of
C<System$Path> until a name is made that points to an object on disk.
Writing to a new file C<System:Modules> would be allowed only if
C<System$Path> contains a single item list.  The filesystem will also
expand system variables in filenames if enclosed in angle brackets, so
C<< <System$Dir>.Modules >> would look for the file
S<C<$ENV{'System$Dir'} . 'Modules'>>.  The obvious implication of this is
that B<fully qualified filenames can start with C<< <> >>> and should
be protected when C<open> is used for input.

=end original

Logical paths specified by system variables containing comma-separated
search lists are also allowed; hence C<System:Modules> is a valid
filename, and the filesystem will prefix C<Modules> with each section of
C<System$Path> until a name is made that points to an object on disk.
Writing to a new file C<System:Modules> would be allowed only if
C<System$Path> contains a single item list.  The filesystem will also
expand system variables in filenames if enclosed in angle brackets, so
C<< <System$Dir>.Modules >> would look for the file
S<C<$ENV{'System$Dir'} . 'Modules'>>.  The obvious implication of this is
that B<fully qualified filenames can start with C<< <> >>> and should
be protected when C<open> is used for input.
(TBT)

=begin original

Because C<.> was in use as a directory separator and filenames could not
be assumed to be unique after 10 characters, Acorn implemented the C
compiler to strip the trailing C<.c> C<.h> C<.s> and C<.o> suffix from
filenames specified in source code and store the respective files in
subdirectories named after the suffix.  Hence files are translated:

=end original

Because C<.> was in use as a directory separator and filenames could not
be assumed to be unique after 10 characters, Acorn implemented the C
compiler to strip the trailing C<.c> C<.h> C<.s> and C<.o> suffix from
filenames specified in source code and store the respective files in
subdirectories named after the suffix.  Hence files are translated:
(TBT)

    foo.h           h.foo
    C:foo.h         C:h.foo        (logical path variable)
    sys/os.h        sys.h.os       (C compiler groks Unix-speak)
    10charname.c    c.10charname
    10charname.o    o.10charname
    11charname_.c   c.11charname   (assuming filesystem truncates at 10)

=begin original

The Unix emulation library's translation of filenames to native assumes
that this sort of translation is required, and it allows a user-defined list
of known suffixes that it will transpose in this fashion.  This may
seem transparent, but consider that with these rules C<foo/bar/baz.h>
and C<foo/bar/h/baz> both map to C<foo.bar.h.baz>, and that C<readdir> and
C<glob> cannot and do not attempt to emulate the reverse mapping.  Other
C<.>'s in filenames are translated to C</>.

=end original

The Unix emulation library's translation of filenames to native assumes
that this sort of translation is required, and it allows a user-defined list
of known suffixes that it will transpose in this fashion.  This may
seem transparent, but consider that with these rules C<foo/bar/baz.h>
and C<foo/bar/h/baz> both map to C<foo.bar.h.baz>, and that C<readdir> and
C<glob> cannot and do not attempt to emulate the reverse mapping.  Other
C<.>'s in filenames are translated to C</>.
(TBT)

=begin original

As implied above, the environment accessed through C<%ENV> is global, and
the convention is that program specific environment variables are of the
form C<Program$Name>.  Each filesystem maintains a current directory,
and the current filesystem's current directory is the B<global> current
directory.  Consequently, sociable programs don't change the current
directory but rely on full pathnames, and programs (and Makefiles) cannot
assume that they can spawn a child process which can change the current
directory without affecting its parent (and everyone else for that
matter).

=end original

As implied above, the environment accessed through C<%ENV> is global, and
the convention is that program specific environment variables are of the
form C<Program$Name>.  Each filesystem maintains a current directory,
and the current filesystem's current directory is the B<global> current
directory.  Consequently, sociable programs don't change the current
directory but rely on full pathnames, and programs (and Makefiles) cannot
assume that they can spawn a child process which can change the current
directory without affecting its parent (and everyone else for that
matter).
(TBT)

=begin original

Because native operating system filehandles are global and are currently 
allocated down from 255, with 0 being a reserved value, the Unix emulation
library emulates Unix filehandles.  Consequently, you can't rely on
passing C<STDIN>, C<STDOUT>, or C<STDERR> to your children.

=end original

Because native operating system filehandles are global and are currently 
allocated down from 255, with 0 being a reserved value, the Unix emulation
library emulates Unix filehandles.  Consequently, you can't rely on
passing C<STDIN>, C<STDOUT>, or C<STDERR> to your children.
(TBT)

=begin original

The desire of users to express filenames of the form
C<< <Foo$Dir>.Bar >> on the command line unquoted causes problems,
too: C<``> command output capture has to perform a guessing game.  It
assumes that a string C<< <[^<>]+\$[^<>]> >> is a
reference to an environment variable, whereas anything else involving
C<< < >> or C<< > >> is redirection, and generally manages to be 99%
right.  Of course, the problem remains that scripts cannot rely on any
Unix tools being available, or that any tools found have Unix-like command
line arguments.

=end original

The desire of users to express filenames of the form
C<< <Foo$Dir>.Bar >> on the command line unquoted causes problems,
too: C<``> command output capture has to perform a guessing game.  It
assumes that a string C<< <[^<>]+\$[^<>]> >> is a
reference to an environment variable, whereas anything else involving
C<< < >> or C<< > >> is redirection, and generally manages to be 99%
right.  Of course, the problem remains that scripts cannot rely on any
Unix tools being available, or that any tools found have Unix-like command
line arguments.
(TBT)

=begin original

Extensions and XS are, in theory, buildable by anyone using free
tools.  In practice, many don't, as users of the Acorn platform are
used to binary distributions.  MakeMaker does run, but no available
make currently copes with MakeMaker's makefiles; even if and when
this should be fixed, the lack of a Unix-like shell will cause
problems with makefile rules, especially lines of the form C<cd
sdbm && make all>, and anything using quoting.

=end original

Extensions and XS are, in theory, buildable by anyone using free
tools.  In practice, many don't, as users of the Acorn platform are
used to binary distributions.  MakeMaker does run, but no available
make currently copes with MakeMaker's makefiles; even if and when
this should be fixed, the lack of a Unix-like shell will cause
problems with makefile rules, especially lines of the form C<cd
sdbm && make all>, and anything using quoting.
(TBT)

=begin original

"S<RISC OS>" is the proper name for the operating system, but the value
in C<$^O> is "riscos" (because we don't like shouting).

=end original

"S<RISC OS>" is the proper name for the operating system, but the value
in C<$^O> is "riscos" (because we don't like shouting).
(TBT)

=head2 Other perls

(その他の perl)

=begin original

Perl has been ported to many platforms that do not fit into any of
the categories listed above.  Some, such as AmigaOS, Atari MiNT,
BeOS, HP MPE/iX, QNX, Plan 9, and VOS, have been well-integrated
into the standard Perl source code kit.  You may need to see the
F<ports/> directory on CPAN for information, and possibly binaries,
for the likes of: aos, Atari ST, lynxos, riscos, Novell Netware,
Tandem Guardian, I<etc.>  (Yes, we know that some of these OSes may
fall under the Unix category, but we are not a standards body.)

=end original

Perl は上述したカテゴリ一覧のどれにも当てはまらないような多くの
プラットフォームに移植されています。
AmigaOS, Atari MiNT, BeOS, HP MPE/iX, QNX, Plan 9, VOS のような
一部のものは標準 Perl ソースコードキットとよく統合されています。
You may need to see the
F<ports/> directory on CPAN for information, and possibly binaries,
for the likes of: aos, Atari ST, lynxos, riscos, Novell Netware,
Tandem Guardian, I<etc.>  (Yes, we know that some of these OSes may
fall under the Unix category, but we are not a standards body.)
(TBT)

=begin original

Some approximate operating system names and their C<$^O> values
in the "OTHER" category include:

=end original

"OTHER" カテゴリにあるいくつかの近似オペレーティングシステム名と
その C<$^O> の値は以下のようなものです:

    OS            $^O        $Config{'archname'}
    ------------------------------------------
    Amiga DOS     amigaos    m68k-amigos
    BeOS          beos
    MPE/iX        mpeix      PA-RISC1.1

=begin original

See also:

=end original

以下も参照してください:

=over 4

=item *

=begin original

Amiga, F<README.amiga> (installed as L<perlamiga>).

=end original

Amiga, F<README.amiga> (L<perlamiga> としてインストールされます)

=item *

=begin original

Atari, F<README.mint> and Guido Flohr's web page
http://stud.uni-sb.de/~gufl0000/

=end original

Atari, F<README.mint> と Guido Flohr の web ページ
http://stud.uni-sb.de/~gufl0000/

=item *

Be OS, F<README.beos>

=item *

=begin original

HP 300 MPE/iX, F<README.mpeix> and Mark Bixby's web page
http://www.bixby.org/mark/perlix.html

=end original

HP 300 MPE/iX, F<README.mpeix> と Mark Bixby の web ページ
http://www.bixby.org/mark/perlix.html

=item *

=begin original

A free perl5-based PERL.NLM for Novell Netware is available in
precompiled binary and source code form from http://www.novell.com/
as well as from CPAN.

=end original

Novell Netware 用のフリーの perl5 ベースの PERL.NLM は、コンパイル済みの
バイナリとソースコード形式が http://www.novell.com/ および CPAN から
利用可能です。

=item  *

S<Plan 9>, F<README.plan9>

=back

=head1 FUNCTION IMPLEMENTATIONS

(関数実装)

=begin original

Listed below are functions that are either completely unimplemented
or else have been implemented differently on various platforms.
Following each description will be, in parentheses, a list of
platforms that the description applies to.

=end original

以下の一覧は、プラットフォームによって全く実装されていないか、
さもなければ異なった形で実装されている関数です。
それぞれの記述にあるかっこは、記述が適用されるプラットフォームの一覧です。


=begin original

The list may well be incomplete, or even wrong in some places.  When
in doubt, consult the platform-specific README files in the Perl
source distribution, and any other documentation resources accompanying
a given port.

=end original

一覧は不完全であったり、一部で間違っている可能性があります。
疑わしいときは、Perl ソース配布のプラットフォーム固有の README ファイルや、
プラットフォームに関連するその他の文書リソースをチェックしてください。

=begin original

Be aware, moreover, that even among Unix-ish systems there are variations.

=end original

さらに、Unix 風システムにもバリエーションがあることに注意してください。

=begin original

For many functions, you can also query C<%Config>, exported by
default from the Config module.  For example, to check whether the
platform has the C<lstat> call, check C<$Config{d_lstat}>.  See
L<Config> for a full description of available variables.

=end original

多くの関数に関して、Config モジュールからデフォルトでエクスポートされる
C<%Config> に問い合わせることもできます。
例えば、プラットフォームに C<lstat> 呼び出しがあるかどうかを調べるには、
C<$Config{d_lstat}> を調べてください。
利用可能な変数の完全な説明については L<Config> を参照してください。

=head2 Alphabetical Listing of Perl Functions

(Perl 関数のアルファベット順リスト)

=over 8

=item -X

=begin original

C<-r>, C<-w>, and C<-x> have a limited meaning only; directories
and applications are executable, and there are no uid/gid
considerations.  C<-o> is not supported.  (S<Mac OS>)

=end original

C<-r>, C<-w>, C<-x> は限られた意味しかありません; ディレクトリと
アプリケーションは実行可能で、uid/gid という概念はありません。
C<-o> は対応していません。
(S<Mac OS>)

=begin original

C<-w> only inspects the read-only file attribute (FILE_ATTRIBUTE_READONLY),
which determines whether the directory can be deleted, not whether it can
be written to. Directories always have read and write access unless denied
by discretionary access control lists (DACLs).  (S<Win32>)

=end original

C<-w> は読み込み専用ファイル属性 (FILE_ATTRIBUTE_READONLY) のみを調べます;
これはディレクトリに書き込めるかどうかではなくディレクトリが
削除できるかどうかを決定します。
ディレクトリは、随意アクセス制御リスト (DACL) で拒否されない限り、常に
読み書きアクセスできます。
(S<Win32>)

=begin original

C<-r>, C<-w>, C<-x>, and C<-o> tell whether the file is accessible,
which may not reflect UIC-based file protections.  (VMS)

=end original

C<-r>, C<-w>, C<-x>, C<-o> はファイルがアクセス可能かどうかを返し、
UIC ベースのファイル保護を反映しません。
(VMS)

=begin original

C<-s> returns the size of the data fork, not the total size of data fork
plus resource fork.  (S<Mac OS>).

=end original

C<-s> はデータフォークとリソースフォークの合計サイズではなく、
データフォークのサイズを返します。
(S<Mac OS>)

=begin original

C<-s> by name on an open file will return the space reserved on disk,
rather than the current extent.  C<-s> on an open filehandle returns the
current size.  (S<RISC OS>)

=end original

開いているファイルへの名前での C<-s> は、現在のエクステントではなく、
ディスク上に予約されている空間を返します。
開いているファイルハンドルへの C<-s> は現在のサイズを返します。
(S<RISC OS>)

=begin original

C<-R>, C<-W>, C<-X>, C<-O> are indistinguishable from C<-r>, C<-w>,
C<-x>, C<-o>. (S<Mac OS>, Win32, VMS, S<RISC OS>)

=end original

C<-R>, C<-W>, C<-X>, C<-O> は、C<-r>, C<-w>, C<-x>, C<-o> と
区別が付きません。
(S<Mac OS>, Win32, VMS, S<RISC OS>)

=begin original

C<-b>, C<-c>, C<-k>, C<-g>, C<-p>, C<-u>, C<-A> are not implemented.
(S<Mac OS>)

=end original

C<-b>, C<-c>, C<-k>, C<-g>, C<-p>, C<-u>, C<-A> は実装されていません。
(S<Mac OS>)

=begin original

C<-g>, C<-k>, C<-l>, C<-p>, C<-u>, C<-A> are not particularly meaningful.
(Win32, VMS, S<RISC OS>)

=end original

C<-g>, C<-k>, C<-l>, C<-p>, C<-u>, C<-A> は特に意味はありません。
(Win32, VMS, S<RISC OS>)

=begin original

C<-d> is true if passed a device spec without an explicit directory.
(VMS)

=end original

C<-d> は、明示的なディレクトリなしに device spec を渡されると真になります。
(VMS)

=begin original

C<-T> and C<-B> are implemented, but might misclassify Mac text files
with foreign characters; this is the case will all platforms, but may
affect S<Mac OS> often.  (S<Mac OS>)

=end original

C<-T> と C<-B> は実装されていますが、外国語文字が含まれた
Mac text ファイルを間違って判定することがありました; これは全ての
プラットフォームで起こりますが、S<Mac OS> でよく影響を受けます。
(S<Mac OS>)

=begin original

C<-x> (or C<-X>) determine if a file ends in one of the executable
suffixes.  C<-S> is meaningless.  (Win32)

=end original

C<-x> (または C<-X>) はファイルが実行可能ファイルの拡張子のどれかで
終わっているかを判定します。
C<-S> は無意味です。
(Win32)

=begin original

C<-x> (or C<-X>) determine if a file has an executable file type.
(S<RISC OS>)

=end original

C<-x> (または C<-X>) ファイルが実行可能ファイル型かどうかを
決定します。
(S<RISC OS>)

=item atan2

=begin original

Due to issues with various CPUs, math libraries, compilers, and standards,
results for C<atan2()> may vary depending on any combination of the above.
Perl attempts to conform to the Open Group/IEEE standards for the results
returned from C<atan2()>, but cannot force the issue if the system Perl is
run on does not allow it.  (Tru64, HP-UX 10.20) 

=end original

様々な CPU、数値演算ライブラリ、コンパイラ、標準の問題により、C<atan2()> の
結果は上述の組み合わせに依存して様々に異なります。
Perl は C<atan2()> から返される結果を Open Group/IEEE 標準に
準拠させようとしますが、システムの Perl がそれを許さないところ
(Tru64, HP-UX 10.20) で動作している場合は問題を強制させることはできません。

=begin original

The current version of the standards for C<atan2()> is available at 
L<http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html>.

=end original

C<atan2()> の現在のバージョンの標準は
L<http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html> で
利用可能です。

=item binmode

=begin original

Meaningless.  (S<Mac OS>, S<RISC OS>)

=end original

無意味です。
(S<Mac OS>, S<RISC OS>)

=begin original

Reopens file and restores pointer; if function fails, underlying
filehandle may be closed, or pointer may be in a different position.
(VMS)

=end original

ファイルの再オープンとポインタの復帰; 関数が失敗すると、基となる
ファイルハンドルが閉じられたり、ポインタが異なった位置を示すことが
あります。
(VMS)

=begin original

The value returned by C<tell> may be affected after the call, and
the filehandle may be flushed. (Win32)

=end original

C<tell> から返された値はこの呼び出しの後に影響を受けることがあり、
ファイルハンドルがフラッシュされることがあります。
(Win32)

=item chmod

=begin original

Only limited meaning.  Disabling/enabling write permission is mapped to
locking/unlocking the file. (S<Mac OS>)

=end original

限られた意味しかありません。
書き込み権限の無効/有効はファイルのロック/アンロックに割り当てられます。
(S<Mac OS>)

=begin original

Only good for changing "owner" read-write access, "group", and "other"
bits are meaningless. (Win32)

=end original

「所有者」読み書きアクセスの変更のみ動作し、「グループ」「その他」のビットは
無意味です。
(Win32)

=begin original

Only good for changing "owner" and "other" read-write access. (S<RISC OS>)

=end original

「所有者」と「その他」の読み書きアクセスの変更のみ動作します。
(S<RISC OS>)

=begin original

Access permissions are mapped onto VOS access-control list changes. (VOS)

=end original

アクセス許可は VOS アクセス制御リスト変更に割り当てられます。
(VOS)

=begin original

The actual permissions set depend on the value of the C<CYGWIN>
in the SYSTEM environment settings.  (Cygwin)

=end original

実際の許可は SYSTEM 環境設定の C<CYGWIN> の値に依存して設定されます。
(Cygwin)

=item chown

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=begin original

Does nothing, but won't fail. (Win32)

=end original

何もしませんが失敗もしません。
(Win32)

=begin original

A little funky, because VOS's notion of ownership is a little funky (VOS).

=end original

VOS での所有者の概念は少し変なので、少し変です。
(VOS)

=item chroot

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<Plan 9>, S<RISC OS>, VOS, VM/ESA)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<Plan 9>, S<RISC OS>, VOS, VM/ESA)

=item crypt

=begin original

May not be available if library or source was not provided when building
perl. (Win32)

=end original

perl のビルド時にライブラリかソースが提供されていないと
利用できないかもしれません。
(Win32)

=item dbmclose

=begin original

Not implemented. (VMS, S<Plan 9>, VOS)

=end original

実装されていません。
(VMS, S<Plan 9>, VOS)

=item dbmopen

=begin original

Not implemented. (VMS, S<Plan 9>, VOS)

=end original

実装されていません。
(VMS, S<Plan 9>, VOS)

=item dump

=begin original

Not useful. (S<Mac OS>, S<RISC OS>)

=end original

使い道はありません。
(S<Mac OS>, S<RISC OS>)

=begin original

Not supported. (Cygwin, Win32)

=end original

対応していません。
(Cygwin, Win32)

=begin original

Invokes VMS debugger. (VMS)

=end original

VMS デバッガを起動します。
(VMS)

=item exec

=begin original

Not implemented. (S<Mac OS>)

=end original

実装されていません。
(S<Mac OS>)

=begin original

Implemented via Spawn. (VM/ESA)

=end original

Spawn で実装されています。
(VM/ESA)

=begin original

Does not automatically flush output handles on some platforms.
(SunOS, Solaris, HP-UX)

=end original

一部のプラットフォームでは出力ハンドルを自動的にフラッシュしません。
(SunOS, Solaris, HP-UX)

=item exit

=begin original

Emulates UNIX exit() (which considers C<exit 1> to indicate an error) by
mapping the C<1> to SS$_ABORT (C<44>).  This behavior may be overridden
with the pragma C<use vmsish 'exit'>.  As with the CRTL's exit()
function, C<exit 0> is also mapped to an exit status of SS$_NORMAL
(C<1>); this mapping cannot be overridden.  Any other argument to exit()
is used directly as Perl's exit status.  On VMS, unless the future
POSIX_EXIT mode is enabled, the exit code should always be a valid
VMS exit code and not a generic number.  When the POSIX_EXIT mode is
enabled, a generic number will be encoded in a method compatible with
the C library _POSIX_EXIT macro so that it can be decoded by other
programs, particularly ones written in C, like the GNV package.  (VMS)

=end original

C<1> を SS$_ABORT (C<44>) にマッピングすることで UNIX の (エラーを示すために
C<exit 1> を使う) exit() をエミュレートします。
この振る舞いはプラグマ C<use vmsish 'exit'> で上書きされます。
CRTL の exit() 関数と同様、C<exit 0> は SS$_NORMAL の終了ステータス
(C<1>) にマッピングされます; このマッピングは上書きできません。
exit() へのその他の引数は直接 Perl の終了ステータスとして使われます。
VMS では、将来の POSIX_EXIT モードが有効でない限り、終了コードは
常に有効な VMS 終了コードであり、一般的な数値ではないべきです。
POSIX_EXIT モードが有効なら、一般的な数値は C ライブラリの _POSIX_EXIT と
互換性のあるメソッドにエンコードされるので、その他のプログラム、特に
GNV パッケージのような C で書かれているプログラムでデコードできます。
(VMS)

=item fcntl

=begin original

Not implemented. (Win32)
Some functions available based on the version of VMS. (VMS)

=end original

実装されていません。
(Win32)
一部の関数は VMS のバージョンによっては利用可能です。
(VMS)

=item flock

=begin original

Not implemented (S<Mac OS>, VMS, S<RISC OS>, VOS).

=end original

実装されていません。
(S<Mac OS>, VMS, S<RISC OS>, VOS)

=begin original

Available only on Windows NT (not on Windows 95). (Win32)

=end original

Windows NT でのみ利用可能です (Windows 95 では動作しません)。
(Win32)

=item fork

=begin original

Not implemented. (S<Mac OS>, AmigaOS, S<RISC OS>, VM/ESA, VMS)

=end original

実装されていません。
(S<Mac OS>, AmigaOS, S<RISC OS>, VM/ESA, VMS)

=begin original

Emulated using multiple interpreters.  See L<perlfork>.  (Win32)

=end original

複数のインタプリタを使ってエミュレートされています。
L<perlfork> を参照してください。
(Win32)

=begin original

Does not automatically flush output handles on some platforms.
(SunOS, Solaris, HP-UX)

=end original

一部のプラットフォームでは出力ハンドルを自動的にフラッシュしません。
(SunOS, Solaris, HP-UX)

=item getlogin

=begin original

Not implemented. (S<Mac OS>, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, S<RISC OS>)

=item getpgrp

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>)

=item getppid

=begin original

Not implemented. (S<Mac OS>, Win32, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<RISC OS>)

=item getpriority

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>, VOS, VM/ESA)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>, VOS, VM/ESA)

=item getpwnam

=begin original

Not implemented. (S<Mac OS>, Win32)

=end original

実装されていません。
(S<Mac OS>, Win32)

=begin original

Not useful. (S<RISC OS>)

=end original

使い道はありません。
(S<RISC OS>)

=item getgrnam

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>)

=item getnetbyname

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>)

=item getpwuid

=begin original

Not implemented. (S<Mac OS>, Win32)

=end original

実装されていません。
(S<Mac OS>, Win32)

=begin original

Not useful. (S<RISC OS>)

=end original

使い道はありません。
(S<RISC OS>)

=item getgrgid

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>)

=item getnetbyaddr

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>)

=item getprotobynumber

=begin original

Not implemented. (S<Mac OS>)

=end original

実装されていません。
(S<Mac OS>)

=item getservbyport

=begin original

Not implemented. (S<Mac OS>)

=end original

実装されていません。
(S<Mac OS>)

=item getpwent

=begin original

Not implemented. (S<Mac OS>, Win32, VM/ESA)

=end original

実装されていません。
(S<Mac OS>, Win32, VM/ESA)

=item getgrent

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, VM/ESA)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, VM/ESA)

=item gethostbyname

=begin original

C<gethostbyname('localhost')> does not work everywhere: you may have
to use C<gethostbyname('127.0.0.1')>. (S<Mac OS>, S<Irix 5>)

=end original

C<gethostbyname('localhost')> はどこでも動作するわけではありません:
C<gethostbyname('127.0.0.1')> を使う必要があるかもしれません。
(S<Mac OS>, S<Irix 5>)

=item gethostent

=begin original

Not implemented. (S<Mac OS>, Win32)

=end original

実装されていません。
(S<Mac OS>, Win32)

=item getnetent

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>)

=item getprotoent

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>)

=item getservent

=begin original

Not implemented. (Win32, S<Plan 9>)

=end original

実装されていません。
(Win32, S<Plan 9>)

=item sethostent

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=item setnetent

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=item setprotoent

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>, S<RISC OS>)

=item setservent

=begin original

Not implemented. (S<Plan 9>, Win32, S<RISC OS>)

=end original

実装されていません。
(S<Plan 9>, Win32, S<RISC OS>)

=item endpwent

=begin original

Not implemented. (S<Mac OS>, MPE/iX, VM/ESA, Win32)

=end original

実装されていません。
(S<Mac OS>, MPE/iX, VM/ESA, Win32)

=item endgrent

=begin original

Not implemented. (S<Mac OS>, MPE/iX, S<RISC OS>, VM/ESA, VMS, Win32)

=end original

実装されていません。
(S<Mac OS>, MPE/iX, S<RISC OS>, VM/ESA, VMS, Win32)

=item endhostent

=begin original

Not implemented. (S<Mac OS>, Win32)

=end original

実装されていません。
(S<Mac OS>, Win32)

=item endnetent

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>)

=item endprotoent

=begin original

Not implemented. (S<Mac OS>, Win32, S<Plan 9>)

=end original

実装されていません。
(S<Mac OS>, Win32, S<Plan 9>)

=item endservent

=begin original

Not implemented. (S<Plan 9>, Win32)

=end original

実装されていません。
(S<Plan 9>, Win32)

=item getsockopt SOCKET,LEVEL,OPTNAME

=begin original

Not implemented. (S<Plan 9>)

=end original

実装されていません。
(S<Plan 9>)

=item glob

=begin original

This operator is implemented via the File::Glob extension on most
platforms.  See L<File::Glob> for portability information.

=end original

この演算子はほとんどのプラットフォームでは File::Glob エクステンションで
実装されています。
移植性の情報については L<File::Glob> を参照してください。

=item gmtime

=begin original

Same portability caveats as L<localtime>.

=end original

L<localtime> と同じ移植性の問題があります。

=item ioctl FILEHANDLE,FUNCTION,SCALAR

=begin original

Not implemented. (VMS)

=end original

実装されていません。
(VMS)

=begin original

Available only for socket handles, and it does what the ioctlsocket() call
in the Winsock API does. (Win32)

=end original

ソケットハンドルに対してのみ利用可能で、Winsock API の
ioctlsocket() 呼び出しですることをします。
(Win32)

=begin original

Available only for socket handles. (S<RISC OS>)

=end original

ソケットハンドルに対してのみ利用可能です。
(S<RISC OS>)

=item kill

=begin original

C<kill(0, LIST)> is implemented for the sake of taint checking;
use with other signals is unimplemented. (S<Mac OS>)

=end original

C<kill(0, LIST)> は汚染チェックのために実装されています;
他のシグナルでの使用は実装されていません。
(S<Mac OS>)

=begin original

Not implemented, hence not useful for taint checking. (S<RISC OS>)

=end original

汚染チェックには有用ではないので、実装されていません。
(S<RISC OS>)

=begin original

C<kill()> doesn't have the semantics of C<raise()>, i.e. it doesn't send
a signal to the identified process like it does on Unix platforms.
Instead C<kill($sig, $pid)> terminates the process identified by $pid,
and makes it exit immediately with exit status $sig.  As in Unix, if
$sig is 0 and the specified process exists, it returns true without
actually terminating it. (Win32)

=end original

C<kill()> は C<raise()> の動作はありません; つまり、
Unix プラットフォームで行われるように識別されたプロセスへシグナルを
送りません。
代わりに C<kill($sig, $pid)> は $pid で識別されるプロセスを終了させ、
終了コード $sig で直ちに終了させます。
Unix でのように、$sig が 0 で指定されたプロセスが存在するなら、実際には
終了させずに真を返します。
(Win32)

=begin original

C<kill(-9, $pid)> will terminate the process specified by $pid and
recursively all child processes owned by it.  This is different from
the Unix semantics, where the signal will be delivered to all
processes in the same process group as the process specified by
$pid. (Win32)

=end original

C<kill(-9, $pid)> は $pid で指定されたプロセスと、そのプロセスが
所有している全ての子プロセスを再帰的に終了させます。
これは、$pid で指定されたプロセスと同じプロセスグループの全ての
プロセスにシグナルを送信する、という Unix での動作と異なります。
(Win32)

=begin original

Is not supported for process identification number of 0 or negative
numbers. (VMS)

=end original

プロセス識別番号 0 や負数は対応していません。
(VMS)

=item link

=begin original

Not implemented. (S<Mac OS>, MPE/iX, S<RISC OS>)

=end original

実装されていません。
(S<Mac OS>, MPE/iX, S<RISC OS>)

=begin original

Link count not updated because hard links are not quite that hard
(They are sort of half-way between hard and soft links). (AmigaOS)

=end original

ハードリンクは完全にハードではないので、リンクカウントは更新されません
(これはハードリンクとソフトリンクの中間のようなものです)。
(AmigaOS)

=begin original

Hard links are implemented on Win32 under NTFS only. They are
natively supported on Windows 2000 and later.  On Windows NT they
are implemented using the Windows POSIX subsystem support and the
Perl process will need Administrator or Backup Operator privileges
to create hard links.

=end original

ハードリンクは NTFS の Win32 にのみ実装されています。
これは Windows 2000 以降でネイティブに対応しています。
Windows NT では Windows POSIX サブシステムサポートを使って
実装されていて、Perl プロセスはハードリンクを作るには
Administrator または Backup Operator 権限が必要です。

=begin original

Available on 64 bit OpenVMS 8.2 and later.  (VMS)

=end original

64 ビット OpenVMS 8.2 以降で利用可能です。
(VMS)

=item localtime

=begin original

Because Perl currently relies on the native standard C localtime()
function, it is only safe to use times between 0 and (2**31)-1.  Times
outside this range may result in unexpected behavior depending on your
operating system's implementation of localtime().

=end original

Perl は現在のところネイティブな標準 C localtime() 関数に依存しているので、
0 と (2**31)-1 の間でのみ times を使うのが安全です。
この範囲外の times はオペレーティングシステムの localtime() の実装に依存して
想定外の振る舞いになることがあります。

=item lstat

=begin original

Not implemented. (S<RISC OS>)

=end original

実装されていません。
(S<RISC OS>)

=begin original

Return values (especially for device and inode) may be bogus. (Win32)

=end original

返り値 (特にデバイスと i ノード) は偽物かもしれません。
(Win32)

=item msgctl

=item msgget

=item msgsnd

=item msgrcv

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<Plan 9>, S<RISC OS>, VOS)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<Plan 9>, S<RISC OS>, VOS)

=item open

=begin original

The C<|> variants are supported only if ToolServer is installed.
(S<Mac OS>)

=end original

C<|> 関連は ToolServer がインストールされているときにのみ対応します。
(S<Mac OS>)

=begin original

open to C<|-> and C<-|> are unsupported. (S<Mac OS>, Win32, S<RISC OS>)

=end original

C<|-> と C<-|> へのオープンは対応していません。
(S<Mac OS>, Win32, S<RISC OS>)

=begin original

Opening a process does not automatically flush output handles on some
platforms.  (SunOS, Solaris, HP-UX)

=end original

プロセスをオープンしたときに一部のプラットフォームでは出力ハンドルを自動的に
フラッシュしません。
(SunOS, Solaris, HP-UX)

=item pipe

=begin original

Very limited functionality. (MiNT)

=end original

とても限定した機能しかありません。
(MiNT)

=item readlink

=begin original

Not implemented. (Win32, VMS, S<RISC OS>)

=end original

実装されていません。
(Win32, VMS, S<RISC OS>)

=item rename

=begin original

Can't move directories between directories on different logical volumes. (Win32)

=end original

異なった論理ボリュームのディレクトリの間ではディレクトリは移動できません。
(Win32)

=item select

=begin original

Only implemented on sockets. (Win32, VMS)

=end original

ソケットに対してのみ実装されています。
(Win32, VMS)

=begin original

Only reliable on sockets. (S<RISC OS>)

=end original

ソケットに対してのみ信頼できます。
(S<RISC OS>)

=begin original

Note that the C<select FILEHANDLE> form is generally portable.

=end original

C<select FILEHANDLE> 形式は一般的に移植性があることに注意してください。

=item semctl

=item semget

=item semop

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=item setgrent

=begin original

Not implemented. (S<Mac OS>, MPE/iX, VMS, Win32, S<RISC OS>, VOS)

=end original

実装されていません。
(S<Mac OS>, MPE/iX, VMS, Win32, S<RISC OS>, VOS)

=item setpgrp

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=item setpriority

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=item setpwent

=begin original

Not implemented. (S<Mac OS>, MPE/iX, Win32, S<RISC OS>, VOS)

=end original

実装されていません。
(S<Mac OS>, MPE/iX, Win32, S<RISC OS>, VOS)

=item setsockopt

=begin original

Not implemented. (S<Plan 9>)

=end original

実装されていません。
(S<Plan 9>)

=item shmctl

=item shmget

=item shmread

=item shmwrite

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>, VOS)

=item sockatmark

=begin original

A relatively recent addition to socket functions, may not
be implemented even in UNIX platforms.

=end original

比較的最近に追加されたソケット関数で、UNIX プラットフォームであっても
実装されていないかもしれません。

=item socketpair

=begin original

Not implemented. (S<RISC OS>, VOS, VM/ESA)

=end original

実装されていません。
(S<RISC OS>, VOS, VM/ESA)

=begin original

Available on 64 bit OpenVMS 8.2 and later.  (VMS)

=end original

64 ビット OpenVMS 8.2 以降で利用可能です。
(VMS)

=item stat

=begin original

Platforms that do not have rdev, blksize, or blocks will return these
as '', so numeric comparison or manipulation of these fields may cause
'not numeric' warnings.

=end original

rdev, blksize, blocks がないプラットフォームではこれらは '' を返すので、
これらのフィールドの数値での比較や操作は 'not numeric' 警告を
引き起こします。

=begin original

mtime and atime are the same thing, and ctime is creation time instead of
inode change time. (S<Mac OS>).

=end original

mtime と atime は同じもので、ctime は i ノード変更時刻ではなく作成時刻です。
(S<Mac OS>)

=begin original

ctime not supported on UFS (S<Mac OS X>).

=end original

ctime は UFS では対応していません。
(S<Mac OS X>)

=begin original

ctime is creation time instead of inode change time  (Win32).

=end original

ctime は i ノード変更時刻ではなく作成時刻です。
(Win32)

=begin original

device and inode are not meaningful.  (Win32)

=end original

デバイスと i ノードは無意味です。
(Win32)

=begin original

device and inode are not necessarily reliable.  (VMS)

=end original

デバイスと i ノードは信頼できる必要がありません。
(VMS)

=begin original

mtime, atime and ctime all return the last modification time.  Device and
inode are not necessarily reliable.  (S<RISC OS>)

=end original

mtime, atime, ctime は全て最終更新時刻を返します。
デバイスと i ノードは信頼する必要はありません。
(S<RISC OS>)

=begin original

dev, rdev, blksize, and blocks are not available.  inode is not
meaningful and will differ between stat calls on the same file.  (os2)

=end original

dev, rdev, blksize, blocks は利用できません。
inode は無意味で、同じファイルで stat 呼び出しの間でも異なります。
(os2)

=begin original

some versions of cygwin when doing a stat("foo") and if not finding it
may then attempt to stat("foo.exe") (Cygwin)

=end original

cygwin の一部のバージョンでは、stat("foo") を実行して、もし
見付からなければ stat("foo.exe") を実行しようとします。
(Cygwin)

=begin original

On Win32 stat() needs to open the file to determine the link count
and update attributes that may have been changed through hard links.
Setting ${^WIN32_SLOPPY_STAT} to a true value speeds up stat() by
not performing this operation. (Win32)

=end original

Win32 では stat() は、リンクカウントと、ハードリンクを通して
変更されるかもしれない属性の更新にはファイルを開く必要があります。
${^WIN32_SLOPPY_STAT} を真の値に設定することで、この操作をしないことで
stat() を高速化します。
(Win32)

=item symlink

=begin original

Not implemented. (Win32, S<RISC OS>)

=end original

実装されていません。
(Win32, S<RISC OS>)

=begin original

Implemented on 64 bit VMS 8.3.  VMS requires the symbolic link to be in Unix
syntax if it is intended to resolve to a valid path.

=end original

64 ビット VMS 8.3 で実装されています。
VMS は、有効なパスを解決することを目的としているなら、シンボリックリンクが
Unix の文法であることが必要です。

=item syscall

=begin original

Not implemented. (S<Mac OS>, Win32, VMS, S<RISC OS>, VOS, VM/ESA)

=end original

実装されていません。
(S<Mac OS>, Win32, VMS, S<RISC OS>, VOS, VM/ESA)

=item sysopen

=begin original

The traditional "0", "1", and "2" MODEs are implemented with different
numeric values on some systems.  The flags exported by C<Fcntl>
(O_RDONLY, O_WRONLY, O_RDWR) should work everywhere though.  (S<Mac
OS>, OS/390, VM/ESA)

=end original

伝統的なl "0", "1",  2" の MODE は一部のシステムでは異なる数値で
実装されています。
しかし、C<Fcntl> でエクスポートされるフラグ (O_RDONLY, O_WRONLY, O_RDWR) は
どこでも動作するはずです。
(S<Mac OS>, OS/390, VM/ESA)

=item system

=begin original

Only implemented if ToolServer is installed. (S<Mac OS>)

=end original

ToolServer がインストールされているときにのみ実装されています。
(S<Mac OS>)

=begin original

As an optimization, may not call the command shell specified in
C<$ENV{PERL5SHELL}>.  C<system(1, @args)> spawns an external
process and immediately returns its process designator, without
waiting for it to terminate.  Return value may be used subsequently
in C<wait> or C<waitpid>.  Failure to spawn() a subprocess is indicated
by setting $? to "255 << 8".  C<$?> is set in a way compatible with
Unix (i.e. the exitstatus of the subprocess is obtained by "$? >> 8",
as described in the documentation).  (Win32)

=end original

最適化として、C<$ENV{PERL5SHELL}> で指定されたコマンドシェルを
呼び出さないかもしれません。
C<system(1, @args)> は外部プロセスを起動して、その終了を待たず、
直ちにそのプロセス指定子を返します。
返り値は引き続く C<wait> や C<waitpid> で使えます。
サブプロセスの spawn() の失敗は、$? に "255 << 8" を設定することで
示されます。
C<$?> は Unix と互換性のある方法 (つまり、サブプロセスの終了ステータスは
文書に記述されている通りに "$? >> 8" で得られる) で設定されます。
(Win32)

=begin original

There is no shell to process metacharacters, and the native standard is
to pass a command line terminated by "\n" "\r" or "\0" to the spawned
program.  Redirection such as C<< > foo >> is performed (if at all) by
the run time library of the spawned program.  C<system> I<list> will call
the Unix emulation library's C<exec> emulation, which attempts to provide
emulation of the stdin, stdout, stderr in force in the parent, providing
the child program uses a compatible version of the emulation library.
I<scalar> will call the native command line direct and no such emulation
of a child Unix program will exists.  Mileage B<will> vary.  (S<RISC OS>)

=end original

メタ文字を処理するシェルはなく、ネイティブな標準では
"\n", "\r", "\0" で終端されたコマンドラインを spawn したプログラムに
渡します。
C<< > foo >> のようなリダイレクトは spawn したプログラムの
ランタイムライブラリによって実行されます。
C<system> I<list> will call
the Unix emulation library's C<exec> emulation, which attempts to provide
emulation of the stdin, stdout, stderr in force in the parent, providing
the child program uses a compatible version of the emulation library.
I<scalar> はネイティブなコマンドラインを直接呼び出し、子 Unix プログラムの
エミュレーションは存在しません。
これは状況によって B<異なります>。
(S<RISC OS>)
(TBT)

=begin original

Far from being POSIX compliant.  Because there may be no underlying
/bin/sh tries to work around the problem by forking and execing the
first token in its argument string.  Handles basic redirection
("<" or ">") on its own behalf. (MiNT)

=end original

POSIX 準拠からはほど遠いです。
基礎となる /bin/sh がないかもしれないので、引数文字列の最初のトークンを
fork して実行することで問題を回避しようとします。
基本的なリダイレクト ("<" や ">") を自身に代わって扱います。
(MiNT)

=begin original

Does not automatically flush output handles on some platforms.
(SunOS, Solaris, HP-UX)

=end original

一部のプラットフォームでは出力ハンドルを自動的にフラッシュしません。
(SunOS, Solaris, HP-UX)

=begin original

The return value is POSIX-like (shifted up by 8 bits), which only allows
room for a made-up value derived from the severity bits of the native
32-bit condition code (unless overridden by C<use vmsish 'status'>). 
If the native condition code is one that has a POSIX value encoded, the
POSIX value will be decoded to extract the expected exit value.
For more details see L<perlvms/$?>. (VMS)

=end original

返り値は POSIX 風 (8 ビットシフト) で、(C<use vmsish 'status'> で
上書きされない限り)ネイティブな 32 ビット条件コードの重大度ビットから
作り上げられた値のための場所だけがあります。
ネイティブな条件コードが POSIX 値をエンコードしたものなら、
POSIX 値は想定される終了コードを展開するためにデコードされます。
さらなる詳細については L<perlvms/$?> を参照してください。

=item times

=begin original

Only the first entry returned is nonzero. (S<Mac OS>)

=end original

返された最初のエントリが非 0 のときのみです。
(S<Mac OS>)

=begin original

"cumulative" times will be bogus.  On anything other than Windows NT
or Windows 2000, "system" time will be bogus, and "user" time is
actually the time returned by the clock() function in the C runtime
library. (Win32)

=end original

「累積」時間は偽りかもしれません。
Windows NT と Windows 2000 以外では、「システム」時間は偽りかもしれず、
「ユーザ」時間は実際には C ランタイムライブラリの clock() 関数から
かえされた時刻です。
(Win32)

=begin original

Not useful. (S<RISC OS>)

=end original

使い道はありません。
(S<RISC OS>)

=item truncate

=begin original

Not implemented. (Older versions of VMS)

=end original

実装されていません。
(Older versions of VMS)

=begin original

Truncation to same-or-shorter lengths only. (VOS)

=end original

同じかより短い長さへの切り詰めのみです。
(VOS)

=begin original

If a FILEHANDLE is supplied, it must be writable and opened in append
mode (i.e., use C<<< open(FH, '>>filename') >>>
or C<sysopen(FH,...,O_APPEND|O_RDWR)>.  If a filename is supplied, it
should not be held open elsewhere. (Win32)

=end original

FILEHANDLE が指定されると、それは書き込み可能で、追記モード
(つまり C<<< open(FH, '>>filename') >>> または
C<sysopen(FH,...,O_APPEND|O_RDWR)> を使っている)でなければなりません。
ファイル名が指定されると、他で開いていてはいけません。
(Win32)

=item umask

=begin original

Returns undef where unavailable, as of version 5.005.

=end original

バージョン 5.005 から、利用不可能な場合は undef を返します。

=begin original

C<umask> works but the correct permissions are set only when the file
is finally closed. (AmigaOS)

=end original

C<umask> は動作しますが、正しい権限はファイルが最終的に閉じられたときにのみ
設定されます。
(AmigaOS)

=item utime

=begin original

Only the modification time is updated. (S<BeOS>, S<Mac OS>, VMS, S<RISC OS>)

=end original

修正時刻が更新されたときのみです。
(S<BeOS>, S<Mac OS>, VMS, S<RISC OS>)

=begin original

May not behave as expected.  Behavior depends on the C runtime
library's implementation of utime(), and the filesystem being
used.  The FAT filesystem typically does not support an "access
time" field, and it may limit timestamps to a granularity of
two seconds. (Win32)

=end original

想定した通りに動作しないかもしれません。
振る舞いは C ランタイムライブラリの utime() の実装と、使われる
ファイルシステムに依存します。
FAT ファイルシステムは典型的には「アクセス時刻」フィールドに
対応しておらず、タイムスタンプの制度が 2 秒に制限されているかも
しれません。
(Win32)

=item wait

=item waitpid

=begin original

Not implemented. (S<Mac OS>)

=end original

実装されていません。
(S<Mac OS>)

=begin original

Can only be applied to process handles returned for processes spawned
using C<system(1, ...)> or pseudo processes created with C<fork()>. (Win32)

=end original

C<system(1, ...)> を使って作成されたプロセスか、C<fork()> で作成された
疑似プロセスで返されたプロセスハンドルに対してのみ適用できます。
(Win32)

=begin original

Not useful. (S<RISC OS>)

=end original

使い道はありません。
(S<RISC OS>)

=back

=head1 Supported Platforms

(対応しているプラットフォーム)

=begin original

As of July 2002 (the Perl release 5.8.0), the following platforms are
able to build Perl from the standard source code distribution
available at http://www.cpan.org/src/index.html

=end original

2002 年 7 月 (Perl リリース 5.8.0) 現在、以下のプラットフォームが
http://www.cpan.org/src/index.html から利用可能な標準ソースコード配布から
ビルド可能です:

        AIX
        BeOS
        BSD/OS          (BSDi)
        Cygwin
        DG/UX
        DOS DJGPP       1)
        DYNIX/ptx
        EPOC R5
        FreeBSD
        HI-UXMPP        (Hitachi) (5.8.0 worked but we didn't know it)
        HP-UX
        IRIX
        Linux
        Mac OS Classic
        Mac OS X        (Darwin)
        MPE/iX
        NetBSD
        NetWare
        NonStop-UX
        ReliantUNIX     (formerly SINIX)
        OpenBSD
        OpenVMS         (formerly VMS)
        Open UNIX       (Unixware) (since Perl 5.8.1/5.9.0)
        OS/2
        OS/400          (using the PASE) (since Perl 5.8.1/5.9.0)
        PowerUX
        POSIX-BC        (formerly BS2000)
        QNX
        Solaris
        SunOS 4
        SUPER-UX        (NEC)
        Tru64 UNIX      (formerly DEC OSF/1, Digital UNIX)
        UNICOS
        UNICOS/mk
        UTS
        VOS
        Win95/98/ME/2K/XP 2)
        WinCE
        z/OS            (formerly OS/390)
        VM/ESA

        1) in DOS mode either the DOS or OS/2 ports can be used
        2) compilers: Borland, MinGW (GCC), VC6

=begin original

The following platforms worked with the previous releases (5.6 and
5.7), but we did not manage either to fix or to test these in time
for the 5.8.0 release.  There is a very good chance that many of these
will work fine with the 5.8.0.

=end original

以下のプラットフォームは以前のリリース (5.6 と 5.7) で動作していましたが、
5.8.0 リリースのときに修正やテストができませんでした。
これらの多くは 5.8.0 でうまく動く可能性がかなりあります。

        BSD/OS
        DomainOS
        Hurd
        LynxOS
        MachTen
        PowerMAX
        SCO SV
        SVR4
        Unixware
        Windows 3.1

=begin original

Known to be broken for 5.8.0 (but 5.6.1 and 5.7.2 can be used):

=end original

5.8.0 で壊れていることが知られています (しかし 5.6.1 と 5.7.2 は使えます):

	AmigaOS

=begin original

The following platforms have been known to build Perl from source in
the past (5.005_03 and earlier), but we haven't been able to verify
their status for the current release, either because the
hardware/software platforms are rare or because we don't have an
active champion on these platforms--or both.  They used to work,
though, so go ahead and try compiling them, and let perlbug@perl.org
of any trouble.

=end original

以下のプラットフォームは過去 (5.005_03 以前) にソースから Perl を
ビルドしたことが知られていますが、現在のリリースに対する状況を
確認できません; ハードウェア/ソフトウェアプラットフォームがレアなものか、
これらのプラットフォームに対するアクティブな推進者がいないか、
あるいはその両方が理由です。
しかし以前は動いていたので、ぜひコンパイルしてみて、perlbug@perl.org に
問題点を知らせてください。

        3b1
        A/UX
        ConvexOS
        CX/UX
        DC/OSx
        DDE SMES
        DOS EMX
        Dynix
        EP/IX
        ESIX
        FPS
        GENIX
        Greenhills
        ISC
        MachTen 68k
        MiNT
        MPC
        NEWS-OS
        NextSTEP
        OpenSTEP
        Opus
        Plan 9
        RISC/os
        SCO ODT/OSR
        Stellar
        SVR2
        TI1500
        TitanOS
        Ultrix
        Unisys Dynix

=begin original

The following platforms have their own source code distributions and
binaries available via http://www.cpan.org/ports/

=end original

以下のプラットフォームは http://www.cpan.org/ports/ 経由で独自の
ソースコード配布とバイナリが利用可能です:

                                Perl release

        OS/400 (ILE)            5.005_02
        Tandem Guardian         5.004

=begin original

The following platforms have only binaries available via
http://www.cpan.org/ports/index.html :

=end original

以下のプラットフォームは http://www.cpan.org/ports/index.html 経由で
バイナリのみが利用可能です:

                                Perl release

        Acorn RISCOS            5.005_02
        AOS                     5.002
        LynxOS                  5.004_02

=begin original

Although we do suggest that you always build your own Perl from
the source code, both for maximal configurability and for security,
in case you are in a hurry you can check
http://www.cpan.org/ports/index.html for binary distributions.

=end original

しかし、私たちは、最大限の設定可能性とセキュリティの両方のために、
常にあなた自身の Perl をソースからビルドすることを提案しています;
急いでいる場合には http://www.cpan.org/ports/index.html にある
バイナリ配布をチェックしてください。

=head1 SEE ALSO

L<perlaix>, L<perlamiga>, L<perlapollo>, L<perlbeos>, L<perlbs2000>,
L<perlce>, L<perlcygwin>, L<perldgux>, L<perldos>, L<perlepoc>,
L<perlebcdic>, L<perlfreebsd>, L<perlhurd>, L<perlhpux>, L<perlirix>,
L<perlmachten>, L<perlmacos>, L<perlmacosx>, L<perlmint>, L<perlmpeix>,
L<perlnetware>, L<perlos2>, L<perlos390>, L<perlos400>,
L<perlplan9>, L<perlqnx>, L<perlsolaris>, L<perltru64>,
L<perlunicode>, L<perlvmesa>, L<perlvms>, L<perlvos>,
L<perlwin32>, and L<Win32>.

=head1 AUTHORS / CONTRIBUTORS

Abigail <abigail@foad.org>,
Charles Bailey <bailey@newman.upenn.edu>,
Graham Barr <gbarr@pobox.com>,
Tom Christiansen <tchrist@perl.com>,
Nicholas Clark <nick@ccl4.org>,
Thomas Dorner <Thomas.Dorner@start.de>,
Andy Dougherty <doughera@lafayette.edu>,
Dominic Dunlop <domo@computer.org>,
Neale Ferguson <neale@vma.tabnsw.com.au>,
David J. Fiander <davidf@mks.com>,
Paul Green <Paul.Green@stratus.com>,
M.J.T. Guy <mjtg@cam.ac.uk>,
Jarkko Hietaniemi <jhi@iki.fi>,
Luther Huffman <lutherh@stratcom.com>,
Nick Ing-Simmons <nick@ing-simmons.net>,
Andreas J. KE<ouml>nig <a.koenig@mind.de>,
Markus Laker <mlaker@contax.co.uk>,
Andrew M. Langmead <aml@world.std.com>,
Larry Moore <ljmoore@freespace.net>,
Paul Moore <Paul.Moore@uk.origin-it.com>,
Chris Nandor <pudge@pobox.com>,
Matthias Neeracher <neeracher@mac.com>,
Philip Newton <pne@cpan.org>,
Gary Ng <71564.1743@CompuServe.COM>,
Tom Phoenix <rootbeer@teleport.com>,
AndrE<eacute> Pirard <A.Pirard@ulg.ac.be>,
Peter Prymmer <pvhp@forte.com>,
Hugo van der Sanden <hv@crypt0.demon.co.uk>,
Gurusamy Sarathy <gsar@activestate.com>,
Paul J. Schinder <schinder@pobox.com>,
Michael G Schwern <schwern@pobox.com>,
Dan Sugalski <dan@sidhe.org>,
Nathan Torkington <gnat@frii.com>.
John Malmberg <wb8tyw@qsl.net>

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>
Status: in progress

=end meta

