
=encoding euc-jp

=head1 NAME

=begin original

perldelta - what is new for perl v5.10.1

=end original

perldelta - perl v5.10.1 での変更点

=head1 DESCRIPTION

=begin original

This document describes differences between the 5.10.0 release and
the 5.10.1 release.

=end original

このドキュメントは 5.10.0 リリースと 5.10.1 リリースの変更点を記述しています。

=begin original

If you are upgrading from an earlier release such as 5.8.8, first read
the L<perl5100delta>, which describes differences between 5.8.8 and
5.10.0

=end original

もしそれよりも前のリリース、例えば 5.8.8 等からアップデートするのなら、
5.8.8 と 5.10.0 との違いが書かれている L<perl5100delta> を読んでおいた方が
よいでしょう。

=head1 Incompatible Changes

(互換性のない変更)

=head2 Switch statement changes

(switch 文の変更)

=begin original

The handling of complex expressions by the C<given>/C<when> switch
statement has been enhanced. There are two new cases where C<when> now
interprets its argument as a boolean, instead of an expression to be used
in a smart match:

=end original


=over 4

=item flip-flop operators

=begin original

The C<..> and C<...> flip-flop operators are now evaluated in boolean
context, following their usual semantics; see L<perlop/"Range Operators">.

=end original


=begin original

Note that, as in perl 5.10.0, C<when (1..10)> will not work to test
whether a given value is an integer between 1 and 10; you should use
C<when ([1..10])> instead (note the array reference).

=end original


=begin original

However, contrary to 5.10.0, evaluating the flip-flop operators in boolean
context ensures it can now be useful in a C<when()>, notably for
implementing bistable conditions, like in:

=end original


    when (/^=begin/ .. /^=end/) {
      # do something
    }

=item defined-or operator

=begin original

A compound expression involving the defined-or operator, as in
C<when (expr1 // expr2)>, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in C<when (expr1 || expr2)>.)

=end original


=back

=begin original

The next section details more changes brought to the semantics to
the smart match operator, that naturally also modify the behaviour
of the switch statements where smart matching is implicitly used.

=end original


=head2 Smart match changes

(スマートマッチングの変更)

=head3 Changes to type-based dispatch

(型ベースの発行(dispatch)への変更)

=begin original

The smart match operator C<~~> is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:

=end original


=over 4

=item *

=begin original

Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).

=end original


=item *

=begin original

C<%hash ~~ sub {}> and C<@array ~~ sub {}> now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.

=end original


=item *

=begin original

Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the C<~~> operator,
but like any vulgar scalar.

=end original


=item *

=begin original

C<undef ~~ %hash> is always false (since C<undef> can't be a key in a
hash). No implicit conversion to C<""> is done (as was the case in perl
5.10.0).

=end original


=item *

=begin original

C<$scalar ~~ @array> now always distributes the smart match across the
elements of the array. It's true if one element in @array verifies
C<$scalar ~~ $element>. This is a generalization of the old behaviour
that tested whether the array contained the scalar.

=end original


=back

=begin original

The full dispatch table for the smart match operator is given in
L<perlsyn/"Smart matching in detail">.

=end original


=head3 Smart match and overloading

(スマートマッチングとオーバーロード)

=begin original

According to the rule of dispatch based on the rightmost argument type,
when an object overloading C<~~> appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see L<overload>.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way distributivity of smart match
across arrays is not broken, as well as the other behaviours with complex
types (coderefs, hashes, regexes). Thus, writers of overloading routines
for smart match mostly need to worry only with comparing against a scalar,
and possibly with stringification overloading; the other common cases
will be automatically handled consistently.

=end original


=begin original

C<~~> will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)

=end original


=head2 Other incompatible changes

(その他の互換性のない変更)

=over 4

=item *

=begin original

The semantics of C<use feature :5.10*> have changed slightly.
See L<"Modules and Pragmata"> for more information.

=end original


=item *

=begin original

It is now a run-time error to use the smart match operator C<~~>
with an object that has no overload defined for it. (This way
C<~~> will not break encapsulation by matching against the
object's internal representation as a reference.)

=end original


=item *

=begin original

The version control system used for the development of the perl
interpreter has been switched from Perforce to git.  This is mainly an
internal issue that only affects people actively working on the perl core;
but it may have minor external visibility, for example in some of details
of the output of C<perl -V>. See L<perlrepository> for more information.

=end original


=item *

=begin original

The internal structure of the C<ext/> directory in the perl source has
been reorganised. In general, a module C<Foo::Bar> whose source was
stored under F<ext/Foo/Bar/> is now located under F<ext/Foo-Bar/>. Also,
some modules have been moved from F<lib/> to F<ext/>. This is purely a
source tarball change, and should make no difference to the compilation or
installation of perl, unless you have a very customised build process that
explicitly relies on this structure, or which hard-codes the C<nonxs_ext>
F<Configure> parameter. Specifically, this change does not by default
alter the location of any files in the final installation.

=end original


=item *

=begin original

As part of the C<Test::Harness> 2.x to 3.x upgrade, the experimental
C<Test::Harness::Straps> module has been removed.
See L</"Updated Modules"> for more details.

=end original


=item *

=begin original

As part of the C<ExtUtils::MakeMaker> upgrade, the
C<ExtUtils::MakeMaker::bytes> and C<ExtUtils::MakeMaker::vmsish> modules
have been removed from this distribution.

=end original


=item *

=begin original

C<Module::CoreList> no longer contains the C<%:patchlevel> hash.

=end original


=item *

=begin original

This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.

=end original


=begin original

A bugfix related to the handling of the C</m> modifier and C<qr> resulted
in a change of behaviour between 5.8.x and 5.10.0:

=end original


    # matches in 5.8.x, doesn't match in 5.10.0
    $re = qr/^bar/; "foo\nbar" =~ /$re/m;

=back

=head1 Core Enhancements

(Core の拡張)

=head2 Unicode Character Database 5.1.0

=begin original

The copy of the Unicode Character Database included in Perl 5.10.1 has
been updated to 5.1.0 from 5.0.0. See
L<http://www.unicode.org/versions/Unicode5.1.0/#NotableChanges> for the
notable changes.

=end original

Perl 5.10.1 に含まれる Unicode Character Database は 5.0.0 から 5.1.0 に
更新されました。
注目するべき変更点については
L<http://www.unicode.org/versions/Unicode5.1.0/#NotableChanges> を
参照してください。

=head2 A proper interface for pluggable Method Resolution Orders

(プラグ可能なメソッド解決順序のための適切なインターフェース)

=begin original

As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See L<perlmroapi> for
more information.

=end original


=head2 The C<overloading> pragma

(C<overloading> プラグマ)

=begin original

This pragma allows you to lexically disable or enable overloading
for some or all operations. (Yuval Kogman)

=end original


=head2 Parallel tests

(平行テスト)

=begin original

The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running C<make test>, set C<TEST_JOBS> in
your environment to the number of tests to run in parallel, and run
C<make test_harness>. On a Bourne-like shell, this can be done as

=end original


    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel

=begin original

An environment variable is used, rather than parallel make itself, because
L<TAP::Harness> needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to C<make> utilities to
interact with their job schedulers.

=end original


=begin original

Note that currently some test scripts may fail when run in parallel (most
notably C<ext/IO/t/io_dir.t>). If necessary run just the failing scripts
again sequentially and see if the failures go away.

=end original


=head2 DTrace support

(DTrace 対応)

=begin original

Some support for DTrace has been added. See "DTrace support" in F<INSTALL>.

=end original


=head2 Support for C<configure_requires> in CPAN module metadata

(CPAN モジュールメタデータの C<configure_requires> への対応)

=begin original

Both C<CPAN> and C<CPANPLUS> now support the C<configure_requires> keyword
in the C<META.yml> metadata file included in most recent CPAN distributions.
This allows distribution authors to specify configuration prerequisites that
must be installed before running F<Makefile.PL> or F<Build.PL>.

=end original


=begin original

See the documentation for C<ExtUtils::MakeMaker> or C<Module::Build> for more
on how to specify C<configure_requires> when creating a distribution for CPAN.

=end original


=head1 Modules and Pragmata

(モジュールとプラグマ)

=head2 New Modules and Pragmata

(新しいモジュールとプラグマ)

=over 4

=item C<autodie>

=begin original

This is a new lexically-scoped alternative for the C<Fatal> module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when C<autodie> is in effect can cause the autodie behaviour to leak
into the surrounding scope. See L<autodie/"BUGS"> for more details.

=end original


=item C<Compress::Raw::Bzip2>

=begin original

This has been added to the core (version 2.020).

=end original


=item C<parent>

=begin original

This pragma establishes an ISA relationship with base classes at compile
time. It provides the key feature of C<base> without the feature creep.

=end original


=item C<Parse::CPAN::Meta>

=begin original

This has been added to the core (version 1.39).

=end original


=back

=head2 Pragmata Changes

(変更されたプラグマ)

=over 4

=item C<attributes>

=begin original

Upgraded from version 0.08 to 0.09.

=end original


=item C<attrs>

=begin original

Upgraded from version 1.02 to 1.03.

=end original


=item C<base>

=begin original

Upgraded from version 2.13 to 2.14. See L<parent> for a replacement.

=end original


=item C<bigint>

=begin original

Upgraded from version 0.22 to 0.23.

=end original


=item C<bignum>

=begin original

Upgraded from version 0.22 to 0.23.

=end original


=item C<bigrat>

=begin original

Upgraded from version 0.22 to 0.23.

=end original


=item C<charnames>

=begin original

Upgraded from version 1.06 to 1.07.

=end original


=begin original

The Unicode F<NameAliases.txt> database file has been added. This has the
effect of adding some extra C<\N> character names that formerly wouldn't
have been recognised; for example, C<"\N{LATIN CAPITAL LETTER GHA}">.

=end original


=item C<constant>

=begin original

Upgraded from version 1.13 to 1.17.

=end original


=item C<feature>

=begin original

The meaning of the C<:5.10> and C<:5.10.X> feature bundles has
changed slightly. The last component, if any (i.e. C<X>) is simply ignored.
This is predicated on the assumption that new features will not, in
general, be added to maintenance releases. So C<:5.10> and C<:5.10.X>
have identical effect. This is a change to the behaviour documented for
5.10.0.

=end original


=item C<fields>

=begin original

Upgraded from version 2.13 to 2.14 (this was just a version bump; there
were no functional changes).

=end original


=item C<lib>

=begin original

Upgraded from version 0.5565 to 0.62.

=end original


=item C<open>

=begin original

Upgraded from version 1.06 to 1.07.

=end original


=item C<overload>

=begin original

Upgraded from version 1.06 to 1.07.

=end original


=item C<overloading>

=begin original

See L</"The C<overloading> pragma"> above.

=end original


=item C<version>

=begin original

Upgraded from version 0.74 to 0.77.

=end original


=back

=head2 Updated Modules

(更新されたモジュール)

=over 4

=item C<Archive::Extract>

=begin original

Upgraded from version 0.24 to 0.34.

=end original


=item C<Archive::Tar>

=begin original

Upgraded from version 1.38 to 1.52.

=end original


=item C<Attribute::Handlers>

=begin original

Upgraded from version 0.79 to 0.85.

=end original


=item C<AutoLoader>

=begin original

Upgraded from version 5.63 to 5.68.

=end original


=item C<AutoSplit>

=begin original

Upgraded from version 1.05 to 1.06.

=end original


=item C<B>

=begin original

Upgraded from version 1.17 to 1.22.

=end original


=item C<B::Debug>

=begin original

Upgraded from version 1.05 to 1.11.

=end original


=item C<B::Deparse>

=begin original

Upgraded from version 0.83 to 0.89.

=end original


=item C<B::Lint>

=begin original

Upgraded from version 1.09 to 1.11.

=end original


=item C<B::Xref>

=begin original

Upgraded from version 1.01 to 1.02.

=end original


=item C<Benchmark>

=begin original

Upgraded from version 1.10 to 1.11.

=end original


=item C<Carp>

=begin original

Upgraded from version 1.08 to 1.11.

=end original


=item C<CGI>

=begin original

Upgraded from version 3.29 to 3.43.
(also includes the "default_value for popup_menu()" fix from 3.45).

=end original


=item C<Compress::Zlib>

=begin original

Upgraded from version 2.008 to 2.020.

=end original


=item C<CPAN>

=begin original

Upgraded from version 1.9205 to 1.9402. C<CPAN::FTP> has a local fix to
stop it being too verbose on download failure.

=end original


=item C<CPANPLUS>

=begin original

Upgraded from version 0.84 to 0.88.

=end original


=item C<CPANPLUS::Dist::Build>

=begin original

Upgraded from version 0.06_02 to 0.36.

=end original


=item C<Cwd>

=begin original

Upgraded from version 3.25_01 to 3.30.

=end original


=item C<Data::Dumper>

=begin original

Upgraded from version 2.121_14 to 2.124.

=end original


=item C<DB>

=begin original

Upgraded from version 1.01 to 1.02.

=end original


=item C<DB_File>

=begin original

Upgraded from version 1.816_1 to 1.820.

=end original


=item C<Devel::PPPort>

=begin original

Upgraded from version 3.13 to 3.19.

=end original


=item C<Digest::MD5>

=begin original

Upgraded from version 2.36_01 to 2.39.

=end original


=item C<Digest::SHA>

=begin original

Upgraded from version 5.45 to 5.47.

=end original


=item C<DirHandle>

=begin original

Upgraded from version 1.01 to 1.03.

=end original


=item C<Dumpvalue>

=begin original

Upgraded from version 1.12 to 1.13.

=end original


=item C<DynaLoader>

=begin original

Upgraded from version 1.08 to 1.10.

=end original


=item C<Encode>

=begin original

Upgraded from version 2.23 to 2.35.

=end original


=item C<Errno>

=begin original

Upgraded from version 1.10 to 1.11.

=end original


=item C<Exporter>

=begin original

Upgraded from version 5.62 to 5.63.

=end original


=item C<ExtUtils::CBuilder>

=begin original

Upgraded from version 0.21 to 0.2602.

=end original


=item C<ExtUtils::Command>

=begin original

Upgraded from version 1.13 to 1.16.

=end original


=item C<ExtUtils::Constant>

=begin original

Upgraded from 0.20 to 0.22. (Note that neither of these versions are
available on CPAN.)

=end original


=item C<ExtUtils::Embed>

=begin original

Upgraded from version 1.27 to 1.28.

=end original


=item C<ExtUtils::Install>

=begin original

Upgraded from version 1.44 to 1.54.

=end original


=item C<ExtUtils::MakeMaker>

=begin original

Upgraded from version 6.42 to 6.55_02.

=end original


=begin original

Note that C<ExtUtils::MakeMaker::bytes> and C<ExtUtils::MakeMaker::vmsish>
have been removed from this distribution.

=end original


=item C<ExtUtils::Manifest>

=begin original

Upgraded from version 1.51_01 to 1.56.

=end original


=item C<ExtUtils::ParseXS>

=begin original

Upgraded from version 2.18_02 to 2.2002.

=end original


=item C<Fatal>

=begin original

Upgraded from version 1.05 to 2.06_01. See also the new pragma C<autodie>.

=end original


=item C<File::Basename>

=begin original

Upgraded from version 2.76 to 2.77.

=end original


=item C<File::Compare>

=begin original

Upgraded from version 1.1005 to 1.1006.

=end original


=item C<File::Copy>

=begin original

Upgraded from version 2.11 to 2.14.

=end original


=item C<File::Fetch>

=begin original

Upgraded from version 0.14 to 0.20.

=end original


=item C<File::Find>

=begin original

Upgraded from version 1.12 to 1.14.

=end original


=item C<File::Path>

=begin original

Upgraded from version 2.04 to 2.07_03.

=end original


=item C<File::Spec>

=begin original

Upgraded from version 3.2501 to 3.30.

=end original


=item C<File::stat>

=begin original

Upgraded from version 1.00 to 1.01.

=end original


=item C<File::Temp>

=begin original

Upgraded from version 0.18 to 0.22.

=end original


=item C<FileCache>

=begin original

Upgraded from version 1.07 to 1.08.

=end original


=item C<FileHandle>

=begin original

Upgraded from version 2.01 to 2.02.

=end original


=item C<Filter::Simple>

=begin original

Upgraded from version 0.82 to 0.84.

=end original


=item C<Filter::Util::Call>

=begin original

Upgraded from version 1.07 to 1.08.

=end original


=item C<FindBin>

=begin original

Upgraded from version 1.49 to 1.50.

=end original


=item C<GDBM_File>

=begin original

Upgraded from version 1.08 to 1.09.

=end original


=item C<Getopt::Long>

=begin original

Upgraded from version 2.37 to 2.38.

=end original


=item C<Hash::Util::FieldHash>

=begin original

Upgraded from version 1.03 to 1.04. This fixes a memory leak.

=end original


=item C<I18N::Collate>

=begin original

Upgraded from version 1.00 to 1.01.

=end original


=item C<IO>

=begin original

Upgraded from version 1.23_01 to 1.25.

=end original


=begin original

This makes non-blocking mode work on Windows in C<IO::Socket::INET>
[CPAN #43573].

=end original


=item C<IO::Compress::*>

=begin original

Upgraded from version 2.008 to 2.020.

=end original


=item C<IO::Dir>

=begin original

Upgraded from version 1.06 to 1.07.

=end original


=item C<IO::Handle>

=begin original

Upgraded from version 1.27 to 1.28.

=end original


=item C<IO::Socket>

=begin original

Upgraded from version 1.30_01 to 1.31.

=end original


=item C<IO::Zlib>

=begin original

Upgraded from version 1.07 to 1.09.

=end original


=item C<IPC::Cmd>

=begin original

Upgraded from version 0.40_1 to 0.46.

=end original


=item C<IPC::Open3>

=begin original

Upgraded from version 1.02 to 1.04.

=end original


=item C<IPC::SysV>

=begin original

Upgraded from version 1.05 to 2.01.

=end original


=item C<lib>

=begin original

Upgraded from version 0.5565 to 0.62.

=end original


=item C<List::Util>

=begin original

Upgraded from version 1.19 to 1.21.

=end original


=item C<Locale::MakeText>

=begin original

Upgraded from version 1.12 to 1.13.

=end original


=item C<Log::Message>

=begin original

Upgraded from version 0.01 to 0.02.

=end original


=item C<Math::BigFloat>

=begin original

Upgraded from version 1.59 to 1.60.

=end original


=item C<Math::BigInt>

=begin original

Upgraded from version 1.88 to 1.89.

=end original


=item C<Math::BigInt::FastCalc>

=begin original

Upgraded from version 0.16 to 0.19.

=end original


=item C<Math::BigRat>

=begin original

Upgraded from version 0.21 to 0.22.

=end original


=item C<Math::Complex>

=begin original

Upgraded from version 1.37 to 1.56.

=end original


=item C<Math::Trig>

=begin original

Upgraded from version 1.04 to 1.20.

=end original


=item C<Memoize>

=begin original

Upgraded from version 1.01_02 to 1.01_03 (just a minor documentation
change).

=end original


=item C<Module::Build>

=begin original

Upgraded from version 0.2808_01 to 0.34_02.

=end original


=item C<Module::CoreList>

=begin original

Upgraded from version 2.13 to 2.18. This release no longer contains the
C<%Module::CoreList::patchlevel> hash.

=end original


=item C<Module::Load>

=begin original

Upgraded from version 0.12 to 0.16.

=end original


=item C<Module::Load::Conditional>

=begin original

Upgraded from version 0.22 to 0.30.

=end original


=item C<Module::Loaded>

=begin original

Upgraded from version 0.01 to 0.02.

=end original


=item C<Module::Pluggable>

=begin original

Upgraded from version 3.6 to 3.9.

=end original


=item C<NDBM_File>

=begin original

Upgraded from version 1.07 to 1.08.

=end original


=item C<Net::Ping>

=begin original

Upgraded from version 2.33 to 2.36.

=end original


=item C<NEXT>

=begin original

Upgraded from version 0.60_01 to 0.64.

=end original


=item C<Object::Accessor>

=begin original

Upgraded from version 0.32 to 0.34.

=end original


=item C<OS2::REXX>

=begin original

Upgraded from version 1.03 to 1.04.

=end original


=item C<Package::Constants>

=begin original

Upgraded from version 0.01 to 0.02.

=end original


=item C<PerlIO>

=begin original

Upgraded from version 1.04 to 1.06.

=end original


=item C<PerlIO::via>

=begin original

Upgraded from version 0.04 to 0.07.

=end original


=item C<Pod::Man>

=begin original

Upgraded from version 2.16 to 2.22.

=end original


=item C<Pod::Parser>

=begin original

Upgraded from version 1.35 to 1.37.

=end original


=item C<Pod::Simple>

=begin original

Upgraded from version 3.05 to 3.07.

=end original


=item C<Pod::Text>

=begin original

Upgraded from version 3.08 to 3.13.

=end original


=item C<POSIX>

=begin original

Upgraded from version 1.13 to 1.17.

=end original


=item C<Safe>

=begin original

Upgraded from 2.12 to 2.18.

=end original


=item C<Scalar::Util>

=begin original

Upgraded from version 1.19 to 1.21.

=end original


=item C<SelectSaver>

=begin original

Upgraded from 1.01 to 1.02.

=end original


=item C<SelfLoader>

=begin original

Upgraded from 1.11 to 1.17.

=end original


=item C<Socket>

=begin original

Upgraded from 1.80 to 1.82.

=end original


=item C<Storable>

=begin original

Upgraded from 2.18 to 2.20.

=end original


=item C<Switch>

=begin original

Upgraded from version 2.13 to 2.14. Please see L</Deprecations>.

=end original


=item C<Symbol>

=begin original

Upgraded from version 1.06 to 1.07.

=end original


=item C<Sys::Syslog>

=begin original

Upgraded from version 0.22 to 0.27.

=end original


=item C<Term::ANSIColor>

=begin original

Upgraded from version 1.12 to 2.00.

=end original


=item C<Term::ReadLine>

=begin original

Upgraded from version 1.03 to 1.04.

=end original


=item C<Term::UI>

=begin original

Upgraded from version 0.18 to 0.20.

=end original


=item C<Test::Harness>

=begin original

Upgraded from version 2.64 to 3.17.

=end original


=begin original

Note that one side-effect of the 2.x to 3.x upgrade is that the
experimental C<Test::Harness::Straps> module (and its supporting
C<Assert>, C<Iterator>, C<Point> and C<Results> modules) have been
removed. If you still need this, then they are available in the
(unmaintained) C<Test-Harness-Straps> distribution on CPAN.

=end original


=item C<Test::Simple>

=begin original

Upgraded from version 0.72 to 0.92.

=end original


=item C<Text::ParseWords>

=begin original

Upgraded from version 3.26 to 3.27.

=end original


=item C<Text::Tabs>

=begin original

Upgraded from version 2007.1117 to 2009.0305.

=end original


=item C<Text::Wrap>

=begin original

Upgraded from version 2006.1117 to 2009.0305.

=end original


=item C<Thread::Queue>

=begin original

Upgraded from version 2.00 to 2.11.

=end original


=item C<Thread::Semaphore>

=begin original

Upgraded from version 2.01 to 2.09.

=end original


=item C<threads>

=begin original

Upgraded from version 1.67 to 1.72.

=end original


=item C<threads::shared>

=begin original

Upgraded from version 1.14 to 1.29.

=end original


=item C<Tie::RefHash>

=begin original

Upgraded from version 1.37 to 1.38.

=end original


=item C<Tie::StdHandle>

=begin original

This has documentation changes, and has been assigned a version for the
first time: version 4.2.

=end original


=item C<Time::HiRes>

=begin original

Upgraded from version 1.9711 to 1.9719.

=end original


=item C<Time::Local>

=begin original

Upgraded from version 1.18 to 1.1901.

=end original


=item C<Time::Piece>

=begin original

Upgraded from version 1.12 to 1.15.

=end original


=item C<Unicode::Normalize>

=begin original

Upgraded from version 1.02 to 1.03.

=end original


=item C<Unicode::UCD>

=begin original

Upgraded from version 0.25 to 0.27.

=end original


=begin original

C<charinfo()> now works on Unified CJK code points added to later versions
of Unicode.

=end original


=begin original

C<casefold()> has new fields returned to provide both a simpler interface
and previously missing information. The old fields are retained for
backwards compatibility. Information about Turkic-specific code points is
now returned.

=end original


=begin original

The documentation has been corrected and expanded.

=end original


=item C<UNIVERSAL>

=begin original

Upgraded from version 1.04 to 1.05.

=end original


=item C<Win32>

=begin original

Upgraded from version 0.34 to 0.39.

=end original


=item C<Win32API::File>

=begin original

Upgraded from version 0.1001_01 to 0.1101.

=end original


=item C<XSLoader>

=begin original

Upgraded from version 0.08 to 0.10.

=end original


=back

=head1 Utility Changes

(ツールの変更)

=over 4

=item F<h2ph>

=begin original

Now looks in C<include-fixed> too, which is a recent addition to gcc's
search path.

=end original


=item F<h2xs>

=begin original

No longer incorrectly treats enum values like macros (Daniel Burr).

=end original


=begin original

Now handles C++ style constants (C<//>) properly in enums. (A patch from
Rainer Weikusat was used; Daniel Burr also proposed a similar fix).

=end original


=item F<perl5db.pl>

=begin original

C<LVALUE> subroutines now work under the debugger.

=end original


=begin original

The debugger now correctly handles proxy constant subroutines, and
subroutine stubs.

=end original


=item F<perlthanks>

=begin original

Perl 5.10.1 adds a new utility F<perlthanks>, which is a variant of
F<perlbug>, but for sending non-bug-reports to the authors and maintainers
of Perl. Getting nothing but bug reports can become a bit demoralising:
we'll see if this changes things.

=end original


=back

=head1 New Documentation

(新しい文書)

=over 4

=item L<perlhaiku>

=begin original

This contains instructions on how to build perl for the Haiku platform.

=end original


=item L<perlmroapi>

=begin original

This describes the new interface for pluggable Method Resolution Orders.

=end original


=item L<perlperf>

=begin original

This document, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.

=end original


=item L<perlrepository>

=begin original

This describes how to access the perl source using the I<git> version
control system.

=end original


=item L<perlthanks>

=begin original

This describes the new F<perlthanks> utility.

=end original


=back

=head1 Changes to Existing Documentation

(既存の文書の変更)

=begin original

The various large C<Changes*> files (which listed every change made to perl
over the last 18 years) have been removed, and replaced by a small file,
also called C<Changes>, which just explains how that same information may
be extracted from the git version control system.

=end original


=begin original

The file F<Porting/patching.pod> has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to L<perlrepository>.

=end original


=begin original

L<perlapi>, L<perlintern>, L<perlmodlib> and L<perltoc> are now all
generated at build time, rather than being shipped as part of the release.

=end original


=head1 Performance Enhancements

(パフォーマンスの向上)

=over 4

=item *

=begin original

A new internal cache means that C<isa()> will often be faster.

=end original


=item *

=begin original

Under C<use locale>, the locale-relevant information is now cached on
read-only values, such as the list returned by C<keys %hash>. This makes
operations such as C<sort keys %hash> in the scope of C<use locale> much
faster.

=end original


=item *

=begin original

Empty C<DESTROY> methods are no longer called.

=end original


=back

=head1 Installation and Configuration Improvements

(インストールと設定の改良)

=head2 F<ext/> reorganisation

(F<ext/> の再構成)

=begin original

The layout of directories in F<ext> has been revised. Specifically, all
extensions are now flat, and at the top level, with C</> in pathnames
replaced by C<->, so that F<ext/Data/Dumper/> is now F<ext/Data-Dumper/>,
etc.  The names of the extensions as specified to F<Configure>, and as
reported by C<%Config::Config> under the keys C<dynamic_ext>,
C<known_extensions>, C<nonxs_ext> and C<static_ext> have not changed, and
still use C</>. Hence this change will not have any affect once perl is
installed. However, C<Attribute::Handlers>, C<Safe> and C<mro> have now
become extensions in their own right, so if you run F<Configure> with
options to specify an exact list of extensions to build, you will need to
change it to account for this.

=end original


=begin original

For 5.10.2, it is planned that many dual-life modules will have been moved
from F<lib> to F<ext>; again this will have no effect on an installed
perl, but will matter if you invoke F<Configure> with a pre-canned list of
extensions to build.

=end original


=head2 Configuration improvements

(設定の改良)

=begin original

If C<vendorlib> and C<vendorarch> are the same, then they are only added to
C<@INC> once.

=end original


=begin original

C<$Config{usedevel}> and the C-level C<PERL_USE_DEVEL> are now defined if
perl is built with  C<-Dusedevel>.

=end original


=begin original

F<Configure> will enable use of C<-fstack-protector>, to provide protection
against stack-smashing attacks, if the compiler supports it.

=end original


=begin original

F<Configure> will now determine the correct prototypes for re-entrant
functions, and for C<gconvert>, if you are using a C++ compiler rather
than a C compiler.

=end original


=begin original

On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of C<perl -v> and C<perl -V>. Unpushed local commits
are automatically added to the list of local patches displayed by
C<perl -V>.

=end original


=head2 Compilation improvements

(コンパイルの改良)

=begin original

As part of the flattening of F<ext>, all extensions on all platforms are
built by F<make_ext.pl>. This replaces the Unix-specific
F<ext/util/make_ext>, VMS-specific F<make_ext.com> and Win32-specific
F<win32/buildext.pl>.

=end original


=head2 Platform Specific Changes

(プラットフォーム固有の変更)

=over 4

=item AIX

=begin original

Removed F<libbsd> for AIX 5L and 6.1. Only flock() was used from F<libbsd>.

=end original


=begin original

Removed F<libgdbm> for AIX 5L and 6.1. The F<libgdbm> is delivered as an
optional package with the AIX Toolbox. Unfortunately the 64 bit version 
is broken.

=end original


=begin original

Hints changes mean that AIX 4.2 should work again.

=end original


=item Cygwin

=begin original

On Cygwin we now strip the last number from the DLL. This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.

=end original


=item FreeBSD

=begin original

The hints files now identify the correct threading libraries on FreeBSD 7
and later.

=end original


=item Irix

=begin original

We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
C<cc -E -> unfortunately goes into K&R mode, but C<cc -E file.c> doesn't.

=end original


=item Haiku

=begin original

Patches from the Haiku maintainers have been merged in. Perl should now
build on Haiku.

=end original


=item MirOS BSD

=begin original

Perl should now build on MirOS BSD.

=end original


=item NetBSD

=begin original

Hints now supports versions 5.*.

=end original


=item Stratus VOS

=begin original

Various changes from Stratus have been merged in.

=end original


=item Symbian

=begin original

There is now support for Symbian S60 3.2 SDK and S60 5.0 SDK.

=end original


=item Win32

=begin original

Improved message window handling means that C<alarm> and C<kill> messages
will no longer be dropped under race conditions.

=end original


=item VMS

=begin original

Reads from the in-memory temporary files of C<PerlIO::scalar> used to fail
if C<$/> was set to a numeric reference (to indicate record-style reads).
This is now fixed.

=end original


=begin original

VMS now supports C<getgrgid>.

=end original


=begin original

Many improvements and cleanups have been made to the VMS file name handling
and conversion code.

=end original


=begin original

Enabling the C<PERL_VMS_POSIX_EXIT> logical name now encodes a POSIX exit
status in a VMS condition value for better interaction with GNV's bash
shell and other utilities that depend on POSIX exit values.  See
L<perlvms/"$?"> for details.

=end original


=back

=head1 Selected Bug Fixes

(バグ修正の抜粋)

=over 4

=item *

=begin original

5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from C<@_>. The optimisation has been re-instated, and
the performance regression fixed.

=end original


=item *

=begin original

Fixed memory leak on C<while (1) { map 1, 1 }> [RT #53038].

=end original


=item *

=begin original

Some potential coredumps in PerlIO fixed [RT #57322,54828].

=end original


=item *

=begin original

The debugger now works with lvalue subroutines.

=end original


=item *

=begin original

The debugger's C<m> command was broken on modules that defined constants
[RT #61222].

=end original


=item *

=begin original

C<crypt()> and string complement could return tainted values for untainted
arguments [RT #59998].

=end original


=item *

=begin original

The C<-i.suffix> command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [RT #60904].

=end original


=item *

=begin original

On some UNIX systems, the value in C<$?> would not have the top bit set
(C<$? & 128>) even if the child core dumped.

=end original


=item *

=begin original

Under some circumstances, $^R could incorrectly become undefined
[RT #57042].

=end original


=item *

=begin original

(XS) In various hash functions, passing a pre-computed hash to when the
key is UTF-8 might result in an incorrect lookup.

=end original


=item *

=begin original

(XS) Including F<XSUB.h> before F<perl.h> gave a compile-time error
[RT #57176].

=end original


=item *

=begin original

C<< $object->isa('Foo') >> would report false if the package C<Foo> didn't
exist, even if the object's C<@ISA> contained C<Foo>.

=end original


=item *

=begin original

Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
C<@ISA>, have been found and fixed.

=end original


=item *

=begin original

Bitwise operations on references could crash the interpreter, e.g.
C<$x=\$y; $x |= "foo"> [RT #54956].

=end original


=item *

=begin original

Patterns including alternation might be sensitive to the internal UTF-8
representation, e.g.

=end original


    my $byte = chr(192);
    my $utf8 = chr(192); utf8::upgrade($utf8);
    $utf8 =~ /$byte|X}/i;	# failed in 5.10.0

=item *

=begin original

Within UTF8-encoded Perl source files (i.e. where C<use utf8> is in
effect), double-quoted literal strings could be corrupted where a C<\xNN>,
C<\0NNN> or C<\N{}> is followed by a literal character with ordinal value
greater than 255 [RT #59908].

=end original


=item *

=begin original

C<B::Deparse> failed to correctly deparse various constructs:
C<readpipe STRING> [RT #62428], C<CORE::require(STRING)> [RT #62488],
C<sub foo(_)> [RT #62484].

=end original


=item *

=begin original

Using C<setpgrp()> with no arguments could corrupt the perl stack.

=end original


=item *

=begin original

The block form of C<eval> is now specifically trappable by C<Safe> and
C<ops>.  Previously it was erroneously treated like string C<eval>.

=end original


=item *

=begin original

In 5.10.0, the two characters C<[~> were sometimes parsed as the smart
match operator (C<~~>) [RT #63854].

=end original


=item *

=begin original

In 5.10.0, the C<*> quantifier in patterns was sometimes treated as
C<{0,32767}> [RT #60034, #60464]. For example, this match would fail:

=end original


    ("ab" x 32768) =~ /^(ab)*$/

=item *

=begin original

C<shmget> was limited to a 32 bit segment size on a 64 bit OS [RT #63924].

=end original


=item *

=begin original

Using C<next> or C<last> to exit a C<given> block no longer produces a
spurious warning like the following:

=end original


    Exiting given via last at foo.pl line 123

=item *

=begin original

On Windows, C<'.\foo'> and C<'..\foo'>  were treated differently than
C<'./foo'> and C<'../foo'> by C<do> and C<require> [RT #63492].

=end original


=item *

=begin original

Assigning a format to a glob could corrupt the format; e.g.:

=end original


     *bar=*foo{FORMAT}; # foo format now bad

=item *

=begin original

Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
C<Can't coerce GLOB to I<$type>>.

=end original


=item *

=begin original

Under C<use filetest 'access'>, C<-x> was using the wrong access mode. This
has been fixed [RT #49003].

=end original


=item *

=begin original

C<length> on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.

=end original


=item *

=begin original

Using an array C<tie> inside in array C<tie> could SEGV. This has been
fixed. [RT #51636]

=end original


=item *

=begin original

A race condition inside C<PerlIOStdio_close()> has been identified and
fixed. This used to cause various threading issues, including SEGVs.

=end original


=item *

=begin original

In C<unpack>, the use of C<()> groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs.  This is now fixed [RT #50256].

=end original


=item *

=begin original

Magic was called twice in C<substr>, C<\&$x>, C<tie $x, $m> and C<chop>.
These have all been fixed.

=end original


=item *

=begin original

A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of C<s///ge> has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit 
ef0d4e17921ee3de].

=end original


=item *

=begin original

The line numbers for warnings inside C<elsif> are now correct.

=end original


=item *

=begin original

The C<..> operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.

=end original


=item *

=begin original

C<binmode STDIN, ':raw'> could lead to segmentation faults on some platforms.
This has been fixed [RT #54828].

=end original


=item *

=begin original

An off-by-one error meant that C<index $str, ...> was effectively being
executed as C<index "$str\0", ...>. This has been fixed [RT #53746].

=end original


=item *

=begin original

Various leaks associated with named captures in regexes have been fixed
[RT #57024].

=end original


=item *

=begin original

A weak reference to a hash would leak. This was affecting C<DBI>
[RT #56908].

=end original


=item *

=begin original

Using (?|) in a regex could cause a segfault [RT #59734].

=end original


=item *

=begin original

Use of a UTF-8 C<tr//> within a closure could cause a segfault [RT #61520].

=end original


=item *

=begin original

Calling C<sv_chop()> or otherwise upgrading an SV could result in an
unaligned 64-bit access on the SPARC architecture [RT #60574].

=end original


=item *

=begin original

In the 5.10.0 release, C<inc_version_list> would incorrectly list
C<5.10.*> after C<5.8.*>; this affected the C<@INC> search order
[RT #67628].

=end original


=item *

=begin original

In 5.10.0, C<pack "a*", $tainted_value> returned a non-tainted value
[RT #52552].

=end original


=item *

=begin original

In 5.10.0, C<printf> and C<sprintf> could produce the fatal error
C<panic: utf8_mg_pos_cache_update> when printing UTF-8 strings
[RT #62666].

=end original


=item *

=begin original

In the 5.10.0 release, a dynamically created C<AUTOLOAD> method might be
missed (method cache issue) [RT #60220,60232].

=end original


=item *

=begin original

In the 5.10.0 release, a combination of C<use feature> and C<//ee> could
cause a memory leak [RT #63110].

=end original


=item *

=begin original

C<-C> on the shebang (C<#!>) line is once more permitted if it is also
specified on the command line. C<-C> on the shebang line used to be a
silent no-op I<if> it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [RT #67880].

=end original


=item *

=begin original

In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [RT #60508]:

=end original


    Assertion rx->sublen >= (s - rx->subbeg) + i failed


=back

=head1 New or Changed Diagnostics

(新しい、または変更された診断メッセージ)

=over 4

=item C<panic: sv_chop %s>

=begin original

This new fatal error occurs when the C routine C<Perl_sv_chop()> was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy XS code, and at this point recovery is not
possible.

=end original


=item C<Can't locate package %s for the parents of %s>

=begin original

This warning has been removed. In general, it only got produced in
conjunction with other warnings, and removing it allowed an ISA lookup
optimisation to be added.

=end original


=item C<v-string in use/require is non-portable>

=begin original

This warning has been removed.

=end original


=item C<Deep recursion on subroutine "%s">

=begin original

It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the F<perl> binary, setting the C
pre-processor macro C<PERL_SUB_DEPTH_WARN> to the desired value.

=end original


=back

=head1 Changed Internals

(内部の変更)

=over 4

=item *

=begin original

The J.R.R. Tolkien quotes at the head of C source file have been checked and
proper citations added, thanks to a patch from Tom Christiansen.

=end original


=item *

=begin original

C<vcroak()> now accepts a null first argument. In addition, a full audit
was made of the "not NULL" compiler annotations, and those for several
other internal functions were corrected.

=end original


=item *

=begin original

New macros C<dSAVEDERRNO>, C<dSAVE_ERRNO>, C<SAVE_ERRNO>, C<RESTORE_ERRNO>
have been added to formalise the temporary saving of the C<errno>
variable.

=end original


=item *

=begin original

The function C<Perl_sv_insert_flags> has been added to augment
C<Perl_sv_insert>.

=end original


=item *

=begin original

The function C<Perl_newSV_type(type)> has been added, equivalent to
C<Perl_newSV()> followed by C<Perl_sv_upgrade(type)>.

=end original


=item *

=begin original

The function C<Perl_newSVpvn_flags()> has been added, equivalent to
C<Perl_newSVpvn()> and then performing the action relevant to the flag.

=end original


=begin original

Two flag bits are currently supported.

=end original


=over 4

=item C<SVf_UTF8>

=begin original

This will call C<SvUTF8_on()> for you. (Note that this does not convert an
sequence of ISO 8859-1 characters to UTF-8). A wrapper, C<newSVpvn_utf8()>
is available for this.

=end original


=item C<SVs_TEMP>

=begin original

Call C<sv_2mortal()> on the new SV.

=end original


=back

=begin original

There is also a wrapper that takes constant strings, C<newSVpvs_flags()>.

=end original


=item *

=begin original

The function C<Perl_croak_xs_usage> has been added as a wrapper to
C<Perl_croak>.

=end original


=item *

=begin original

The functions C<PerlIO_find_layer> and C<PerlIO_list_alloc> are now
exported.

=end original


=item *

=begin original

C<PL_na> has been exterminated from the core code, replaced by local STRLEN
temporaries, or C<*_nolen()> calls. Either approach is faster than C<PL_na>,
which is a pointer deference into the interpreter structure under ithreads,
and a global variable otherwise.

=end original


=item *

=begin original

C<Perl_mg_free()> used to leave freed memory accessible via SvMAGIC() on
the scalar. It now updates the linked list to remove each piece of magic
as it is freed.

=end original


=item *

=begin original

Under ithreads, the regex in C<PL_reg_curpm> is now reference counted. This
eliminates a lot of hackish workarounds to cope with it not being reference
counted.

=end original


=item *

=begin original

C<Perl_mg_magical()> would sometimes incorrectly turn on C<SvRMAGICAL()>.
This has been fixed.

=end original


=item *

=begin original

The I<public> IV and NV flags are now not set if the string value has
trailing "garbage". This behaviour is consistent with not setting the
public IV or NV flags if the value is out of range for the type.

=end original


=item *

=begin original

SV allocation tracing has been added to the diagnostics enabled by C<-Dm>.
The tracing can alternatively output via the C<PERL_MEM_LOG> mechanism, if
that was enabled when the F<perl> binary was compiled.

=end original


=item *

=begin original

Uses of C<Nullav>, C<Nullcv>, C<Nullhv>, C<Nullop>, C<Nullsv> etc have been
replaced by C<NULL> in the core code, and non-dual-life modules, as C<NULL>
is clearer to those unfamiliar with the core code.

=end original


=item *

=begin original

A macro C<MUTABLE_PTR(p)> has been added, which on (non-pedantic) gcc will
not cast away C<const>, returning a C<void *>. Macros C<MUTABLE_SV(av)>,
C<MUTABLE_SV(cv)> etc build on this, casting to C<AV *> etc without
casting away C<const>. This allows proper compile-time auditing of
C<const> correctness in the core, and helped picked up some errors (now
fixed).

=end original


=item *

=begin original

Macros C<mPUSHs()> and C<mXPUSHs()> have been added, for pushing SVs on the
stack and mortalizing them.

=end original


=item *

=begin original

Use of the private structure C<mro_meta> has changed slightly. Nothing
outside the core should be accessing this directly anyway.

=end original


=item *

=begin original

A new tool, C<Porting/expand-macro.pl> has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.

=end original


=back

=head1 New Tests

(新しいテスト)

=begin original

Many modules updated from CPAN incorporate new tests.

=end original


=begin original

Several tests that have the potential to hang forever if they fail now
incorporate a "watchdog" functionality that will kill them after a timeout,
which helps ensure that C<make test> and C<make test_harness> run to
completion automatically. (Jerry Hedden).

=end original


=begin original

Some core-specific tests have been added:

=end original


=over 4

=item t/comp/retainedlines.t

=begin original

Check that the debugger can retain source lines from C<eval>.

=end original


=item t/io/perlio_fail.t

=begin original

Check that bad layers fail.

=end original


=item t/io/perlio_leaks.t

=begin original

Check that PerlIO layers are not leaking.

=end original


=item t/io/perlio_open.t

=begin original

Check that certain special forms of open work.

=end original


=item t/io/perlio.t

=begin original

General PerlIO tests.

=end original


=item t/io/pvbm.t

=begin original

Check that there is no unexpected interaction between the internal types
C<PVBM> and C<PVGV>.

=end original


=item t/mro/package_aliases.t

=begin original

Check that mro works properly in the presence of aliased packages.

=end original


=item t/op/dbm.t

=begin original

Tests for C<dbmopen> and C<dbmclose>.

=end original


=item t/op/index_thr.t

=begin original

Tests for the interaction of C<index> and threads.

=end original


=item t/op/pat_thr.t

=begin original

Tests for the interaction of esoteric patterns and threads.

=end original


=item t/op/qr_gc.t

=begin original

Test that C<qr> doesn't leak.

=end original


=item t/op/reg_email_thr.t

=begin original

Tests for the interaction of regex recursion and threads.

=end original


=item t/op/regexp_qr_embed_thr.t

=begin original

Tests for the interaction of patterns with embedded C<qr//> and threads.

=end original


=item t/op/regexp_unicode_prop.t

=begin original

Tests for Unicode properties in regular expressions.

=end original


=item t/op/regexp_unicode_prop_thr.t

=begin original

Tests for the interaction of Unicode properties and threads.

=end original


=item t/op/reg_nc_tie.t

=begin original

Test the tied methods of C<Tie::Hash::NamedCapture>.

=end original


=item t/op/reg_posixcc.t 

=begin original

Check that POSIX character classes behave consistently.

=end original


=item t/op/re.t

=begin original

Check that exportable C<re> functions in F<universal.c> work.

=end original


=item t/op/setpgrpstack.t

=begin original

Check that C<setpgrp> works.

=end original


=item t/op/substr_thr.t

=begin original

Tests for the interaction of C<substr> and threads.

=end original


=item t/op/upgrade.t

=begin original

Check that upgrading and assigning scalars works.

=end original


=item t/uni/lex_utf8.t

=begin original

Check that Unicode in the lexer works.

=end original


=item t/uni/tie.t

=begin original

Check that Unicode and C<tie> work.

=end original


=back

=head1 Known Problems

(既知の問題)

=begin original

This is a list of some significant unfixed bugs, which are regressions
from either 5.10.0 or 5.8.x.

=end original


=over 4

=item *

=begin original

C<List::Util::first> misbehaves in the presence of a lexical C<$_>
(typically introduced by C<my $_> or implicitly by C<given>). The variable
which gets set for each iteration is the package variable C<$_>, not the
lexical C<$_> [RT #67694].

=end original


=begin original

A similar issue may occur in other modules that provide functions which
take a block as their first argument, like

=end original


    foo { ... $_ ...} list

=item *

=begin original

The C<charnames> pragma may generate a run-time error when a regex is
interpolated [RT #56444]:

=end original


    use charnames ':full';
    my $r1 = qr/\N{THAI CHARACTER SARA I}/;
    "foo" =~ $r1;    # okay
    "foo" =~ /$r1+/; # runtime error

=begin original

A workaround is to generate the character outside of the regex:

=end original


    my $a = "\N{THAI CHARACTER SARA I}";
    my $r1 = qr/$a/;

=item *

=begin original

Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [RT #55600].

=end original



=back

=head1 Deprecations

(非推奨)

=begin original

The following items are now deprecated.

=end original


=over 4

=item *

=begin original

C<Switch> is buggy and should be avoided. From perl 5.11.0 onwards, it is
intended that any use of the core version of this module will emit a
warning, and that the module will eventually be removed from the core
(probably in perl 5.14.0). See L<perlsyn/"Switch statements"> for its
replacement.

=end original


=item *

=begin original

C<suidperl> will be removed in 5.12.0. This provides a mechanism to
emulate setuid permission bits on systems that don't support it properly.

=end original


=back

=head1 Acknowledgements

(謝辞)

=begin original

Some of the work in this release was funded by a TPF grant.

=end original


=begin original

Nicholas Clark officially retired from maintenance pumpking duty at the
end of 2008; however in reality he has put much effort in since then to
help get 5.10.1 into a fit state to be released, including writing a
considerable chunk of this perldelta.

=end original


=begin original

Steffen Mueller and David Golden in particular helped getting CPAN modules
polished and synchronised with their in-core equivalents.

=end original


=begin original

Craig Berry was tireless in getting maint to run under VMS, no matter how
many times we broke it for him.

=end original


=begin original

The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in F<AUTHORS>.

=end original


=begin original

(Sorry to all the people I haven't mentioned by name).

=end original


=begin original

Finally, thanks to Larry Wall, without whom none of this would be
necessary.

=end original


=head1 Reporting Bugs

(バグ報告)

=begin original

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

=end original


=begin original

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

=end original


=begin original

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=end original


=head1 SEE ALSO

=begin original

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

=end original

F<Changes> ファイルに変更点の完全な詳細を見る方法についての説明があります。

=begin original

The F<INSTALL> file for how to build Perl.

=end original

F<INSTALL> ファイルに Perl のビルド方法があります。

=begin original

The F<README> file for general stuff.

=end original

F<README> ファイルに一般的なことがあります。

=begin original

The F<Artistic> and F<Copying> files for copyright information.

=end original

F<Artistic> 及び F<Copying> ファイルに著作権情報があります。

=begin meta

Translate: Kentaro Shirakata <argrath@ub32.org>
License: Same as Perl

=end meta

=cut

