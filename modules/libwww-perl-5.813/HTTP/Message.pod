
=encoding euc-jp

=head1 NAME

=begin original

HTTP::Message - HTTP style message (base class)

=end original

HTTP::Message - HTTP 形式のメッセージ (基底クラス)

=head1 SYNOPSIS

 use base 'HTTP::Message';

=head1 DESCRIPTION

=begin original

An C<HTTP::Message> object contains some headers and a content body.
The following methods are available:

=end original

C<HTTP::Message> オブジェクトには幾つかのヘッダとコンテンツの本体が
入っています。
以下のメソッドが利用できます:

=over 4

=item $mess = HTTP::Message->new

=item $mess = HTTP::Message->new( $headers )

=item $mess = HTTP::Message->new( $headers, $content )

=begin original

This constructs a new message object.  Normally you would want
construct C<HTTP::Request> or C<HTTP::Response> objects instead.

=end original

これは新しいメッセージオブジェクトを構築します。
普通は代わりに C<HTTP::Request> または C<HTTP::Response> オブジェクトを
構築したいでしょう。

=begin original

The optional $header argument should be a reference to an
C<HTTP::Headers> object or a plain array reference of key/value pairs.
If an C<HTTP::Headers> object is provided then a copy of it will be
embedded into the constructed message, i.e. it will not be owned and
can be modified afterwards without affecting the message.

=end original

The optional $header argument should be a reference to an
C<HTTP::Headers> object or a plain array reference of key/value pairs.
If an C<HTTP::Headers> object is provided then a copy of it will be
embedded into the constructed message, i.e. it will not be owned and
can be modified afterwards without affecting the message.
(TBT)

=begin original

The optional $content argument should be a string of bytes.

=end original

The optional $content argument should be a string of bytes.
(TBT)

=item $mess = HTTP::Message->parse( $str )

=begin original

This constructs a new message object by parsing the given string.

=end original

This constructs a new message object by parsing the given string.
(TBT)

=item $mess->headers

=begin original

Returns the embedded C<HTTP::Headers> object.

=end original

埋め込まれた C<HTTP::Headers> オブジェクトを返します。

=item $mess->headers_as_string

=item $mess->headers_as_string( $eol )

=begin original

Call the as_string() method for the headers in the
message.  This will be the same as

=end original

メッセージの中のヘッダのために as_string() を呼び出します。
This will be the same as
(TBT)

    $mess->headers->as_string

=begin original

but it will make your program a whole character shorter :-)

=end original

but it will make your program a whole character shorter :-)
(TBT)

=item $mess->content

=item $mess->content( $bytes )

=begin original

The content() method sets the raw content if an argument is given.  If no
argument is given the content is not touched.  In either case the
original raw content is returned.

=end original

引数が与えられていれば、content() メソッドは生のコンテンツを設定します。
引数が与えられなければ、コンテンツは触られません。
いずれの場合も元の生のコンテンツは返されます。

=begin original

Note that the content should be a string of bytes.  Strings in perl
can contain characters outside the range of a byte.  The C<Encode>
module can be used to turn such strings into a string of bytes.

=end original

Note that the content should be a string of bytes.  Strings in perl
can contain characters outside the range of a byte.  The C<Encode>
module can be used to turn such strings into a string of bytes.
(TBT)

=item $mess->add_content( $bytes )

=begin original

The add_content() methods appends more data bytes to the end of the
current content buffer.

=end original

add_content() メソッドは現在のコンテンツの末尾にさらにバイトデータを
追加します。

=item $mess->add_content_utf8( $string )

=begin original

The add_content_utf8() method appends the UTF-8 bytes representing the
string to the end of the current content buffer.

=end original

The add_content_utf8() method appends the UTF-8 bytes representing the
string to the end of the current content buffer.
(TBT)

=item $mess->content_ref

=item $mess->content_ref( \$bytes )

=begin original

The content_ref() method will return a reference to content buffer string.
It can be more efficient to access the content this way if the content
is huge, and it can even be used for direct manipulation of the content,
for instance:

=end original

content_ref() メソッドはコンテンツバッファ文字列へのリファレンスを返します。
コンテンツが巨大であれば、この方法でコンテンツにアクセスするのはより
効率的かもしれません。
そしてコンテンツの直接操作するためにすら使うことが出来ます。
例えば:

  ${$res->content_ref} =~ s/\bfoo\b/bar/g;

=begin original

This example would modify the content buffer in-place.

=end original

This example would modify the content buffer in-place.
(TBT)

=begin original

If an argument is passed it will setup the content to reference some
external source.  The content() and add_content() methods
will automatically dereference scalar references passed this way.  For
other references content() will return the reference itself and
add_content() will refuse to do anything.

=end original

If an argument is passed it will setup the content to reference some
external source.  The content() and add_content() methods
will automatically dereference scalar references passed this way.  For
other references content() will return the reference itself and
add_content() will refuse to do anything.
(TBT)

=item $mess->decoded_content( %options )

=begin original

Returns the content with any C<Content-Encoding> undone and the raw
content encoded to perl's Unicode strings.  If the C<Content-Encoding>
or C<charset> of the message is unknown this method will fail by
returning C<undef>.

=end original

Returns the content with any C<Content-Encoding> undone and the raw
content encoded to perl's Unicode strings.  If the C<Content-Encoding>
or C<charset> of the message is unknown this method will fail by
returning C<undef>.
(TBT)

=begin original

The following options can be specified.

=end original

The following options can be specified.
(TBT)

=over

=item C<charset>

=begin original

This override the charset parameter for text content.  The value
C<none> can used to suppress decoding of the charset.

=end original

This override the charset parameter for text content.  The value
C<none> can used to suppress decoding of the charset.
(TBT)

=item C<default_charset>

=begin original

This override the default charset of "ISO-8859-1".

=end original

This override the default charset of "ISO-8859-1".
(TBT)

=item C<charset_strict>

=begin original

Abort decoding if malformed characters is found in the content.  By
default you get the substitution character ("\x{FFFD}") in place of
malformed characters.

=end original

Abort decoding if malformed characters is found in the content.  By
default you get the substitution character ("\x{FFFD}") in place of
malformed characters.
(TBT)

=item C<raise_error>

=begin original

If TRUE then raise an exception if not able to decode content.  Reason
might be that the specified C<Content-Encoding> or C<charset> is not
supported.  If this option is FALSE, then decoded_content() will return
C<undef> on errors, but will still set $@.

=end original

If TRUE then raise an exception if not able to decode content.  Reason
might be that the specified C<Content-Encoding> or C<charset> is not
supported.  If this option is FALSE, then decoded_content() will return
C<undef> on errors, but will still set $@.
(TBT)

=item C<ref>

=begin original

If TRUE then a reference to decoded content is returned.  This might
be more efficient in cases where the decoded content is identical to
the raw content as no data copying is required in this case.

=end original

If TRUE then a reference to decoded content is returned.  This might
be more efficient in cases where the decoded content is identical to
the raw content as no data copying is required in this case.
(TBT)

=back

=item $mess->parts

=item $mess->parts( @parts )

=item $mess->parts( \@parts )

=begin original

Messages can be composite, i.e. contain other messages.  The composite
messages have a content type of C<multipart/*> or C<message/*>.  This
method give access to the contained messages.

=end original

Messages can be composite, i.e. contain other messages.  The composite
messages have a content type of C<multipart/*> or C<message/*>.  This
method give access to the contained messages.
(TBT)

=begin original

The argumentless form will return a list of C<HTTP::Message> objects.
If the content type of $msg is not C<multipart/*> or C<message/*> then
this will return the empty list.  In scalar context only the first
object is returned.  The returned message parts should be regarded as
are read only (future versions of this library might make it possible
to modify the parent by modifying the parts).

=end original

The argumentless form will return a list of C<HTTP::Message> objects.
If the content type of $msg is not C<multipart/*> or C<message/*> then
this will return the empty list.  In scalar context only the first
object is returned.  The returned message parts should be regarded as
are read only (future versions of this library might make it possible
to modify the parent by modifying the parts).
(TBT)

=begin original

If the content type of $msg is C<message/*> then there will only be
one part returned.

=end original

If the content type of $msg is C<message/*> then there will only be
one part returned.
(TBT)

=begin original

If the content type is C<message/http>, then the return value will be
either an C<HTTP::Request> or an C<HTTP::Response> object.

=end original

If the content type is C<message/http>, then the return value will be
either an C<HTTP::Request> or an C<HTTP::Response> object.
(TBT)

=begin original

If an @parts argument is given, then the content of the message will be
modified. The array reference form is provided so that an empty list
can be provided.  The @parts array should contain C<HTTP::Message>
objects.  The @parts objects are owned by $mess after this call and
should not be modified or made part of other messages.

=end original

If an @parts argument is given, then the content of the message will be
modified. The array reference form is provided so that an empty list
can be provided.  The @parts array should contain C<HTTP::Message>
objects.  The @parts objects are owned by $mess after this call and
should not be modified or made part of other messages.
(TBT)

=begin original

When updating the message with this method and the old content type of
$mess is not C<multipart/*> or C<message/*>, then the content type is
set to C<multipart/mixed> and all other content headers are cleared.

=end original

When updating the message with this method and the old content type of
$mess is not C<multipart/*> or C<message/*>, then the content type is
set to C<multipart/mixed> and all other content headers are cleared.
(TBT)

=begin original

This method will croak if the content type is C<message/*> and more
than one part is provided.

=end original

This method will croak if the content type is C<message/*> and more
than one part is provided.
(TBT)

=item $mess->add_part( $part )

=begin original

This will add a part to a message.  The $part argument should be
another C<HTTP::Message> object.  If the previous content type of
$mess is not C<multipart/*> then the old content (together with all
content headers) will be made part #1 and the content type made
C<multipart/mixed> before the new part is added.  The $part object is
owned by $mess after this call and should not be modified or made part
of other messages.

=end original

This will add a part to a message.  The $part argument should be
another C<HTTP::Message> object.  If the previous content type of
$mess is not C<multipart/*> then the old content (together with all
content headers) will be made part #1 and the content type made
C<multipart/mixed> before the new part is added.  The $part object is
owned by $mess after this call and should not be modified or made part
of other messages.
(TBT)

=begin original

There is no return value.

=end original

There is no return value.
(TBT)

=item $mess->clear

=begin original

Will clear the headers and set the content to the empty string.  There
is no return value

=end original

Will clear the headers and set the content to the empty string.  There
is no return value
(TBT)

=item $mess->protocol

=item $mess->protocol( $proto )

=begin original

Sets the HTTP protocol used for the message.  The protocol() is a string
like C<HTTP/1.0> or C<HTTP/1.1>.

=end original

そのメッセージに使われる HTTP プロトコルを設定します。
protocol() は C<HTTP/1.0> や C<HTTP/1.1> のような文字列です。

=item $mess->clone

=begin original

Returns a copy of the message object.

=end original

メッセージオブジェクトのコピーを返します。

=item $mess->as_string

=item $mess->as_string( $eol )

=begin original

Returns the message formatted as a single string.

=end original

Returns the message formatted as a single string.
(TBT)

=begin original

The optional $eol parameter specifies the line ending sequence to use.
The default is "\n".  If no $eol is given then as_string will ensure
that the returned string is newline terminated (even when the message
content is not).  No extra newline is appended if an explicit $eol is
passed.

=end original

The optional $eol parameter specifies the line ending sequence to use.
The default is "\n".  If no $eol is given then as_string will ensure
that the returned string is newline terminated (even when the message
content is not).  No extra newline is appended if an explicit $eol is
passed.
(TBT)

=back

=begin original

All methods unknown to C<HTTP::Message> itself are delegated to the
C<HTTP::Headers> object that is part of every message.  This allows
convenient access to these methods.  Refer to L<HTTP::Headers> for
details of these methods:

=end original

C<HTTP::Message> 自身が分からないすべてのメソッドは、
代わりに各メッセージの一部である C<HTTP::Headers> オブジェクトに
委譲されます。
これは以下の便利メソッドへのアクセスを可能にします。
これらのメソッドについての詳細は C<HTTP::Headers> を参照してください。

    $mess->header( $field => $val )
    $mess->push_header( $field => $val )
    $mess->init_header( $field => $val )
    $mess->remove_header( $field )
    $mess->remove_content_headers
    $mess->header_field_names
    $mess->scan( \&doit )

    $mess->date
    $mess->expires
    $mess->if_modified_since
    $mess->if_unmodified_since
    $mess->last_modified
    $mess->content_type
    $mess->content_encoding
    $mess->content_length
    $mess->content_language
    $mess->title
    $mess->user_agent
    $mess->server
    $mess->from
    $mess->referer
    $mess->www_authenticate
    $mess->authorization
    $mess->proxy_authorization
    $mess->authorization_basic
    $mess->proxy_authorization_basic

=head1 COPYRIGHT

Copyright 1995-2004 Gisle Aas.

This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.


=begin meta

Translated: Hippo2000 <GCD00051@nifty.ne.jp> (5.48)
Updated: Kentaro SHIRAKATA <argrath@ub32.org> (5.813)

=end meta

