=head1 名前

Net::Server::PreForkSimple - Net::Server personality

Net::Server::PreForkSimple - Net::Serverのパーソナリティ

=head1 概要

  use Net::Server::PreForkSimple;
  @ISA = qw(Net::Server::PreFork);

  sub process_request {
     #...コード...
  }

  __PACKAGE__->run();

=head1 説明

Please read the pod on Net::Server first.  This module
is a personality, or extension, or sub class, of the
Net::Server module.

まず始めにNet::ServerのPODを読まれたし。このモジュールは
パーソナリティ(personality)、すなわちNet::Serverの拡張
（サブクラス）である。

This personality binds to one or more ports and then forks
C<max_servers> child processes.  The server will make sure
that at any given time there are always C<max_servers>
available to receive a client request.  Each of
these children will process up to C<max_requests> client
connections.  This type is good for a heavily hit site that can
keep C<max_servers> processes dedicated to the serving.
(Multi port accept defaults to using flock to serialize the
children).

このサーバは一つ以上のポートにbindし、それから
C<max_servers>個の子プロセスをforkする。サーバは常に
C<max_servers>個のクライアントリクエストを受け付けられることを
保証する。子プロセスはそれぞれC<max_requests>個のクライアント
接続を処理する。このタイプはアクセスの激しいサイトに適して
おり、サーバ処理のためにmax_server個のプロセスを維持できる。
（複数ポートを受け付けるためにデフォルトでflockを使って
子プロセスを直列化する）

=head1 サンプルコード

Please see the sample listed in Net::Server.

Net::Serverのサンプルリストを参照のこと。

=head1 コマンドラインからの引数

In addition to the command line arguments of the Net::Server
base class, Net::Server::PreFork contains several other
configurable parameters.

ベースとなるNet::Serverクラスのコマンドライン引数に加えて、
Net::Server::PreForkはいくつかの設定用パラメータを含む。

  Key               Value                   Default
  max_servers       \d+                     50
  max_requests      \d+                     1000

  serialize         (flock|semaphore|pipe)  undef
  # serialize defaults to flock on multi_port or on Solaris
  lock_file         "filename"              POSIX::tmpnam

  check_for_dead    \d+                     30

  max_dequeue       \d+                     undef
  check_for_dequeue \d+                     undef

=over 4

=item max_servers

The maximum number of child servers to start and maintain.
This does not apply to dequeue processes.

=item max_requests

The number of client connections to receive before a
child terminates.

=item serialize

Determines whether the server serializes child connections.
Options are undef, flock, semaphore, or pipe.  Default is undef.
On multi_port servers or on servers running on Solaris, the
default is flock.  The flock option uses blocking exclusive
flock on the file specified in I<lock_file> (see below).
The semaphore option uses IPC::Semaphore (thanks to Bennett
Todd) for giving some sample code.  The pipe option reads on a
pipe to choose the next.  the flock option should be the
most bulletproof while the pipe option should be the most
portable.  (Flock is able to reliquish the block if the
process dies between accept on the socket and reading
of the client connection - semaphore and pipe do not)

=item lock_file

Filename to use in flock serialized accept in order to
serialize the accept sequece between the children.  This
will default to a generated temporary filename.  If default
value is used the lock_file will be removed when the server
closes.

=item check_for_dead

Seconds to wait before checking to see if a child died
without letting the parent know.

=item max_dequeue

The maximum number of dequeue processes to start.  If a
value of zero or undef is given, no dequeue processes will
be started.  The number of running dequeue processes will
be checked by the check_for_dead variable.

=item check_for_dequeue

Seconds to wait before forking off a dequeue process.  The
run_dequeue hook must be defined when using this setting.
It is intended to use the dequeue process to take care of
items such as mail queues.  If a value of undef is given,
no dequeue processes will be started.


=back

=head1 CONFIGURATION FILE

C<Net::Server::PreFork> allows for the use of a
configuration file to read in server parameters.  The format
of this conf file is simple key value pairs.  Comments and
white space are ignored.

  #-------------- file test.conf --------------

  ### server information
  max_servers   80

  max_requests  1000

  ### user and group to become
  user        somebody
  group       everybody

  ### logging ?
  log_file    /var/log/server.log
  log_level   3
  pid_file    /tmp/server.pid

  ### access control
  allow       .+\.(net|com)
  allow       domain\.com
  deny        a.+

  ### background the process?
  background  1

  ### ports to bind
  host        127.0.0.1
  port        localhost:20204
  port        20205

  ### reverse lookups ?
  # reverse_lookups on

  #-------------- file test.conf --------------

=head1 PROCESS FLOW

Process flow follows Net::Server until the loop phase.  At
this point C<max_servers> are forked and wait for
connections.  When a child accepts a connection, finishs
processing a client, or exits, it relays that information to
the parent, which keeps track and makes sure there are
always C<max_servers> running.

=head1 HOOKS

The PreForkSimple server has the following hooks in addition
to the hooks provided by the Net::Server base class.
See L<Net::Server>

=over 4

=item C<$self-E<gt>child_init_hook()>

This hook takes place immeditately after the child process
forks from the parent and before the child begins
accepting connections.  It is intended for any addiotional
chrooting or other security measures.  It is suggested
that all perl modules be used by this point, so that
the most shared memory possible is used.

=item C<$self-E<gt>child_finish_hook()>

This hook takes place immediately before the child tells
the parent that it is exiting.  It is intended for
saving out logged information or other general cleanup.

=item C<$self-E<gt>run_dequeue()>

This hook only gets called in conjuction with the
check_for_dequeue setting.

=back

=head1 TO DO

See L<Net::Server>

=head1 AUTHOR

Paul T. Seamons paul@seamons.com

=head1 THANKS

See L<Net::Server>

=head1 SEE ALSO

Please see also
L<Net::Server::Fork>,
L<Net::Server::INET>,
L<Net::Server::PreFork>,
L<Net::Server::MultiType>,
L<Net::Server::Single>
L<Net::Server::SIG>
L<Net::Server::Daemonize>
L<Net::Server::Proto>

