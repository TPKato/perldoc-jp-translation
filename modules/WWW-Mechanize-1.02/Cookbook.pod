=head1 NAME

WWW::Mechanize::Cookbook - WWW::Mechanizeを使ったレシピ

=head1 Introduction

まず、これらの多くはL<LWP::UserAgent>だけを使ってできることを知って
おいて下さい。C<WWW::Mechanize>はL<LWP::UserAgent>のサブクラスなので、
C<LWP::UserAgent>の動作はおそらくC<WWW::Mechanize>の動作です。
L<libwww-perl>に同梱されているL<lwpcook>を参照してください。

=head1 Basics

=head2 mechの生成

    use WWW::Mechanize;

    my $mech = WWW::Mechanize->new( autocheck => 1 );

C<< autocheck => 1 >>で、Mechanizeに何らかのIOの失敗があればdieする
ように告げていますので、手作業でチェックする必要はありません。こうした
方が簡単でしょう。もし自前のエラーチェックをしたければ、これを取り
去ってください。

=head2 ページの取得

    $mech->get( "http://search.cpan.org" );
    print $mech->content;

C<< $mech->content >>はWebページからの生のHTMLデータを含んでいます。
これはC<content>メソッドを通しているだけで、まったく解析もハンドリング
もされていません。

=head2 ページをファイルに取得

時には結果を直接ファイルにダンプしたいと思うこともあるでしょう。
例えば、直接書き出したいと思っているJPEGファイルをメモリ上に読み込む
理由はありません。こうすると大きなファイルを扱う際のメモリ使用量の面で
助かります。

    $mech->get( "http://www.cpan.org/src/stable.tar.gz",
                ":content_file" => "stable.tar.gz" );

=head1 リンク

=head2 全ての画像リンクの検索

JPEG、GIF、あるいはPNGを指す全てのリンクを検索。

    my @links = $mech->find_all_links(
        tag => "a", url_regex => qr/\.(jpe?g|gif|png)$/i );

=head2 全てのダウンロードリンクの検索

"download"という単語を含む全てのリンクを検索。

    my @links = $mech->find_all_links(
        tag = "a", text_regex => qr/\bdownload\b/i );

=head1 Author

Copyright 2004 Andy Lester C<< <andy@petdance.com> >>

=cut
